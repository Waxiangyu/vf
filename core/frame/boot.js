/**
 * Created by xiyuan on 15-11-30.
 */
//文件引入
var Include = new Function();
new function($FRAME) {


    /**
     * Created by xiyuan on 15-11-30.
     */
    /**
     * Created by xiyuan on 15-11-24.
     */
    (function(factory, exports) {
        if (typeof define === "function" && define.amd) {

            define('log', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('log', [], function(require) {
                return factory();
            });

        } else {
            exports.$$LogInterface = factory();
        }

    })(function() {
        'use strict';

        /*日志模型*/
        function LogInterface() {
            //监听存储器
            this.__EVENTS__ = {
                eventList: [],
                typeEventList: {}
            }
        };

        /*添加日志监听处理*/
        LogInterface.prototype.addEventListener = function(type, fn) {
            var events = this.__EVENTS__,
                eventList = events.eventList,
                typeEventList = events.typeEventList;
            fn || (fn = type, type = null);
            typeof fn === "function" && (type ? (typeEventList[type] || (typeEventList[type] = [])).push(fn) : eventList.push(fn));
        };

        /*日志触发处理*/
        LogInterface.prototype.eventEmit = function(type, arg) {
            var events = this.__EVENTS__,
                eventList = events.eventList,
                typeEventList = events.typeEventList;

            //执行全局日志事件
            var len = eventList.length,
                i = 0,
                emit;
            while (i < len) {
                emit = eventList[i];
                typeof emit === "function" && emit.apply({
                    type: type
                }, arg);
                i++;
            }
            //执行日志类型事件
            len = typeEventList[type].length, i = 0;
            while (i < len) {
                emit = typeEventList[type][i];
                typeof emit === "function" && emit.apply({
                    type: type
                }, arg);
                i++;
            }
        };

        /*添加日志类型*/
        LogInterface.prototype.addLogType = function(type, emit) {
            var self = this,
                events = this.__EVENTS__,
                typeEventList = events.typeEventList;
            //创建日志方法
            var emits = typeEventList[type] || (typeEventList[type] = []);
            //typeof emit === "function" && emits.push(emit);
            this[type] = function() {
                return function() {
                    var msg = typeof emit === "function" ? emit.apply({
                        type: type
                    }, arguments) : '';
                    return self.eventEmit(type, arguments), msg;
                }
            }(type, emit);
        };

        /*var log=new LogInterface();

        /!*错误日志*!/
        log.addLogType('error',function(type,msg){
            console.log(type,msg)
        })

        /!*警告日志*!/
        log.addLogType('warning',function(){
            console.log('warning',arguments)
        })

        /!*控制台输出日志*!/
        log.addLogType('console',function(){
            console.log('console')
        })*/

        return LogInterface;
    }, this);


    /**
     * Created by xiyuan on 15-11-30.
     */
    (function(exports) {
        var log = new exports.$$LogInterface();

        /*错误日志*/
        log.addLogType('error', function(msg, err) {
            var errFile = err.stack.match(/at[\s]+([\S\s]+?)at/),
                errFile = errFile ? errFile[1] : '',
                errName = err.name,
                errMsg = err.message;
            console.error('错误类型:' + errName + '\r\n错误信息:' + errMsg + '\r\n错误文件:' + errFile);
            return msg;
        });

        /*警告日志*/
        log.addLogType('warning', function(msg) {
            console.warn('警告:', msg)
            return msg;
        });

        /*控制台输出日志*/
        log.addLogType('console', function() {
            console.log('console')
        });

        exports.$log = log;

    })(this);

    var $log = this.$log;


    /**
     * Created by xiyuan on 15-11-4.
     *
     * 此包管理器依赖的基础包，并以下顺序加载
     * 1. type
     * 2. object
     * 3. url
     * 4. path
     * 5. jsonp
     *
     */
    (function(exports) {
        'use strict';
        var jsonp, //jsonp模块，用来处理资源获取
            REGEXP = {
                network: /^(http|https|file):\/\//i
            }, //路径模块
            path = {
                dirname: dirname,
                normalize: normalize,
                resolve: function(path, url) {
                    var dir = REGEXP.network.test(path) ? path : dirname(url || window.location.href) + (path || '');
                    return normalize(dir);
                },
                noSuffix: function(path) {
                    return (path.match(/[^?#]*\/[^\.\/]*/) || [''])[0];
                },
                //根据框架路径配置解析路径
                ConfigResolve: function(path, masterUrl) {

                    //检查路径配置是否加载
                    if ($configStroage) {
                        var $src = $configStroage.pathList.src,
                            paths = $src.paths,
                            sort = $configStroage.pathList.maps.sort,
                            sortList = $configStroage.pathList.maps.list,
                            key, value, i, l, $i, $l, $value, tmpValue, rflag;
                        //路径替换
                        path = path.replace(/^\s*\{\s*([^\}\s]+)\s*\}/, function(mate, $1) {
                            //检查是否匹配到path路径
                            key = paths[$1];
                            key = key ? (rflag = true, key) : $1;
                            //进一步匹配map映射路径
                            i = ~0;
                            l = sort.length;
                            maps:
                                while (++i < l) {
                                    value = sortList[sort[i]];
                                    $i = ~0;
                                    $l = value.length;
                                    while (++$i < $l) {
                                        $value = value[$i];
                                        //进行map匹对
                                        if (key.match($value.regexp) && ((tmpValue = key.replace($value.regexp, '')) === '' || tmpValue.indexOf('/') === 0)) {
                                            key = $value.value + tmpValue;
                                            rflag = true;
                                            break maps;
                                        }
                                    }

                                }
                                //判断在path或map中是否有匹配
                            key = rflag ? key : mate;
                            return key;
                        });
                    }
                    //路径常规化（绝对地址）
                    return this.normalize((/^\//.test(path) && masterUrl ? this.dirname(masterUrl) : '') + path);
                }
            },
            fileSuffix = '.js', //资源文件后缀
            includeKeyword = 'require', //包引入关键字
            isType = function(type) { //判断数据类型
                return function(obj) {
                    return {}.toString.call(obj) == "[object " + type + "]"
                }
            },
            tools = { //基础工具
                isObject: isType("Object"),
                isString: isType("String"),
                isArray: Array.isArray || isType("Array"),
                isFunction: isType("Function"),
                getType: function(value) {
                    var type = typeof(value);
                    if (type == 'object') {
                        type = Object.prototype.toString.call(value).match(/Object\s+([a-z0-9_]*)/i)[1].toLocaleLowerCase()
                    }
                    return type;
                }
            },
            $pathRoot = exports.$pathRoot = path.dirname(window.location.href);

        function dirname(path) {
            return (path.match(/[^?#]*\//) || [''])[0];
        };

        function normalize(path) { // 规范化路径
            path = path.replace(/\/[^/]+\/\.\.\//, "/").replace(/([^:/])\/+\//g, "$1/");
            while (path.match(/\/[^/]+\/\.\.\//)) {
                path = path.replace(/\/[^/]+\/\.\.\//, "/")
            }
            return path.replace(/\/\.\//, '/');
        };


        /*分析代码中的关键字，并解析出依赖的包*/
        function analysisDeps(code, keyword, desp) {
            desp = desp || [];
            return desp;
        };

        //获取资源
        function getResources(Package, PackageStroage) {
            var PackageUrl = Package.id;
            //获取jsonp
            jsonp = jsonp || PackageStroage.getPackage('jsonp').exports;
            var tmpInterface = {
                success: null,
                error: null
            };
            var exports = {
                success: function(callback) {
                    tmpInterface.success = callback;
                    return exports;
                },
                error: function(callback) {
                    tmpInterface.error = callback;
                    return exports;
                }
            };

            //通过jsonp方式获取包
            jsonp({
                url: PackageUrl,
                jsonpCallback: 'define',
                init: function(callbackFn) {
                    callbackFn.amd = 'amd';
                },
                success: function() {
                    //返回的数据处理(检查是否有多个回调)
                    if (this.many) {
                        var arg = arguments,
                            len = arg.length,
                            i = 0,
                            url = this.option.url,
                            masterPath = path.noSuffix(url),
                            defineArg, childrenPath;
                        //添加一对多的资源标识
                        Package.many = len;
                        Package.exports = {};
                        while (len > i) {
                            //参数转换
                            defineArg = handel.prototype.resolveDefineArg(arg[i]);
                            defineArg.modelId = defineArg.alias || i.toString();
                            Package.exports[defineArg.modelId.replace(/^:/, '')] = null;
                            //生成真实独立的包
                            new PackageStruct(defineArg.modelId, PackageStroage, defineArg, Package);
                            i++;
                        }
                    } else {
                        tmpInterface.success && tmpInterface.success(handel.prototype.resolveDefineArg(arguments))
                    }
                },
                error: function() {
                    $log.warning('[包管理器] 资源:' + PackageUrl + '加载失败!');
                    tmpInterface.error && tmpInterface.error(handel.prototype.resolveDefineArg(arguments))
                }
            });

            return exports;

        };

        /*id生成器*/
        function makeId() {
            return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/x/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };

        function DepsMapHandel(This) {
            //处理被依赖模块
            var masterDepsMap = This.masterDepsMap,
                master;
            while (masterDepsMap[0]) {
                master = masterDepsMap.shift().master;
                master.depPass();
            }
        };

        /*包插件存储器*/
        function $plugins() {
            this.pluginStroage = [];
        }

        $plugins.prototype.init = function(oldUrl, url, master) {
            var l = this.pluginStroage.length,
                i = ~0,
                v,
                path;
            while (++i < l) {
                v = this.pluginStroage[i];
                if (path = v.handlePath.apply(this, arguments)) {
                    return {
                        getSource: function(This, callback) {
                            return v.handleFn.call(This, path, callback, This, master);
                        },
                        getPath: path
                    }
                }
            }
        };
        $plugins.prototype.register = function(option) {
            typeof option === "object" ?
                this.pluginStroage.push({
                    pluginName: option.name,
                    handlePath: option.pathHandle,
                    handleFn: option.sourceHandle
                }) : $log.warning('依赖插件配置错误！');

        };
        //插件接口
        var $packagesPlugins = exports.$packagesPlugins = new $plugins();


        /*当前包管理器的包对象存储器*/
        function PackageStroage() {
            //包信息存储容器（暂时用不上，一般用于查看初始化顺序）
            this.PackageMap = [];

            //包路径容器（值对应PackageMap的索引）
            this.PackageKeysMap = {};

            //包别名容器
            this.PackageAliasMap = {};

            //任务存储容器
            this.taskMap = [];
        };

        /*添加包到容器中*/
        PackageStroage.prototype.addPackage = function(PackageInfo) {
            this.PackageMap.push(PackageInfo);
            this.PackageKeysMap[PackageInfo.id] = PackageInfo;
        };

        /*添加别名*/
        PackageStroage.prototype.addAlias = function(PackageUrl, alias) {
            this.PackageAliasMap[alias] = PackageUrl;
        };

        /*获取依赖的包*/
        PackageStroage.prototype.getPackage = function(PackageUrl, url, packageInfo, master) {

            var packageResult,
                //路径解析（需新增配置解析）
                oldUrl = path.ConfigResolve(PackageUrl, url),
                //插件执行过滤
                result = $packagesPlugins.init(oldUrl, url, master);

            if (!result) {
                if (url) {
                    //此处检查请求的路径
                    PackageUrl = REGEXP.network.test(oldUrl) ? oldUrl : path.resolve(oldUrl, /^\//.test(PackageUrl) ? $pathRoot : path.resolve(url));
                } else {
                    PackageUrl = path.resolve(oldUrl)
                }
                PackageUrl = PackageUrl.replace(/\.js$/, '') + '.js';
            }
            //检查存储器中是否已存在
            packageResult = this.PackageKeysMap[oldUrl] || this.PackageKeysMap[PackageUrl] || (oldUrl = this.PackageAliasMap[oldUrl], this.PackageKeysMap[oldUrl]);

            //返回 包对象|包名称|插件回调方法
            return packageResult || (result ? (packageInfo ? result.getSource : result.getPath) : PackageUrl);
        };

        /*处理并获取依赖的包*/
        PackageStroage.prototype.getHandelPackage = function(PackageUrl, master) {
            //检查当前的master包是否在一对多的包中
            var masterUrl = master.many ? path.dirname(master.id).replace(/\/$/, '') : master.id;
            var Package = this.getPackage(PackageUrl, master.desType == 'Package' ? masterUrl : undefined, null, master);

            //初始化包
            Package = typeof Package === "string" ? new PackageStruct(Package, this, null, master) : Package;

            typeof Package === "function" ? Package(function(Package) {
                handel(Package);
            }) : handel(Package);

            function handel(Package) {
                //依赖的包地址
                master.depsKeys.push(Package.id);

                //待加载的包列表
                master.presMap.push(Package.id);

                //检查当前包的状态
                switch (Package.state) {

                    //加载失败
                    case 4:

                        //加载中
                    case 1:

                        //加载依赖中
                    case 3:

                        //添加被依赖的包与任务
                        Package.masterDepsMap.push({
                            desType: master.desType,
                            master: master
                        });

                        break;

                        //加载成功的状态
                    case 2:

                        //当前依赖加载通过
                        master.depPass();
                        break;

                }
            }
        };

        /*添加任务到容器中*/
        PackageStroage.prototype.addTask = function(taskInfo) {
            this.taskMap.push(taskInfo);
        };

        /*获取任务*/
        PackageStroage.prototype.getTask = function(taskId) {
            var tasks = this.taskMap,
                len = tasks.length,
                i = 0;
            while (len > i) {
                if (tasks[i].id == taskId) {
                    return tasks[i];
                }
                i++;
            }
            return undefined;
        };

        /*包结构*/
        function PackageStruct(PackageUrl, PackageStroage, local, master) {
            var packageResult;
            //检查此包是否存在
            if (typeof(packageResult = PackageStroage.getPackage(PackageUrl, master ? master.id : undefined, this, master)) === "object") return packageResult;
            if (typeof packageResult === "function") {
                var This = this;
                var callbackFn = function(This) {
                    return This;
                };
                packageResult(this, function(PackageUrl, source, deps, sourceType) {
                    //包ID
                    This.id = PackageUrl;
                    var thisPackageArg, sourceArray = [],
                        key, len, defineArg;
                    for (key in source) {
                        sourceArray.push(source[key]);
                    }

                    key = ~0;
                    len = sourceArray.length;
                    if (len === 1) {
                        thisPackageArg = handel.prototype.resolveDefineArg(sourceArray[0]);
                    } else {
                        while (++key < len) {
                            defineArg = handel.prototype.resolveDefineArg(sourceArray[key]);
                            defineArg.modelId = defineArg.alias || key.toString();
                            //生成真实独立的包
                            new PackageStruct(defineArg.modelId, PackageStroage, defineArg, This);
                        }
                        thisPackageArg = {
                            alias: "",
                            deps: [],
                            exports: null,
                            modelId: PackageUrl
                        }
                    }
                    This.__constructor__(PackageStroage, PackageUrl, thisPackageArg, sourceType);

                    callbackFn = callbackFn(This);
                });
                //返回包对象回调函数
                return function(fn) {
                    typeof callbackFn === "function" ? (callbackFn = fn) : fn(callbackFn);
                };
            }

            //处理真实资源路径（一般用在外部引入一文件内包含多个define）
            if (master && local) {
                var _alias = local.alias || '';
                //别名处理
                local.alias = _alias.charAt(0) == ':' ? _alias.slice(1) : '';
                //地址规范化
                PackageUrl = path.noSuffix(master.id) + '/' + PackageUrl.replace(/^:/, '') + fileSuffix;

                //检查master是否一对多
                master.many && (this.many = master);

            } else {
                //检查库中是否有此包
                if (!local && typeof(PackageUrl = PackageStroage.getPackage(PackageUrl)) !== "string") return;
            }

            //构造包结构
            this.__constructor__(PackageStroage, PackageUrl, local);

            return this;
        };

        /*依赖类型标记*/
        PackageStruct.prototype.desType = 'Package';

        PackageStruct.prototype.__constructor__ = function(PackageStroage, PackageUrl, local, fileType) {
            this.PackageStroage = PackageStroage;
            //包ID
            this.id = PackageUrl;

            //资源类型
            this.sourceType = fileType || 'js';

            //被依赖的容器
            this.masterDepsMap = [];

            //包依赖的包地址列表
            this.depsKeys = [];

            //依赖待加载的包列表
            this.presMap = [];

            //依赖待加载计数器
            this.presCount = 0;

            //包输出
            this.exports = null;

            //包状态( 加载中:1　-->　加载依赖:3 --> 加载完毕:2 -->加载失败:4 )
            this.state;

            //初始化
            this.init(PackageStroage, local);
        };

        /*包初始化*/
        PackageStruct.prototype.init = function(PackageStroage, local) {
            var self = this;

            //初始化状态是加载中
            this.state = 1;

            //记录到容器中
            PackageStroage.addPackage(this);

            //加载包资源
            local ? self.loadPass(local, PackageStroage) : getResources(this, PackageStroage).success(function(res) {
                self.loadPass(res, PackageStroage);
            }).error(function(res) {
                self.loadPass(res, PackageStroage);
            });
        };

        /*解析当前包需要的依赖*/
        PackageStruct.prototype.loadPass = function(res, PackageStroage) {
            var deps = res.deps;
            var alias = res.alias;
            this.exports = res.exports;

            alias && PackageStroage.addAlias(this.id, alias);

            //检查依赖
            if (deps && deps.length) {

                //更改当前包的状态为加载依赖包中
                this.state = 3;

                var i = 0,
                    len = deps.length,
                    path;

                //依赖计数器
                this.presCount = len;

                while (len > i) {
                    path = deps[i];
                    if (path == includeKeyword) {
                        //解析依赖的包
                        deps = analysisDeps(this.exports, includeKeyword, deps);

                        //添加代码中的依赖代码计数
                        this.presCount = deps.length - (len - this.presCount);

                        len = deps.length;
                    }
                    //处理并获取依赖的包
                    PackageStroage.getHandelPackage(path, this);
                    i++;
                }
            } else {
                this.exec();
            }
        };

        /*加载某个依赖包完成处理*/
        PackageStruct.prototype.depPass = function() {
            //被依赖计数器
            this.presCount--;
            this.presCount <= 0 && this.exec();
        };

        /*包依赖全部加载完毕后处理被依赖（任务及被包的依赖）*/
        PackageStruct.prototype.exec = function() {
            //更改当前包的状态为加载完毕
            this.state = 2;

            //检查对外提供的数据类型
            if (tools.isFunction(this.exports)) {
                this.exports = taskStruct.prototype.exec.call(this);
            }

            //处理父对象是一对多many
            if (this.many) {
                var master = this.many;
                if (!--master.many) {
                    master.state = 2;
                    var key, masterUrl = path.noSuffix(master.id);
                    for (key in master.exports) {
                        master.exports[key] = master.PackageStroage.getPackage(key, masterUrl + '/').exports;
                    }
                    DepsMapHandel(master);
                }
            } else {
                DepsMapHandel(this);
            }
        };

        /*任务结构*/
        function taskStruct(exports, deps, PackageStroage) {

            this.PackageStroage = PackageStroage;

            //生成任务ID
            this.id = makeId();

            //任务依赖的包地址列表
            this.depsKeys = [];

            //依赖待加载计数器
            this.presCount = 0;

            //任务待加载的包列表
            this.presMap = [];

            //任务执行体
            this.exports = exports;

            //任务初始化
            this.init(PackageStroage, deps);

            return this;
        };

        /*依赖类型标记*/
        taskStruct.prototype.desType = 'task';

        /*任务初始化*/
        taskStruct.prototype.init = function(PackageStroage, deps) {

            //记录到容器中
            PackageStroage.addTask(this);

            //检查依赖
            if (deps && deps.length > 0) {
                var i = 0,
                    len = deps.length,
                    path;

                //依赖计数器
                this.presCount = len;
                while (len > i) {
                    path = deps[i];
                    if (path == includeKeyword) {
                        //解析依赖的包
                        deps = analysisDeps(this.exports, includeKeyword, deps);

                        //添加代码中的依赖代码计数
                        this.presCount = deps.length - (len - this.presCount);

                        len = deps.length;
                    }
                    PackageStroage.getHandelPackage(path, this);
                    i++;
                }
            } else {
                this.exec();
            }
        };

        /*任务加载某个依赖包完成*/
        taskStruct.prototype.depPass = PackageStruct.prototype.depPass;

        /*任务执行*/
        taskStruct.prototype.exec = function() {
            var deps = [],
                depsKeys = this.depsKeys,
                len = depsKeys.length,
                i = 0;
            while (len > i) {
                deps.push(this.PackageStroage.getPackage(depsKeys[i]).exports);
                i++;
            }
            return this.exports.apply(this, deps);
        };

        /*处理器*/
        function handel() {
            //创建包存储器
            this.stroage = new PackageStroage();
            return this;
        };

        /*任务创建*/
        handel.prototype.initTask = function() {
            var arg = arguments,
                len = arg.length,
                v, f, i = 0,
                deps = [],
                exports = function() {};
            while (len > i) {
                v = arg[i];
                switch (tools.getType(v)) {
                    case 'string':
                        f || deps.push(v);
                        break;
                    case 'function':
                        exports = v;
                        break;
                    case 'array':
                        f || (deps = v, f = true);
                        break;
                }
                i++;
            }

            return new taskStruct(exports, deps, this.stroage);
        };

        /*对外开放的包结构*/
        handel.prototype.PackageStruct = PackageStruct;

        /*define参数解析*/
        handel.prototype.resolveDefineArg = function(arg) {
            var len = arg.length,
                len = len > 3 ? 3 : len,
                i = 0,
                v, exports, deps, modelId;

            while (len > i) {
                v = arg[i];
                switch (tools.getType(v)) {
                    case 'string':
                        modelId ? (exports = v) : (modelId = v);
                        break;
                    case 'array':
                        deps = v;
                        break;
                    case 'object':
                        exports = v;
                        break;
                    case 'function':
                        exports = v;
                        break;
                }
                i++;
            }

            switch (len) {
                case 1:
                    exports = exports || modelId || deps;
                    break;
                case 2:
                    if (modelId) {
                        deps && (exports = deps, deps = []);
                    }
                    break;
            }
            return {
                deps: deps || [],
                alias: modelId,
                exports: exports
            }
        };

        exports.$$PackagesInterface = handel;
    })(this);


    /**
     * Created by xiyuan on 16-2-26.
     */
    (function($packagesPlugins) {

        //支持zip文件读取
        $packagesPlugins.register({
            name: 'zip',
            pathHandle: function(PackageUrl, masterUrl, master) {
                //检查是否启用zip加载
                return /@zip\{[\w]+\}\//i.test(PackageUrl) && PackageUrl;
            },
            sourceHandle: function(path, callbackFn, packageObj, master) {
                var deps = [],
                    sourceType = 'zip',
                    fileSource = 'yes';

                $sourceManage.sourceGet($pathManage.zipPathParse(path), {
                    callbackName: 'define',
                    sourceType: 'define'
                }, function(source, sourceType) {
                    // path：资源路径  fileSource：文件资源 deps：资源依赖包 sourceType：资源类型（必须写）
                    callbackFn(path, source, deps, sourceType);
                });
            }
        });


    })(this.$packagesPlugins);


    /**
     * Created by xiyuan on 15-11-30.
     */

    /*基础包模块管理器定义*/
    ! function(exports, window) {
        var $$PackagesInterface = exports.$$PackagesInterface;

        /*创建包管理器*/
        var $$Packages = new $$PackagesInterface();

        /*包定义*/
        window.define = function() {
            var res = $$PackagesInterface.prototype.resolveDefineArg(arguments);
            //添加包到存储器中
            new $$PackagesInterface.prototype.PackageStruct(res.alias, $$Packages.stroage, {
                deps: res.deps,
                exports: res.exports,
                alias: null
            });
        };

        window.define.amd = 'amd';

        //包管理任务执行处理
        window.$packages = exports.$packages = function() {
            return [$$Packages.initTask.apply($$Packages, arguments), $$Packages];
        };
    }(this, window);

    var $packages = $FRAME.$packages = this.$packages;


    /**
     * Created by xiyuan on 15-11-30.
     */
    ! function(factory) {
        if (typeof define === "function" && define.amd) {

            define('type', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('type', [], function(require) {
                return factory();
            });

        } else {
            window.type = factory();
        }

    }(function() {

        var type = {};

        var getType = type.getType = function(value) {
            if (isElement(value)) return 'element';
            var type = typeof(value);
            if (type == 'object') {
                type = {}.toString.call(value).match(/object\s+(\w*)/)[1].toLocaleLowerCase()
            }
            return type;
        };

        var isType = type.isType = function(type) {
            return function(obj) {
                return {}.toString.call(obj) == "[object " + type + "]"
            }
        };

        var isObject = type.isObject = isType("Object");
        var isString = type.isString = isType("String");
        var isNumber = type.isNumber = isType("Number");
        var isArray = type.isArray = /*Array.isArray || */ isType("Array");
        var isFunction = type.isFunction = isType("Function");
        var isDate = type.isDate = isType("Date");
        var isBoolean = type.isBoolean = isType("Boolean");
        var isRegExp = type.isRegExp = isType("RegExp");
        var isFile = type.isFile = isType("File");
        var isFormData = type.isFormData = isType("FormData");
        var isBlob = type.isBlob = isType("Blob");
        var isWindow = type.isWindow = isType("Window");
        var isHTMLDocument = type.isHTMLDocument = isType("HTMLDocument");

        /*判断一个变量是否定义*/
        var isDefined = type.isDefined = function(value) {
            return typeof value !== 'undefined';
        }

        var isElement = type.isElement = function(node) {
            return !!(node && (node.nodeName || (node.prop && node.attr && node.find)));
        }

        /*判断对象是空值*/
        var isEmpty = type.isEmpty = function(obj) {
            switch (typeof obj) {
                case 'object':
                    for (var n in obj) {
                        return false
                    }
                    return true;
                    break;
                default:
                    if (!obj) {
                        return true
                    }
                    return false
            }
        };

        var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
        var isTypedArray = type.isTypedArray = function(value) {
            return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
        }

        //对比两个数据
        var equals = type.equals = function(o1, o2) {
            if (o1 === o2) return true;
            if (o1 === null || o2 === null) return false;
            if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
            var t1 = typeof o1,
                t2 = typeof o2,
                length, key, keySet;
            if (t1 == t2) {
                if (t1 == 'object') {
                    if (isArray(o1)) {
                        if (!isArray(o2)) return false;
                        if ((length = o1.length) == o2.length) {
                            for (key = 0; key < length; key++) {
                                if (!equals(o1[key], o2[key])) return false;
                            }
                            return true;
                        }
                    } else if (isDate(o1)) {
                        if (!isDate(o2)) return false;
                        return equals(o1.getTime(), o2.getTime());
                    } else if (isRegExp(o1)) {
                        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
                    } else {
                        if (isWindow(o1) || isWindow(o2) ||
                            isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
                        keySet = Object.create(null);
                        for (key in o1) {
                            if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
                            if (!equals(o1[key], o2[key])) return false;
                            keySet[key] = true;
                        }
                        for (key in o2) {
                            if (!(key in keySet) &&
                                key.charAt(0) !== '$' &&
                                isDefined(o2[key]) &&
                                !isFunction(o2[key])) return false;
                        }
                        return true;
                    }
                }
            }

            /*检查两个变量是否是function*/
            if (getType(o1) == getType(o2)) {
                switch (getType(o1)) {
                    case 'function':
                        if (o1.toString() !== o2.toString()) {
                            return false;
                        }
                        var keys = {},
                            key;
                        for (key in o1) {
                            keys[key] = key;
                        }
                        for (key in o2) {
                            keys[key] = key;
                        }
                        for (key in keys) {
                            if (o1.propertyIsEnumerable(key) && o2.propertyIsEnumerable(key)) {

                            } else {
                                return false;
                            }
                        }

                        keys = {};
                        for (key in o1.prototype) {
                            keys[key] = key;
                        }
                        for (key in o2.prototype) {
                            keys[key] = key;
                        }
                        for (key in keys) {
                            if (o1.prototype.propertyIsEnumerable(key) && o2.prototype.propertyIsEnumerable(key)) {

                            } else {
                                return false;
                            }
                        }
                        return true;

                        break;
                }
            }
            return false;
        };

        return type;
    });


    /**
     * Created by xiyuan on 15-11-4.
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('string', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('string', [], function(require) {
                return factory();
            });

        } else {
            window.string = factory();
        }
    })(function() {
        /*字符串处理（与PHP的 trim功能相同）*/
        String.prototype.ltrim = function(str) {
            if (typeof str == "undefined") {
                return this.replace(/^\s*/, '')
            }
            return this.substr(0, str.length) === str && (this.substr(str.length)) || this;
        };

        String.prototype.rtrim = function(str) {
            if (typeof str == "undefined") {
                return this.replace(/\s*$/, '')
            }
            return this.substr(-str.length) === str && (this.substr(0, this.length - str.length)) || this;
        };

        String.prototype.trim = function(str) {
            return this.ltrim(str).rtrim(str);
        };

        var string = {};

        //html编码
        string.HTMLEncode = function(str) {
            var s = "";
            if (str.length == 0) return "";
            s = str.replace(/&/g, "&amp;");
            s = s.replace(/</g, "&lt;");
            s = s.replace(/>/g, "&gt;");
            s = s.replace(/ /g, "&nbsp;");
            s = s.replace(/\'/g, "&#39;");
            s = s.replace(/\"/g, "&quot;");
            return s;
        };

        //解码html;
        string.HTMLDecode = function(str) {
            var s = "";
            if (str.length == 0) return "";
            s = str.replace(/&amp;/g, "&");
            s = s.replace(/&lt;/g, "<");
            s = s.replace(/&gt;/g, ">");
            s = s.replace(/&nbsp;/g, " ");
            s = s.replace(/&#39;/g, "\'");
            s = s.replace(/&quot;/g, "\"");
            return s;
        };

        //转换为小写
        string.manualLowercase = function(s) {
            /* jshint bitwise: false */
            return isString(s) ? s.replace(/[A-Z]/g, function(ch) {
                return String.fromCharCode(ch.charCodeAt(0) | 32);
            }) : s;
        };

        //转换为大写
        string.manualUppercase = function(s) {
            /* jshint bitwise: false */
            return isString(s) ? s.replace(/[a-z]/g, function(ch) {
                return String.fromCharCode(ch.charCodeAt(0) & ~32);
            }) : s;
        };

        //转换为小写
        string.lowercase = function(string) {
            return isString(string) ? string.toLowerCase() : string;
        };

        //转换为大写
        string.lowercase = function(string) {
            return isString(string) ? string.toUpperCase() : string;
        };

        //检测字符大小写转换
        if ('i' !== 'I'.toLowerCase()) {
            string.lowercase = string.manualLowercase;
            string.uppercase = string.manualUppercase;
        }

        //转换为正则字符
        string.escapeForRegexp = function(s) {
            return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
            replace(/\x08/g, '\\x08');
        };

        return string;
    });


    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('object', ['type'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('object', [], function(require) {
                return factory();
            });

        } else {
            window.object = factory();
        }
    })(function(type) {
        'use strict';

        /**
         * 数据属性设置
         * @param obj
         * @param key
         */
        function def(obj, key) {
            Object.defineProperty(obj, key, {
                writable: true,
                enumerable: false,
                configurable: true
            });
        }

        /*给数组原型对象添加in方法*/
        Array.prototype.in = function(v) {
            var i = 0,
                len = this.length;
            while (len > i) {
                if (this[i] == v) {
                    return i;
                }
                i++;
            }
            return -1;
        };

        //设置数组原型中的in不可遍历
        def(Array.prototype, 'in');

        //对象遍历
        Object.prototype.forEach = function(fn) {
            fn = typeof fn === 'function' ? fn : new Function;
            Object.keys(this).forEach(function(key) {
                fn(this[key], key);
            }.bind(this))
            fn = null;
        };

        //对象克隆
        Object.prototype.clone = function() {
            return object.clone(this);
        };

        //对象继承
        Object.prototype.extend = function() {
            var args = [].slice.call(arguments);
            args.unshift(this);
            return object.extends.apply(object, args);
        };

        //对象属性写入
        Object.prototype.setAttr = function() {
            var args = [].slice.call(arguments);
            args.unshift(this);
            return object.write.apply(object, args);
        };

        //对象属性读取
        Object.prototype.getAttr = function() {
            var args = [].slice.call(arguments);
            args.unshift(this);
            return object.get.apply(object, args);
        };

        //设置原型中的forEach clone 不可遍历
        def(Object.prototype, 'forEach');
        def(Object.prototype, 'clone');
        def(Object.prototype, 'extend');
        def(Object.prototype, 'setAttr');
        def(Object.prototype, 'getAttr');

        var object = {},
            //继承
            _extend = object.extend = function() {
                var i = ~0,
                    args = arguments,
                    argLen = args.length;
                if (argLen < 2) return args[0];

                while (++i < argLen) {
                    if (i == 0 || !arguments[i]) continue;
                    Object.keys(args[i]).forEach(function(j) {
                        args[0][j] = args[i][j];
                    });
                }
                return args[0];
            },
            //深度克隆
            _clone = object.clone = function(obj, recordKey) {
                var result = obj,
                    level,
                    _toString = {}.toString;

                if (!recordKey) {
                    recordKey = {};
                    level = 1;
                }

                // null, undefined, non-object, function
                if (!obj || typeof obj !== 'object') {
                    return obj;
                }

                // DOM Node
                if (obj.nodeType && 'cloneNode' in obj) {
                    return obj.cloneNode(true);
                }

                // Date
                if (_toString.call(obj) === '[object Date]') {
                    return new Date(obj.getTime());
                }

                // RegExp
                if (_toString.call(obj) === '[object RegExp]') {
                    var flags = [];
                    if (obj.global) {
                        flags.push('g');
                    }
                    if (obj.multiline) {
                        flags.push('m');
                    }
                    if (obj.ignoreCase) {
                        flags.push('i');
                    }

                    return new RegExp(obj.source, flags.join(''));
                }


                if (typeof obj === 'object' && obj !== null) {

                    result = obj instanceof Array ? [] : {};

                    var keys = Object.keys(obj);

                    keys.forEach(function(val) {

                        //为防止数据绑定中的特殊数据导致无限循环
                        if (recordKey[val] && recordKey[val].in(obj[val]) !== -1 && typeof obj[val] === 'object' && obj[val] !== null) {
                            return;
                        }

                        //记录值
                        (recordKey[val] = recordKey[val] || []).push(obj[val]);

                        result[val] = _clone(obj[val], recordKey);
                    });
                }

                //清除记录
                if (level) {
                    recordKey = null;
                }
                return result;
            },

            //深度继承
            _extends = object.extends = function() {
                if (arguments.length < 2) {
                    return false;
                }
                var i = ~0,
                    s = 0,
                    arg = arguments,
                    l = arg.length,
                    argi;
                while (++i < l) {
                    if (i == 0) {
                        continue;
                    }
                    s = 0, argi = arg[i];

                    for (var j in argi) {
                        //原型
                        if (!argi.hasOwnProperty(j)) {
                            continue;
                        };

                        var oldValue = arguments[0][j];
                        var newValue = argi[j];

                        if ((type.isArray(oldValue) || type.isObject(oldValue) /*|| type.isFunction(oldValue)*/ ) && (type.isArray(newValue) || type.isObject(newValue) /*|| type.isFunction(newValue)*/ )) {
                            _extends.call(this, arguments[0][j], argi[j]);
                        } else {
                            arguments[0][j] = argi[j];
                        }
                    }
                }
                return arguments[0];
            },

            //对象合并克隆
            _concat = object.concat = function() {
                var res = {},
                    args = [].slice.call(arguments);

                args.forEach(function(arg) {
                    Object.keys(arg).forEach(function(val) {
                        res[val] = _clone(arg[val]);
                    });
                });

                return res;
            },
            //配置合并
            _merge = object.merge = function(now, def) {
                for (var key in def) {
                    typeof now[key] === "undefined" && (now[key] = def[key])
                }
                return now;
            },

            //arguments参数转为数组
            _argToArray = object.argToArray = function(arg) {
                var len = arg.length,
                    i = 0,
                    _arg = [];
                while (len > i) {
                    _arg.push(arg[i]);
                    i++;
                }
                return _arg;
            },

            /**
             * 检查属性是否原型属性
             * @param obj
             * @param key
             * @returns {boolean}
             */
            _hasPrototypeProperty = object.hasPrototypeProperty = function d(obj, key) {
                return !obj.hasOwnProperty(key) && key in obj;
            },
            /*数据配置解析*/
            _parseStringData = object.parseStringData = function(keyString, data) {
                if (arguments.length < 2) {
                    return arguments[0];
                }
                keyString = keyString.match(/^[\w+\.]+$/g);
                if (keyString) {
                    keyString = keyString[0].replace(/\[([\S]+)\]/g, function(reg, $1) {
                        return '.' + $1;
                    });
                    var attrs = keyString.split('.'),
                        i = ~0,
                        l = attrs.length;
                    while (++i < l) {
                        data = data[attrs[i]];
                        if (typeof data === "undefined") {
                            console.log(attrs[i] + '属性不存在！');
                            return null;
                        }
                    }
                    return data;
                } else {
                    console.log('取值方法有误！');
                    return false;
                }
            };

        /*数据配置设置*/
        object.setStringData = function(keyString, data, values) {
            if (arguments.length < 2) {
                return arguments[0];
            }

            keyString = keyString.match(/^[\w+\.]+$/g);
            if (keyString) {
                keyString = keyString[0].replace(/\[([\S]+)\]/g, function(reg, $1) {
                    return '.' + $1;
                });

                var attrs = keyString.split('.'),
                    i = ~0,
                    l = attrs.length;
                while (++i < l) {
                    if (i + 1 === l) {
                        data[attrs[i]] = values;
                        return values;
                    }
                    data = data[attrs[i]];
                    if (typeof data === "undefined") {
                        console.log(attrs[i] + '属性不存在！');
                        return null;
                    }
                }

            } else {
                console.log('取值方法有误！');
                return false;
            }
        };

        /**
         * model数据写入
         * @param obj
         * @param key
         * @param data
         */
        object.write = function write(obj, key, data) {

            (function getLevel(model, modelKey, writeKey) {

                if (!writeKey) {
                    if (!modelKey) {
                        return data;
                    }
                    model[modelKey] = data;
                    return true;
                }

                var property;
                //提取key字符中对象所属的第一个属性
                writeKey = writeKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                    //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                    property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                    return '';
                });
                //检查对象
                if (typeof model[modelKey] !== 'object' || model[modelKey] === null) {
                    modelKey && (model[modelKey] = {});
                }
                getLevel(modelKey ? model[modelKey] : model, property, writeKey);
            })(obj, '', key)

            return obj;
        };

        /**
         * 数据获取
         * @param obj
         * @param key
         */
        object.get = function get(obj, key) {

            return function getLevel(model, writeKey) {
                if (!writeKey) {
                    return model;
                }

                var property;
                //提取key字符中对象所属的第一个属性
                writeKey = writeKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                    //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                    property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                    return '';
                });

                //检查对象
                if (!model) {
                    model = {};
                }

                return getLevel(model[property], writeKey);
            }(obj, key);

        };

        /*function clone(obj,recordKey) {
            var result=obj,
                level,
                _toString = {}.toString;

            if(!recordKey){
                recordKey={};
                level=1;
            }

            // null, undefined, non-object, function
            if (!obj || typeof obj !== 'object') {
                return obj;
            }

            // DOM Node
            if (obj.nodeType && 'cloneNode' in obj) {
                return obj.cloneNode(true);
            }

            // Date
            if (_toString.call(obj) === '[object Date]') {
                return new Date(obj.getTime());
            }

            // RegExp
            if (_toString.call(obj) === '[object RegExp]') {
                var flags = [];
                if (obj.global) {
                    flags.push('g');
                }
                if (obj.multiline) {
                    flags.push('m');
                }
                if (obj.ignoreCase) {
                    flags.push('i');
                }

                return new RegExp(obj.source, flags.join(''));
            }
            if (typeof obj === 'object' && obj !== null) {

                result = obj instanceof Array ?[]: {};

                Object.keys(obj).forEach(function(val){

                    //为防止数据绑定中的特殊数据导致无限循环
                    if(recordKey[val] && recordKey[val].indexOf(obj[val]) !== -1 && typeof obj[val] === 'object' && obj[val] !== null){
                        return ;
                    }

                    //记录值
                    (recordKey[val]=recordKey[val]||[]).push(obj[val]);

                    result[val]=clone(obj[val],recordKey);
                });
            }

            //清除记录
            if(level){
                recordKey=null;
            }
            return result;
        }*/
        return object;
    });


    /**
     * Created by xiyuan on 15-11-4.
     */
    ! function(factory) {

        if (typeof define === "function" && define.amd) {

            define('url', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('url', [], function(require) {
                return factory();
            });

        } else {
            window.url = factory();
        }

    }(function() {

        var url = {};
        /* url编码 */
        var encode = window ? window.encodeURIComponent : encodeURIComponent;

        /*获取变量的类型*/
        var getType = function(value) {
            var type = typeof(value);
            if (type == 'object') {
                type = Object.prototype.toString.call(value).match(/Object\s+([a-z0-9_]*)/i)[1].toLocaleLowerCase()
            }
            return type;
        };

        /* 获取url的hash */
        url.hash = function(url) {
            if (typeof arguments[0] === "string") window.location.hash = encodeURI(arguments[0]);
            return window.location.hash.replace(/^#/, '');
        };

        /* 获取url地址 */
        url.url = url.href = function() {
            if (typeof arguments[0] === "string") window.location.href = arguments[0];
            return window.location.href;
        };

        /* 设置或返回主机名和当前 URL 的端口号 */
        url.host = function() {
            if (typeof arguments[0] === "string") window.location.host = arguments[0];
            return window.location.host;
        };

        /* 设置或返回当前 URL 的主机名 */
        url.hostName = function() {
            if (typeof arguments[0] === "string") window.location.hostname = arguments[0];
            return window.location.hostname;
        };

        /* 设置或返回当前 URL 的端口号 */
        url.port = function() {
            if (typeof arguments[0] === "string") window.location.port = arguments[0];
            return window.location.port;
        };

        /* 设置或返回当前 URL 的协议 */
        url.protocol = function(url) {
            var protocol;
            if (typeof url === "string") {
                protocol = url.match(/(\w+\:)\/\//);
            }
            return protocol ? protocol[1] : window.location.protocol;
        };

        /* 合并数据到url参数中 */
        url.computedUrl = function(_url, data) {
            var hashIndex = _url.indexOf('#'),
                normal, hash, dataUrl = url.objectToUrl(data);
            if (hashIndex < 0) {
                normal = _url;
                hash = '';
            } else {
                normal = _url.slice(0, hashIndex);
                hash = _url.slice(hashIndex);
            }

            normal += dataUrl ? (normal.indexOf('?') < 0 ? '?' : '&') : '';

            return normal + dataUrl; //+ hash;
        };

        /* 把对象转换成url参数 */
        url.objectToUrl = function(obj) {
            var key, value, str = '';
            var data = [];
            switch (getType(obj)) {
                case 'object':
                    for (key in obj) {
                        value = obj[key];
                        if (typeof value === 'object') {
                            for (var i in value) {
                                str += '&' + encode(key) + '=' + encode(value[i]);
                            }
                        } else {
                            str += '&' + encode(key) + '=' + encode(value);
                        }
                    }
                    return str.replace(/^&/, '');
                    break;
                case 'array':
                    for (key in obj) {
                        value = obj[key];
                        data.push(encode(key) + '=' + encode(value));
                    }
                    return data.join('&');
                    break;
            }
            return obj;
        };

        /* 转换URL参数为object */
        url.urlToObject = function(str, toggle) {
            var _str = str,
                result = {},
                index = str.indexOf('?') + 1,
                hashIndex = str.indexOf('#');

            if (index) {

                //检查hash是否存在,并且检查sercha是否在hash前面
                if (hashIndex > index) {
                    str = str.substring(index, hashIndex);

                    //判断是否开启合并hash中的参数
                    if (toggle) {
                        _str = _str.substring(hashIndex);
                        index = _str.indexOf('?') + 1;
                        index && (str = str + '&' + _str.substring(index))
                    }

                    //检查hash是否存在
                } else if (toggle && hashIndex < index || hashIndex === -1) {

                    str = str.substring(index);
                }

                var arr = str.split("&"),

                    key = ~0,
                    l = arr.length;
                while (++key < l) {
                    var value = arr[key].split('=');
                    //修复多个重名表单name值
                    var nameKey = decodeURIComponent(value[0]);
                    var nameValue = decodeURIComponent(value[1]);
                    var nameValues = result[nameKey];
                    switch (typeof nameValues) {
                        case 'object':
                            result[nameKey].push(nameValue);
                            break;
                        case 'string':
                            result[nameKey] = [nameValues, nameValue];
                            break;
                        default:
                            result[nameKey] = nameValue;
                    }
                }


            }
            return result;
        };

        return url;
    });


    /**
     * Created by xiyuan on 15-11-4.
     */
    (function(factory) {

        if (typeof define === "function" && define.amd) {

            define('path', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('path', [], function(require) {
                return factory();
            });

        } else {
            window.path = factory();
        }

    })(function() {

        var path = {};

        var DIRNAME_RE = /[^?#]*\//;

        var DOT_RE = /\/\.\//g;
        var DOUBLE_DOT_RE = /\/[^/]+\/\.\.\//
        var MULTI_SLASH_RE = /([^:/])\/+\//g
        var scripts = document.scripts
        var loaderScript = document.getElementById("frameDir") || scripts[scripts.length - 1]
        var getScriptAbsoluteSrc = function(node) {
            return node.hasAttribute ? node.src : node.getAttribute("src", 4)
        };

        /*获取文件路径*/
        var dirname = path.dirname = function(path) {
            return path.match(DIRNAME_RE)[0]
        };

        /*当前项目入口地址*/
        var cwd = path.cwd = (!location.href || location.href.indexOf('about:') === 0) ? '' : dirname(location.href);

        /*当前框架地址*/
        path.frameDir = path.frameRoot = function() {
            var frameRootElement = document.querySelectorAll('[frameRoot]');
            if (frameRootElement.length == 1) {
                frameRootElement = document.querySelectorAll('[frameroot]')[0];
            } else {
                frameRootElement = document.scripts[scripts.length - 1];
            }
            return dirname(getScriptAbsoluteSrc(frameRootElement) || cwd);
        }();

        /*规范化路径*/
        var normalize = path.normalize = function(path) {
            // /a/b/./c/./d ==> /a/b/c/d
            path = path.replace(DOT_RE, "/")

            /*
             a//b/c ==> a/b/c
             a///b/////c ==> a/b/c
             */
            path = path.replace(MULTI_SLASH_RE, "$1/");

            // a/b/c/../../d  ==>  a/b/../d  ==>  a/d
            while (path.match(DOUBLE_DOT_RE)) {
                path = path.replace(DOUBLE_DOT_RE, "/")
            }

            return path
        };

        /*绝对路径*/
        path.resolve = function(path, url) {
            var dir = /^(http|https|file):\/\//i.test(path) ? path : dirname(url || window.location.href) + (path || '');
            return normalize(dir);
        };

        /*获取路径中的文件名*/
        path.fileName = function(path) {
            var res = path.match(/^[\S]+\/([^\s\/]+)$/)
            return res ? res[1] : '';
        };

        /*获取路径中的文件*/
        path.file = function(path) {
            var res = path.match(/^[\S]+\/([^\s\.\/]+)[^\s\/]*$/);
            return res ? res[1] : '';
        };

        /*获取路径中的文件后缀*/
        path.suffix = function(path) {
            var res = path.match(/\.[^\.\/]*$/);
            return res ? res[0] : '';
        };

        /*获取去除后缀路径*/
        path.noSuffix = function(path) {
            var res = path.match(/[^?#]*\/[^\.\/]*/);
            return res ? res[0] : '';
        };

        return path;
    });


    (function(factory) {

        if (typeof define === "function" && define.amd) {

            define('json', ['object'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('json', ['object'], function(require) {
                return factory(require('object'));
            });

        } else {
            window.json = factory();
        }

    })(function($object) {

        //篡改系统JSON转字符串
        var jsonStringify = JSON.stringify;
        JSON.stringify = function(obj) {
            return jsonStringify($object.clone(obj))
        };

        var json = {};

        //把对象转换成json字符串
        json.toString = function(obj) {
            var TmpArray = [];
            for (var i in obj) {
                obj[i] = typeof obj[i] == 'string' ? '"' + (obj[i].replace(/"/g, '\\"')) + '"' : (typeof obj[i] == 'object' ? arguments.callee(obj[i]) : obj[i]);
                TmpArray.push(i + ':' + obj[i]);
            }
            return '{' + TmpArray.join(',') + '}';
        };

        //把字符串解析成对象
        json.toObject = function(str) {
            if (typeof(str) == 'object') {
                return str;
            } else {
                try {
                    var json = new Function("return " + str)();
                } catch (e) {
                    return str;
                }
                return json;
            }
        };

        return json;

    });


    /**
     * Created by xiyuan on 15-11-4.
     */
    (function(factory) {

        if (typeof define === "function" && define.amd) {

            define('jsonp', ['object', 'url'], function(object, url) {
                return factory(object, url)
            });

        } else if (typeof define === "function" && define.cmd) {

            define('jsonp', [], function(require) {
                return factory();
            });

        } else {
            window.jsonp = factory();
        }
    }(function(object, url) {

        //空方法
        var noop = function() {},
            //存储jsonp处理中的数据
            recordJsonpStroage = {},
            //标识是否是多回调
            many = false,
            //jsonp数据缓存对象 (哪个请求先回调也就哪个请求先加载完毕 ,也就是哪个先写入缓存哪个就先得到缓存)
            jsonpStorage = null;

        var headElement = window.document.getElementsByTagName('head')[0] || window.document.documentElement;

        var cssElement = window.document.createElement('link');
        cssElement.rel = 'stylesheet';
        cssElement.type = "text/css";

        var jsElement = window.document.createElement('script');
        jsElement.type = "text/javascript";
        //延迟执行
        // jsElement.defer = 'defer';
        //异步执行
        jsElement.async = 'async';
        jsElement.charset = "utf-8";

        /* js脚本获取 */
        function getJs(option) {
            var callback = option.jsonpCallback,
                done = false,
                js = jsElement.cloneNode(),
                complete = function() {
                    --recordJsonpStroage[callback].sum;
                    //方法调用完毕后还原备份方法
                    if (recordJsonpStroage[callback].sum < 1) {
                        typeof recordJsonpStroage[callback].windowCallback === "undefined" ? delete window[callback] : (window[callback] = recordJsonpStroage[callback].windowCallback);
                        delete recordJsonpStroage[callback];
                    }
                    option.element || headElement.removeChild(js);
                    var object = {
                        dom: this,
                        option: option,
                        many: many
                    };
                    object.state = jsonpStorage ? true : false;
                    option.complete.apply(object, jsonpStorage);
                };

            js.src = option.url;

            //作为之前已存在的方法作为一个备份
            if (recordJsonpStroage[callback]) {
                ++recordJsonpStroage[callback].sum;
            } else {
                recordJsonpStroage[callback] = {
                    windowCallback: window[callback],
                    sum: 1
                };
            }

            //文件加载完毕后调用jsonpCallback方法
            window[callback] = function() {
                //用来处理一个请求里有多个回调
                if (jsonpStorage) {
                    !many && (jsonpStorage = [jsonpStorage], many = true)
                    jsonpStorage.push(arguments)
                } else {
                    jsonpStorage = arguments;
                }
            };

            //初始化回调(用于包处理 define.amd 赋值)
            option.init.call(js, window[callback]);

            //js获取成功后处理
            js.onload = js.onreadystatechange = function() {
                if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
                    complete();
                    done = true;
                    this.onload = this.onreadystatechange = null;
                    option.success.apply({
                        dom: this,
                        option: option,
                        many: many
                    }, jsonpStorage);
                    //清空jsonp数据容器
                    jsonpStorage = null;
                    many = false;
                }
            };

            //js获取失败后处理
            js.onerror = function() {
                complete();
                option.error.apply({
                    dom: this,
                    option: option
                });
            };

            //想文档中添加js节点，使其开始加载文件
            headElement.appendChild(js);
        };

        function jsonp(option) {

            //参数规范化处理
            object.merge(option, jsonp.defaulteOption);

            //url处理(参数、url)
            option.url = url.computedUrl(option.url, option.data);

            //处理请求的类型
            switch (option.type) {
                case 'js':
                    var callbackUrlData = {};
                    option.jsonpParameter && (callbackUrlData[option.callbackName] = option.jsonpCallback, option.url = url.computedUrl(option.url, callbackUrlData));
                    getJs(option);
                    break;
                case 'css':

                    break
            }

        };

        //默认的jsonp配置
        jsonp.defaulteOption = {
            data: {}, //需要传递的参数
            url: '', //请求的url
            type: 'js', //请求的类型　「js | css」
            init: noop, //初始化回调
            error: noop, //错误回调
            success: noop, //成功回调
            complete: noop, //不管成功还是失败都回调
            callbackName: 'callback', //jsonp发送的参数名称
            jsonpCallback: 'callback', //jsonp回调成功执行的方法名
            element: true, //是否保留创建的javascript或link标签
            jsonpParameter: true //是否保留url中的jsonp参数
        };

        return jsonp;

    }));


    /**
     * Created by xiyuan on 16-1-28.
     */
    define('socket', ['json', 'type', 'url'], function(json, type, url) {

        //连接状态储存
        var wsStroageState = {};

        function WS(url) {
            this.url = url;
            this.init();
        }

        WS.prototype = {
            init: function() {
                if (wsStroageState[this.url]) {
                    return;
                }

                this.isOpen = false;
                this.__onopens__ = [];
                this.__onoerrors__ = [];
                this.__oncloses__ = [];
                this.__onmessages__ = [];
                this.__sendData__ = [];

                wsStroageState[this.url] = this;
            },
            request: function() {
                wsStroageState[this.url] = this;

                var __onopens__ = this.__onopens__,
                    __onoerrors__ = this.__onoerrors__,
                    __oncloses__ = this.__oncloses__,
                    __onmessages__ = this.__onmessages__,
                    link = this.link = new WebSocket(this.url);

                //监听连接成功事件
                link.addEventListener('open', function() {
                    this.isOpen = true;
                    var i = ~0,
                        l = __onopens__.length;
                    while (++i < l) {
                        __onopens__[i].apply(this, arguments);
                    }

                    //发送数据
                    this.__sendData__.forEach(function(data) {
                        this.send(data);
                    }.bind(this))
                }.bind(this));

                //监听连接失败事件
                link.addEventListener('error', function() {
                    delete wsStroageState[this.url];
                    var i = ~0,
                        l = __onoerrors__.length;
                    while (++i < l) {
                        __onoerrors__[i].apply(this, arguments);
                    }
                }.bind(this));

                //监听连接关闭事件
                link.addEventListener('close', function() {
                    delete wsStroageState[this.url];
                    var i = ~0,
                        l = __oncloses__.length;
                    while (++i < l) {
                        __oncloses__[i].apply(this, arguments);
                    }
                }.bind(this));


                link.addEventListener('message', function() {
                    var i = ~0,
                        l = __onmessages__.length;
                    while (++i < l) {
                        __onmessages__[i].apply(this, arguments);
                    }
                }.bind(this));


            },
            open: function(fn) {
                typeof fn === "function" && this.__onopens__.push(fn);
                return this;
            },
            error: function(fn) {
                typeof fn === "function" && this.__onoerrors__.push(fn);
                return this;
            },
            close: function(fn) {
                typeof fn === "function" && this.__oncloses__.push(fn);
                return this;
            },
            message: function(fn) {
                typeof fn === "function" && this.__onmessages__.push(fn);
                return this;
            },
            send: function(data) {
                if (wsStroageState[this.url]) {
                    //检查链接是否打开
                    if (this.link.readyState) {
                        this.link.send(data);
                    } else {
                        this.__sendData__.push(data)
                    }
                } else {
                    console.warn('socket连接已关闭!');
                }
                return this;
            },
            destroy: function() {
                if (wsStroageState[this.url] && this.link.readyState) {
                    this.link.close();
                }
                return this;
            }
        };

        return function(option) {
            var ws,
                url = option.url,
                protocol = location.protocol === "https:" ? 'wss' : 'ws';

            if (url) {

                url = protocol + '://' + url.replace(/^\S+:\/\//, '');
            } else {
                console.warn('socket 连接地址未填！')
            }

            url = url + (option.sendData || option.data ? ('?' + url.objectToUrl(option.sendData || option.data)) : '');

            if (!(ws = wsStroageState[url])) {
                ws = new WS(url);
            }
            return ws;
        }
    });



    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('net', ['json', 'type', 'url', 'jsonp', 'socket'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('net', [], function(require) {
                return factory();
            });

        } else {
            window.net = factory();
        }
    })(function(json, type, url, jsonp, socket) {
        var net = {
                jsonp: jsonp,
                socket: socket
            },
            $url = url;

        /*工具*/
        var tools = {
            toObject: json.toObject,
            getType: type.getType,
            objectToUrl: url.objectToUrl
        };
        /**
         * Created by xiyuan on 16-12-5.
         */

        /*以下是ajax的方法*/
        net.ajax = function(option) {
            option.async = typeof option.async === "undefined" ? true : option.async ? true : false;
            option.data = option.data ? tools.objectToUrl(option.data) : '';
            option.type = (new RegExp(option.type, 'ig').exec('GET,DELETE,POST,PUT,HEAD').toString() || 'GET');

            var xhr = {
                responseType: 'text'
            };

            //检查请求协议
            if ($url.protocol(option.url) === 'file:') {

                //预设
                typeof option.preset === "function" && option.preset(xhr);

                //检查是否cordova环境
                if (window.cordova && cordova.file) {

                    window.resolveLocalFileSystemURL(cordova.file.applicationDirectory, function(f) {}, function() {});

                    //本地文件系统
                    window.resolveLocalFileSystemURL(option.url, function(fileEntry) {

                        //文件资源开启
                        fileEntry.file(function(file) {
                            var reader = new FileReader();
                            xhr.status = 200;

                            //文件资源监听
                            reader.onloadend = function(e) {
                                typeof option.success === "function" && option.success.call(xhr, this.result);
                                typeof option.complete === 'function' && option.complete.call(xhr, this.result);
                            };

                            //资源读取 ArrayBuffer / text
                            xhr.responseType === "arraybuffer" ? reader.readAsArrayBuffer(file) : reader.readAsText(file);
                        });

                    }, function() {

                        xhr.status = 500;
                        typeof option.error === "function" && option.error.call(xhr, null);
                        typeof option.complete === 'function' && option.complete.call(xhr, null);
                    });

                    return;
                }
            }

            //检查是否cordova环境
            xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function() {
                toObject = tools.toObject;
                if (typeof option.beforeSend === 'function') {
                    option.beforeSend();
                }
                if (xhr.readyState === 4) {
                    var res;
                    if (xhr.status === 200) {
                        switch (option.dataType || 'json') {
                            case 'html':
                                res = xhr.responseText;
                                break;
                            case 'xml':
                                res = xhr.responseXML;
                                break;
                            case 'json':
                                res = toObject(xhr.responseText);
                                break;
                            default:
                                res = xhr.response || xhr.responseText;
                        }

                        typeof option.success === 'function' && option.success.call(xhr, res);

                    } else {
                        if (typeof option.error === 'function') {
                            option.error.call(xhr, xhr);
                        }
                    }

                    typeof option.complete === 'function' && option.complete.call(xhr, res || xhr, typeof res !== "undefined");
                }

            };

            switch (option.type) {
                case 'POST':

                    break;
                case 'GET':

                    option.url = option.url + (option.data && (option.url.indexOf('?') === -1 ? '?' : '&') + option.data);
                    break;
                case 'DELETE':

                    break;
                case 'PUT':

                    break;
                case 'HEAD':

                    break;
            }

            xhr.open(option.type, option.url, option.async);

            //上传进度后回调
            var uploadprogress = option.uploadprogress || option.uploadProgress;
            typeof uploadprogress === "function" && (xhr.upload.onprogress = uploadprogress);

            //资源返回进度回调
            typeof option.progress === "function" && (xhr.onprogress = option.progress);

            switch (option.type) {
                case 'POST':
                    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded;charset=utf-8');
                    break;
                case 'GET':
                    //判断请求是否需要设置content-type(主要处理zip压缩)
                    //(typeof option.preset === "function" && option.preset.type) || xhr.setRequestHeader('Content-type','application/text/html;charset=utf-8');
                    break;
                case 'DELETE':

                    break;
                case 'PUT':

                    break;
                case 'HEAD':

                    break;
            }

            typeof option.preset === "function" && option.preset(xhr);

            xhr.send(option.data);
        };

        /**
         * Created by xiyuan on 16-12-5.
         */
        /*get方法*/
        net.get = function(url, data, callback) {
            net.ajax({
                url: url,
                data: data || {},
                complete: callback || function() {

                }
            })
        };
        return net;
    });


    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('date', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('date', [], function(require) {
                return factory();
            });

        } else {
            window.date = factory();
        }
    })(function() {

        function getType(value) {
            var type = typeof(value);
            if (type == 'object') {
                type = Object.prototype.toString.call(value).match(/Object\s+([a-z0-9_]*)/i)[1].toLocaleLowerCase()
            }
            return type;
        }

        var date = {},

            //获取当前时间戳
            nowTimestamp = date.nowTimestamp = function() {
                return new Date().getTime();
            },

            /*时间转换*/
            convert = date.convert = function() {
                var date = arguments[0];

                if ((date = Number(date) ? Number(date) : date) || typeof date === 'string') {
                    date = new Date(date);
                    date = date.toString().indexOf('Invalid') >= 0 ? new Date() : date;
                } else if ({}.toString.call(date) === '[object Date]') {} else {
                    date = new Date();
                }

                if (typeof arguments[1] === "string") {
                    date = getJavaTime(date, arguments[1])
                }
                return date;
            },

            //获取年份
            getYear = date.getYear = date.getFullYear = function(data) {
                return convert(data).getFullYear();
            },

            //获取月份
            getMonth = date.getMonth = function(data) {
                return convert(data).getMonth() + 1
            },

            //获取日
            getDate = date.getDate = function(data) {
                return convert(data).getDate();
            },

            //获取时
            getHours = date.getHours = function(data) {
                return convert(data).getHours();
            },

            //获取分
            getMinutes = date.getMinutes = function(data) {
                return convert(data).getMinutes();
            },

            //获取秒
            getSeconds = date.getSeconds = function(data) {
                return convert(data).getSeconds();
            },

            /*java时间戳转换*/
            getJavaTime = date.getJavaTime = function(data, layout) {
                var time = convert(data);
                var year = time.getFullYear()
                var month = time.getMonth() + 1
                var date = time.getDate()
                var hours = time.getHours()
                var minutes = time.getMinutes() >= 10 ? time.getMinutes() : time.getMinutes();
                var seconds = time.getSeconds()
                if (typeof(layout) !== "string") {
                    layout = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + seconds;
                } else {
                    layout = layout.replace(/yy/i, year)
                    layout = layout.replace(/y/i, String(year).slice(-2))
                    layout = layout.replace(/mm/i, month > 9 ? month : '0' + month)
                    layout = layout.replace(/m/i, month)
                    layout = layout.replace(/dd/i, date > 9 ? date : '0' + date)
                    layout = layout.replace(/d/i, date)
                    layout = layout.replace(/hh/i, hours > 9 ? hours : '0' + hours)
                    layout = layout.replace(/h/i, hours)
                    layout = layout.replace(/ii/i, minutes > 9 ? minutes : '0' + minutes)
                    layout = layout.replace(/i/i, minutes)
                    layout = layout.replace(/ss/i, seconds > 9 ? seconds : '0' + seconds)
                    layout = layout.replace(/s/i, seconds)
                }
                return layout;
            },

            /*PHP时间戳转换*/
            getPhpTime = date.getPhpTime = function(nS, layout) {
                return date.getJavaTime(nS * 1000, layout);
            },

            /*添加秒*/
            addDateMinutes = date.addDateMinutes = function(date, minutes) {
                date = convert(date);
                date = new Date(date.getTime());
                date.setMinutes(date.getMinutes() + minutes);
                return date;
            };

        /*获取当前月份有多少天*/
        date.getMonthCountDate = function(date) {
            date = date ? (getType(date) === 'date' ? date : new Date(Number(date))) : new Date();
            date.setMonth(date.getMonth() + 1);
            date.setDate(0);
            return date.getDate();
        };

        /*获取第几周*/
        date.getNowWeek = function(nowDate) {
            nowDate = convert(nowDate);
            var startDate = new Date(nowDate.getTime());
            startDate.setMonth(0);
            startDate.setDate(1);
            startDate.setHours(0, 0, 0, 0);

            var countDay = (nowDate.getTime() - startDate.getTime()) / 1000 / 60 / 60 / 24 + 1,
                tmpDay = countDay - (8 - startDate.getDay());

            return (tmpDay > 0 ? Math.ceil(tmpDay / 7) : 0) + 1;
        };

        return date;
    });


    ! function(e, t) {
        if ("object" == typeof exports && "object" == typeof module) module.exports = t();
        else if ("function" == typeof define && define.amd) define('IC', [], t);
        else {
            var n = t();
            for (var r in n)("object" == typeof exports ? exports : e)[r] = n[r]
        }
    }(this, function() {
        return function(e) {
            function t(r) {
                if (n[r]) return n[r].exports;
                var i = n[r] = {
                    exports: {},
                    id: r,
                    loaded: !1
                };
                return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports
            }

            var n = {};
            return t.m = e, t.c = n, t.p = "", t(0)
        }([function(e, t, n) {
            n(6), n(7), e.exports = n(8)
        }, function(e, t, n) {
            (function(t) {
                ! function(n) {
                    function r(e, t) {
                        return function() {
                            e.apply(t, arguments)
                        }
                    }

                    function i(e) {
                        if ("object" != typeof this) throw new TypeError("Promises must be constructed via new");
                        if ("function" != typeof e) throw new TypeError("not a function");
                        this._state = null, this._value = null, this._deferreds = [], l(e, r(a, this), r(s, this))
                    }

                    function o(e) {
                        var t = this;
                        return null === this._state ? void this._deferreds.push(e) : void f(function() {
                            var n = t._state ? e.onFulfilled : e.onRejected;
                            if (null === n) return void(t._state ? e.resolve : e.reject)(t._value);
                            var r;
                            try {
                                r = n(t._value)
                            } catch (i) {
                                return void e.reject(i)
                            }
                            e.resolve(r)
                        })
                    }

                    function a(e) {
                        try {
                            if (e === this) throw new TypeError("A promise cannot be resolved with itself.");
                            if (e && ("object" == typeof e || "function" == typeof e)) {
                                var t = e.then;
                                if ("function" == typeof t) return void l(r(t, e), r(a, this), r(s, this))
                            }
                            this._state = !0, this._value = e, u.call(this)
                        } catch (n) {
                            s.call(this, n)
                        }
                    }

                    function s(e) {
                        this._state = !1, this._value = e, u.call(this)
                    }

                    function u() {
                        for (var e = 0, t = this._deferreds.length; t > e; e++) o.call(this, this._deferreds[e]);
                        this._deferreds = null
                    }

                    function c(e, t, n, r) {
                        this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.resolve = n, this.reject = r
                    }

                    function l(e, t, n) {
                        var r = !1;
                        try {
                            e(function(e) {
                                r || (r = !0, t(e))
                            }, function(e) {
                                r || (r = !0, n(e))
                            })
                        } catch (i) {
                            if (r) return;
                            r = !0, n(i)
                        }
                    }

                    var f = "function" == typeof t && t || function(e) {
                            setTimeout(e, 1)
                        },
                        d = Array.isArray || function(e) {
                            return "[object Array]" === Object.prototype.toString.call(e)
                        };
                    i.prototype["catch"] = function(e) {
                        return this.then(null, e)
                    }, i.prototype.then = function(e, t) {
                        var n = this;
                        return new i(function(r, i) {
                            o.call(n, new c(e, t, r, i))
                        })
                    }, i.all = function() {
                        var e = Array.prototype.slice.call(1 === arguments.length && d(arguments[0]) ? arguments[0] : arguments);
                        return new i(function(t, n) {
                            function r(o, a) {
                                try {
                                    if (a && ("object" == typeof a || "function" == typeof a)) {
                                        var s = a.then;
                                        if ("function" == typeof s) return void s.call(a, function(e) {
                                            r(o, e)
                                        }, n)
                                    }
                                    e[o] = a, 0 === --i && t(e)
                                } catch (u) {
                                    n(u)
                                }
                            }

                            if (0 === e.length) return t([]);
                            for (var i = e.length, o = 0; o < e.length; o++) r(o, e[o])
                        })
                    }, i.resolve = function(e) {
                        return e && "object" == typeof e && e.constructor === i ? e : new i(function(t) {
                            t(e)
                        })
                    }, i.reject = function(e) {
                        return new i(function(t, n) {
                            n(e)
                        })
                    }, i.race = function(e) {
                        return new i(function(t, n) {
                            for (var r = 0, i = e.length; i > r; r++) e[r].then(t, n)
                        })
                    }, i._setImmediateFn = function(e) {
                        f = e
                    }, i.prototype.always = function(e) {
                        var t = this.constructor;
                        return this.then(function(n) {
                            return t.resolve(e()).then(function() {
                                return n
                            })
                        }, function(n) {
                            return t.resolve(e()).then(function() {
                                throw n
                            })
                        })
                    }, "undefined" != typeof e && e.exports ? e.exports = i : n.Promise || (n.Promise = i)
                }(this)
            }).call(t, n(2).setImmediate)
        }, function(e, t, n) {
            (function(e, r) {
                function i(e, t) {
                    this._id = e, this._clearFn = t
                }

                var o = n(3).nextTick,
                    a = Function.prototype.apply,
                    s = Array.prototype.slice,
                    u = {},
                    c = 0;
                t.setTimeout = function() {
                    return new i(a.call(setTimeout, window, arguments), clearTimeout)
                }, t.setInterval = function() {
                    return new i(a.call(setInterval, window, arguments), clearInterval)
                }, t.clearTimeout = t.clearInterval = function(e) {
                    e.close()
                }, i.prototype.unref = i.prototype.ref = function() {}, i.prototype.close = function() {
                    this._clearFn.call(window, this._id)
                }, t.enroll = function(e, t) {
                    clearTimeout(e._idleTimeoutId), e._idleTimeout = t
                }, t.unenroll = function(e) {
                    clearTimeout(e._idleTimeoutId), e._idleTimeout = -1
                }, t._unrefActive = t.active = function(e) {
                    clearTimeout(e._idleTimeoutId);
                    var t = e._idleTimeout;
                    t >= 0 && (e._idleTimeoutId = setTimeout(function() {
                        e._onTimeout && e._onTimeout()
                    }, t))
                }, t.setImmediate = "function" == typeof e ? e : function(e) {
                    var n = c++,
                        r = arguments.length < 2 ? !1 : s.call(arguments, 1);
                    return u[n] = !0, o(function() {
                        u[n] && (r ? e.apply(null, r) : e.call(null), t.clearImmediate(n))
                    }), n
                }, t.clearImmediate = "function" == typeof r ? r : function(e) {
                    delete u[e]
                }
            }).call(t, n(2).setImmediate, n(2).clearImmediate)
        }, function(e, t) {
            function n() {
                c = !1, a.length ? u = a.concat(u) : l = -1, u.length && r()
            }

            function r() {
                if (!c) {
                    var e = setTimeout(n);
                    c = !0;
                    for (var t = u.length; t;) {
                        for (a = u, u = []; ++l < t;) a && a[l].run();
                        l = -1, t = u.length
                    }
                    a = null, c = !1, clearTimeout(e)
                }
            }

            function i(e, t) {
                this.fun = e, this.array = t
            }

            function o() {}

            var a, s = e.exports = {},
                u = [],
                c = !1,
                l = -1;
            s.nextTick = function(e) {
                var t = new Array(arguments.length - 1);
                if (arguments.length > 1)
                    for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                u.push(new i(e, t)), 1 !== u.length || c || setTimeout(r, 0)
            }, i.prototype.run = function() {
                this.fun.apply(null, this.array)
            }, s.title = "browser", s.browser = !0, s.env = {}, s.argv = [], s.version = "", s.versions = {}, s.on = o, s.addListener = o, s.once = o, s.off = o, s.removeListener = o, s.removeAllListeners = o, s.emit = o, s.binding = function(e) {
                throw new Error("process.binding is not supported")
            }, s.cwd = function() {
                return "/"
            }, s.chdir = function(e) {
                throw new Error("process.chdir is not supported")
            }, s.umask = function() {
                return 0
            }
        }, function(e, t) {
            function n() {
                var e = ~navigator.userAgent.indexOf("Android") && ~navigator.vendor.indexOf("Google") && !~navigator.userAgent.indexOf("Chrome");
                return e && navigator.userAgent.match(/AppleWebKit\/(\d+)/).pop() <= 534 || /MQQBrowser/g.test(navigator.userAgent)
            }

            var r = function() {
                    try {
                        return new Blob, !0
                    } catch (e) {
                        return !1
                    }
                }() ? window.Blob : function(e, t) {
                    var n = new(window.BlobBuilder || window.WebKitBlobBuilder || window.MSBlobBuilder || window.MozBlobBuilder);
                    return e.forEach(function(e) {
                        n.append(e)
                    }), n.getBlob(t ? t.type : void 0)
                },
                i = function() {
                    function e() {
                        var e = this,
                            n = [],
                            i = Array(21).join("-") + (+new Date * (1e16 * Math.random())).toString(36),
                            o = XMLHttpRequest.prototype.send;
                        this.getParts = function() {
                            return n.toString()
                        }, this.append = function(e, t, r) {
                            n.push("--" + i + '\r\nContent-Disposition: form-data; name="' + e + '"'), t instanceof Blob ? (n.push('; filename="' + (r || "blob") + '"\r\nContent-Type: ' + t.type + "\r\n\r\n"), n.push(t)) : n.push("\r\n\r\n" + t), n.push("\r\n")
                        }, t++, XMLHttpRequest.prototype.send = function(a) {
                            var s, u, c = this;
                            a === e ? (n.push("--" + i + "--\r\n"), u = new r(n), s = new FileReader, s.onload = function() {
                                o.call(c, s.result)
                            }, s.onerror = function(e) {
                                throw e
                            }, s.readAsArrayBuffer(u), this.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + i), t--, 0 == t && (XMLHttpRequest.prototype.send = o)) : o.call(this, a)
                        }
                    }

                    var t = 0;
                    return e.prototype = Object.create(FormData.prototype), e
                }();
            e.exports = {
                Blob: r,
                FormData: n() ? i : FormData
            }
        }, function(e, t, n) {
            var r, i;
            (function() {
                function n(e) {
                    return !!e.exifdata
                }

                function o(e, t) {
                    t = t || e.match(/^data\:([^\;]+)\;base64,/im)[1] || "", e = e.replace(/^data\:([^\;]+)\;base64,/gim, "");
                    for (var n = atob(e), r = n.length, i = new ArrayBuffer(r), o = new Uint8Array(i), a = 0; r > a; a++) o[a] = n.charCodeAt(a);
                    return i
                }

                function a(e, t) {
                    var n = new XMLHttpRequest;
                    n.open("GET", e, !0), n.responseType = "blob", n.onload = function(e) {
                        (200 == this.status || 0 === this.status) && t(this.response)
                    }, n.send()
                }

                function s(e, t) {
                    function n(n) {
                        var r = u(n),
                            i = c(n);
                        e.exifdata = r || {}, e.iptcdata = i || {}, t && t.call(e)
                    }

                    if (e.src)
                        if (/^data\:/i.test(e.src)) {
                            var r = o(e.src);
                            n(r)
                        } else if (/^blob\:/i.test(e.src)) {
                        var i = new FileReader;
                        i.onload = function(e) {
                            n(e.target.result)
                        }, a(e.src, function(e) {
                            i.readAsArrayBuffer(e)
                        })
                    } else {
                        var s = new XMLHttpRequest;
                        s.onload = function() {
                            200 == this.status || 0 === this.status ? n(s.response) : t(new Error("Could not load image")), s = null
                        }, s.open("GET", e.src, !0), s.responseType = "arraybuffer", s.send(null)
                    } else if (window.FileReader && (e instanceof window.Blob || e instanceof window.File)) {
                        var i = new FileReader;
                        i.onload = function(e) {
                            p && console.log("Got file of length " + e.target.result.byteLength), n(e.target.result)
                        }, i.readAsArrayBuffer(e)
                    }
                }

                function u(e) {
                    var t = new DataView(e);
                    if (p && console.log("Got file of length " + e.byteLength), 255 != t.getUint8(0) || 216 != t.getUint8(1)) return p && console.log("Not a valid JPEG"), !1;
                    for (var n, r = 2, i = e.byteLength; i > r;) {
                        if (255 != t.getUint8(r)) return p && console.log("Not a valid marker at offset " + r + ", found: " + t.getUint8(r)), !1;
                        if (n = t.getUint8(r + 1), p && console.log(n), 225 == n) return p && console.log("Found 0xFFE1 marker"), g(t, r + 4, t.getUint16(r + 2) - 2);
                        r += 2 + t.getUint16(r + 2)
                    }
                }

                function c(e) {
                    var t = new DataView(e);
                    if (p && console.log("Got file of length " + e.byteLength), 255 != t.getUint8(0) || 216 != t.getUint8(1)) return p && console.log("Not a valid JPEG"), !1;
                    for (var n = 2, r = e.byteLength, i = function(e, t) {
                            return 56 === e.getUint8(t) && 66 === e.getUint8(t + 1) && 73 === e.getUint8(t + 2) && 77 === e.getUint8(t + 3) && 4 === e.getUint8(t + 4) && 4 === e.getUint8(t + 5)
                        }; r > n;) {
                        if (i(t, n)) {
                            var o = t.getUint8(n + 7);
                            o % 2 !== 0 && (o += 1), 0 === o && (o = 4);
                            var a = n + 8 + o,
                                s = t.getUint16(n + 6 + o);
                            return l(e, a, s)
                        }
                        n++
                    }
                }

                function l(e, t, n) {
                    for (var r, i, o, a, s, u = new DataView(e), c = {}, l = t; t + n > l;) 28 === u.getUint8(l) && 2 === u.getUint8(l + 1) && (a = u.getUint8(l + 2), a in S && (o = u.getInt16(l + 3), s = o + 5, i = S[a], r = h(u, l + 5, o), c.hasOwnProperty(i) ? c[i] instanceof Array ? c[i].push(r) : c[i] = [c[i], r] : c[i] = r)), l++;
                    return c
                }

                function f(e, t, n, r, i) {
                    var o, a, s, u = e.getUint16(n, !i),
                        c = {};
                    for (s = 0; u > s; s++) o = n + 12 * s + 2, a = r[e.getUint16(o, !i)], !a && p && console.log("Unknown tag: " + e.getUint16(o, !i)), c[a] = d(e, o, t, n, i);
                    return c
                }

                function d(e, t, n, r, i) {
                    var o, a, s, u, c, l, f = e.getUint16(t + 2, !i),
                        d = e.getUint32(t + 4, !i),
                        g = e.getUint32(t + 8, !i) + n;
                    switch (f) {
                        case 1:
                        case 7:
                            if (1 == d) return e.getUint8(t + 8, !i);
                            for (o = d > 4 ? g : t + 8, a = [], u = 0; d > u; u++) a[u] = e.getUint8(o + u);
                            return a;
                        case 2:
                            return o = d > 4 ? g : t + 8, h(e, o, d - 1);
                        case 3:
                            if (1 == d) return e.getUint16(t + 8, !i);
                            for (o = d > 2 ? g : t + 8, a = [], u = 0; d > u; u++) a[u] = e.getUint16(o + 2 * u, !i);
                            return a;
                        case 4:
                            if (1 == d) return e.getUint32(t + 8, !i);
                            for (a = [], u = 0; d > u; u++) a[u] = e.getUint32(g + 4 * u, !i);
                            return a;
                        case 5:
                            if (1 == d) return c = e.getUint32(g, !i), l = e.getUint32(g + 4, !i), s = new Number(c / l), s.numerator = c, s.denominator = l, s;
                            for (a = [], u = 0; d > u; u++) c = e.getUint32(g + 8 * u, !i), l = e.getUint32(g + 4 + 8 * u, !i), a[u] = new Number(c / l), a[u].numerator = c, a[u].denominator = l;
                            return a;
                        case 9:
                            if (1 == d) return e.getInt32(t + 8, !i);
                            for (a = [], u = 0; d > u; u++) a[u] = e.getInt32(g + 4 * u, !i);
                            return a;
                        case 10:
                            if (1 == d) return e.getInt32(g, !i) / e.getInt32(g + 4, !i);
                            for (a = [], u = 0; d > u; u++) a[u] = e.getInt32(g + 8 * u, !i) / e.getInt32(g + 4 + 8 * u, !i);
                            return a
                    }
                }

                function h(e, t, n) {
                    var r, i = "";
                    for (r = t; t + n > r; r++) i += String.fromCharCode(e.getUint8(r));
                    return i
                }

                function g(e, t) {
                    if ("Exif" != h(e, t, 4)) return p && console.log("Not valid EXIF data! " + h(e, t, 4)), !1;
                    var n, r, i, o, a, s = t + 6;
                    if (18761 == e.getUint16(s)) n = !1;
                    else {
                        if (19789 != e.getUint16(s)) return p && console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)"), !1;
                        n = !0
                    }
                    if (42 != e.getUint16(s + 2, !n)) return p && console.log("Not valid TIFF data! (no 0x002A)"), !1;
                    var u = e.getUint32(s + 4, !n);
                    if (8 > u) return p && console.log("Not valid TIFF data! (First offset less than 8)", e.getUint32(s + 4, !n)), !1;
                    if (r = f(e, s, s + u, v, n), r.ExifIFDPointer) {
                        o = f(e, s, s + r.ExifIFDPointer, w, n);
                        for (i in o) {
                            switch (i) {
                                case "LightSource":
                                case "Flash":
                                case "MeteringMode":
                                case "ExposureProgram":
                                case "SensingMethod":
                                case "SceneCaptureType":
                                case "SceneType":
                                case "CustomRendered":
                                case "WhiteBalance":
                                case "GainControl":
                                case "Contrast":
                                case "Saturation":
                                case "Sharpness":
                                case "SubjectDistanceRange":
                                case "FileSource":
                                    o[i] = b[i][o[i]];
                                    break;
                                case "ExifVersion":
                                case "FlashpixVersion":
                                    o[i] = String.fromCharCode(o[i][0], o[i][1], o[i][2], o[i][3]);
                                    break;
                                case "ComponentsConfiguration":
                                    o[i] = b.Components[o[i][0]] + b.Components[o[i][1]] + b.Components[o[i][2]] + b.Components[o[i][3]]
                            }
                            r[i] = o[i]
                        }
                    }
                    if (r.GPSInfoIFDPointer) {
                        a = f(e, s, s + r.GPSInfoIFDPointer, y, n);
                        for (i in a) {
                            switch (i) {
                                case "GPSVersionID":
                                    a[i] = a[i][0] + "." + a[i][1] + "." + a[i][2] + "." + a[i][3]
                            }
                            r[i] = a[i]
                        }
                    }
                    return r
                }

                var p = !1,
                    m = function(e) {
                        return e instanceof m ? e : this instanceof m ? void(this.EXIFwrapped = e) : new m(e)
                    };
                "undefined" != typeof e && e.exports && (t = e.exports = m), t.EXIF = m;
                var w = m.Tags = {
                        36864: "ExifVersion",
                        40960: "FlashpixVersion",
                        40961: "ColorSpace",
                        40962: "PixelXDimension",
                        40963: "PixelYDimension",
                        37121: "ComponentsConfiguration",
                        37122: "CompressedBitsPerPixel",
                        37500: "MakerNote",
                        37510: "UserComment",
                        40964: "RelatedSoundFile",
                        36867: "DateTimeOriginal",
                        36868: "DateTimeDigitized",
                        37520: "SubsecTime",
                        37521: "SubsecTimeOriginal",
                        37522: "SubsecTimeDigitized",
                        33434: "ExposureTime",
                        33437: "FNumber",
                        34850: "ExposureProgram",
                        34852: "SpectralSensitivity",
                        34855: "ISOSpeedRatings",
                        34856: "OECF",
                        37377: "ShutterSpeedValue",
                        37378: "ApertureValue",
                        37379: "BrightnessValue",
                        37380: "ExposureBias",
                        37381: "MaxApertureValue",
                        37382: "SubjectDistance",
                        37383: "MeteringMode",
                        37384: "LightSource",
                        37385: "Flash",
                        37396: "SubjectArea",
                        37386: "FocalLength",
                        41483: "FlashEnergy",
                        41484: "SpatialFrequencyResponse",
                        41486: "FocalPlaneXResolution",
                        41487: "FocalPlaneYResolution",
                        41488: "FocalPlaneResolutionUnit",
                        41492: "SubjectLocation",
                        41493: "ExposureIndex",
                        41495: "SensingMethod",
                        41728: "FileSource",
                        41729: "SceneType",
                        41730: "CFAPattern",
                        41985: "CustomRendered",
                        41986: "ExposureMode",
                        41987: "WhiteBalance",
                        41988: "DigitalZoomRation",
                        41989: "FocalLengthIn35mmFilm",
                        41990: "SceneCaptureType",
                        41991: "GainControl",
                        41992: "Contrast",
                        41993: "Saturation",
                        41994: "Sharpness",
                        41995: "DeviceSettingDescription",
                        41996: "SubjectDistanceRange",
                        40965: "InteroperabilityIFDPointer",
                        42016: "ImageUniqueID"
                    },
                    v = m.TiffTags = {
                        256: "ImageWidth",
                        257: "ImageHeight",
                        34665: "ExifIFDPointer",
                        34853: "GPSInfoIFDPointer",
                        40965: "InteroperabilityIFDPointer",
                        258: "BitsPerSample",
                        259: "Compression",
                        262: "PhotometricInterpretation",
                        274: "Orientation",
                        277: "SamplesPerPixel",
                        284: "PlanarConfiguration",
                        530: "YCbCrSubSampling",
                        531: "YCbCrPositioning",
                        282: "XResolution",
                        283: "YResolution",
                        296: "ResolutionUnit",
                        273: "StripOffsets",
                        278: "RowsPerStrip",
                        279: "StripByteCounts",
                        513: "JPEGInterchangeFormat",
                        514: "JPEGInterchangeFormatLength",
                        301: "TransferFunction",
                        318: "WhitePoint",
                        319: "PrimaryChromaticities",
                        529: "YCbCrCoefficients",
                        532: "ReferenceBlackWhite",
                        306: "DateTime",
                        270: "ImageDescription",
                        271: "Make",
                        272: "Model",
                        305: "Software",
                        315: "Artist",
                        33432: "Copyright"
                    },
                    y = m.GPSTags = {
                        0: "GPSVersionID",
                        1: "GPSLatitudeRef",
                        2: "GPSLatitude",
                        3: "GPSLongitudeRef",
                        4: "GPSLongitude",
                        5: "GPSAltitudeRef",
                        6: "GPSAltitude",
                        7: "GPSTimeStamp",
                        8: "GPSSatellites",
                        9: "GPSStatus",
                        10: "GPSMeasureMode",
                        11: "GPSDOP",
                        12: "GPSSpeedRef",
                        13: "GPSSpeed",
                        14: "GPSTrackRef",
                        15: "GPSTrack",
                        16: "GPSImgDirectionRef",
                        17: "GPSImgDirection",
                        18: "GPSMapDatum",
                        19: "GPSDestLatitudeRef",
                        20: "GPSDestLatitude",
                        21: "GPSDestLongitudeRef",
                        22: "GPSDestLongitude",
                        23: "GPSDestBearingRef",
                        24: "GPSDestBearing",
                        25: "GPSDestDistanceRef",
                        26: "GPSDestDistance",
                        27: "GPSProcessingMethod",
                        28: "GPSAreaInformation",
                        29: "GPSDateStamp",
                        30: "GPSDifferential"
                    },
                    b = m.StringValues = {
                        ExposureProgram: {
                            0: "Not defined",
                            1: "Manual",
                            2: "Normal program",
                            3: "Aperture priority",
                            4: "Shutter priority",
                            5: "Creative program",
                            6: "Action program",
                            7: "Portrait mode",
                            8: "Landscape mode"
                        },
                        MeteringMode: {
                            0: "Unknown",
                            1: "Average",
                            2: "CenterWeightedAverage",
                            3: "Spot",
                            4: "MultiSpot",
                            5: "Pattern",
                            6: "Partial",
                            255: "Other"
                        },
                        LightSource: {
                            0: "Unknown",
                            1: "Daylight",
                            2: "Fluorescent",
                            3: "Tungsten (incandescent light)",
                            4: "Flash",
                            9: "Fine weather",
                            10: "Cloudy weather",
                            11: "Shade",
                            12: "Daylight fluorescent (D 5700 - 7100K)",
                            13: "Day white fluorescent (N 4600 - 5400K)",
                            14: "Cool white fluorescent (W 3900 - 4500K)",
                            15: "White fluorescent (WW 3200 - 3700K)",
                            17: "Standard light A",
                            18: "Standard light B",
                            19: "Standard light C",
                            20: "D55",
                            21: "D65",
                            22: "D75",
                            23: "D50",
                            24: "ISO studio tungsten",
                            255: "Other"
                        },
                        Flash: {
                            0: "Flash did not fire",
                            1: "Flash fired",
                            5: "Strobe return light not detected",
                            7: "Strobe return light detected",
                            9: "Flash fired, compulsory flash mode",
                            13: "Flash fired, compulsory flash mode, return light not detected",
                            15: "Flash fired, compulsory flash mode, return light detected",
                            16: "Flash did not fire, compulsory flash mode",
                            24: "Flash did not fire, auto mode",
                            25: "Flash fired, auto mode",
                            29: "Flash fired, auto mode, return light not detected",
                            31: "Flash fired, auto mode, return light detected",
                            32: "No flash function",
                            65: "Flash fired, red-eye reduction mode",
                            69: "Flash fired, red-eye reduction mode, return light not detected",
                            71: "Flash fired, red-eye reduction mode, return light detected",
                            73: "Flash fired, compulsory flash mode, red-eye reduction mode",
                            77: "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
                            79: "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
                            89: "Flash fired, auto mode, red-eye reduction mode",
                            93: "Flash fired, auto mode, return light not detected, red-eye reduction mode",
                            95: "Flash fired, auto mode, return light detected, red-eye reduction mode"
                        },
                        SensingMethod: {
                            1: "Not defined",
                            2: "One-chip color area sensor",
                            3: "Two-chip color area sensor",
                            4: "Three-chip color area sensor",
                            5: "Color sequential area sensor",
                            7: "Trilinear sensor",
                            8: "Color sequential linear sensor"
                        },
                        SceneCaptureType: {
                            0: "Standard",
                            1: "Landscape",
                            2: "Portrait",
                            3: "Night scene"
                        },
                        SceneType: {
                            1: "Directly photographed"
                        },
                        CustomRendered: {
                            0: "Normal process",
                            1: "Custom process"
                        },
                        WhiteBalance: {
                            0: "Auto white balance",
                            1: "Manual white balance"
                        },
                        GainControl: {
                            0: "None",
                            1: "Low gain up",
                            2: "High gain up",
                            3: "Low gain down",
                            4: "High gain down"
                        },
                        Contrast: {
                            0: "Normal",
                            1: "Soft",
                            2: "Hard"
                        },
                        Saturation: {
                            0: "Normal",
                            1: "Low saturation",
                            2: "High saturation"
                        },
                        Sharpness: {
                            0: "Normal",
                            1: "Soft",
                            2: "Hard"
                        },
                        SubjectDistanceRange: {
                            0: "Unknown",
                            1: "Macro",
                            2: "Close view",
                            3: "Distant view"
                        },
                        FileSource: {
                            3: "DSC"
                        },
                        Components: {
                            0: "",
                            1: "Y",
                            2: "Cb",
                            3: "Cr",
                            4: "R",
                            5: "G",
                            6: "B"
                        }
                    },
                    S = {
                        120: "caption",
                        110: "credit",
                        25: "keywords",
                        55: "dateCreated",
                        80: "byline",
                        85: "bylineTitle",
                        122: "captionWriter",
                        105: "headline",
                        116: "copyright",
                        15: "category"
                    };
                m.getData = function(e, t) {
                    return (e instanceof Image || e instanceof HTMLImageElement) && !e.complete ? !1 : (n(e) ? t && t.call(e) : s(e, t), !0)
                }, m.getTag = function(e, t) {
                    return n(e) ? e.exifdata[t] : void 0
                }, m.getAllTags = function(e) {
                    if (!n(e)) return {};
                    var t, r = e.exifdata,
                        i = {};
                    for (t in r) r.hasOwnProperty(t) && (i[t] = r[t]);
                    return i
                }, m.pretty = function(e) {
                    if (!n(e)) return "";
                    var t, r = e.exifdata,
                        i = "";
                    for (t in r) r.hasOwnProperty(t) && (i += "object" == typeof r[t] ? r[t] instanceof Number ? t + " : " + r[t] + " [" + r[t].numerator + "/" + r[t].denominator + "]\r\n" : t + " : [" + r[t].length + " values]\r\n" : t + " : " + r[t] + "\r\n");
                    return i
                }, m.readFromBinaryFile = function(e) {
                    return u(e)
                }, r = [], i = function() {
                    return m
                }.apply(t, r), !(void 0 !== i && (e.exports = i))
            }).call(this)
        }, function(e, t, n) {
            var r, i;
            ! function() {
                function n(e) {
                    var t = e.naturalWidth,
                        n = e.naturalHeight;
                    if (t * n > 1048576) {
                        var r = document.createElement("canvas");
                        r.width = r.height = 1;
                        var i = r.getContext("2d");
                        return i.drawImage(e, -t + 1, 0), 0 === i.getImageData(0, 0, 1, 1).data[3]
                    }
                    return !1
                }

                function o(e, t, n) {
                    var r = document.createElement("canvas");
                    r.width = 1, r.height = n;
                    var i = r.getContext("2d");
                    i.drawImage(e, 0, 0);
                    for (var o = i.getImageData(0, 0, 1, n).data, a = 0, s = n, u = n; u > a;) {
                        var c = o[4 * (u - 1) + 3];
                        0 === c ? s = u : a = u, u = s + a >> 1
                    }
                    var l = u / n;
                    return 0 === l ? 1 : l
                }

                function a(e, t, n) {
                    var r = document.createElement("canvas");
                    return s(e, r, t, n), r.toDataURL("image/jpeg", t.quality || .8)
                }

                function s(e, t, r, i) {
                    var a = e.naturalWidth,
                        s = e.naturalHeight,
                        c = r.width,
                        l = r.height,
                        f = t.getContext("2d");
                    f.save(), u(t, f, c, l, r.orientation);
                    var d = n(e);
                    d && (a /= 2, s /= 2);
                    var h = 1024,
                        g = document.createElement("canvas");
                    g.width = g.height = h;
                    for (var p = g.getContext("2d"), m = i ? o(e, a, s) : 1, w = Math.ceil(h * c / a), v = Math.ceil(h * l / s / m), y = 0, b = 0; s > y;) {
                        for (var S = 0, I = 0; a > S;) p.clearRect(0, 0, h, h), p.drawImage(e, -S, -y), f.drawImage(g, 0, 0, h, h, I, b, w, v), S += h, I += w;
                        y += h, b += v
                    }
                    f.restore(), g = p = null
                }

                function u(e, t, n, r, i) {
                    switch (i) {
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            e.width = r, e.height = n;
                            break;
                        default:
                            e.width = n, e.height = r
                    }
                    switch (i) {
                        case 2:
                            t.translate(n, 0), t.scale(-1, 1);
                            break;
                        case 3:
                            t.translate(n, r), t.rotate(Math.PI);
                            break;
                        case 4:
                            t.translate(0, r), t.scale(1, -1);
                            break;
                        case 5:
                            t.rotate(.5 * Math.PI), t.scale(1, -1);
                            break;
                        case 6:
                            t.rotate(.5 * Math.PI), t.translate(0, -r);
                            break;
                        case 7:
                            t.rotate(.5 * Math.PI), t.translate(n, -r), t.scale(-1, 1);
                            break;
                        case 8:
                            t.rotate(-.5 * Math.PI), t.translate(-n, 0)
                    }
                }

                function c(e) {
                    if (window.Blob && e instanceof Blob) {
                        var t = new Image,
                            n = window.URL && window.URL.createObjectURL ? window.URL : window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;
                        if (!n) throw Error("No createObjectURL function found to create blob url");
                        t.src = n.createObjectURL(e), this.blob = e, e = t
                    }
                    if (!e.naturalWidth && !e.naturalHeight) {
                        var r = this;
                        e.onload = function() {
                            var e = r.imageLoadListeners;
                            if (e) {
                                r.imageLoadListeners = null;
                                for (var t = 0, n = e.length; n > t; t++) e[t]()
                            }
                        }, this.imageLoadListeners = []
                    }
                    this.srcImage = e
                }

                c.prototype.render = function(e, t, n) {
                    if (this.imageLoadListeners) {
                        var r = this;
                        return void this.imageLoadListeners.push(function() {
                            r.render(e, t, n)
                        })
                    }
                    t = t || {};
                    var i = this.srcImage,
                        o = i.src,
                        u = o.length,
                        c = i.naturalWidth,
                        l = i.naturalHeight,
                        f = t.width,
                        d = t.height,
                        h = t.maxWidth,
                        g = t.maxHeight,
                        p = this.blob && "image/jpeg" === this.blob.type || 0 === o.indexOf("data:image/jpeg") || o.indexOf(".jpg") === u - 4 || o.indexOf(".jpeg") === u - 5;
                    f && !d ? d = l * f / c << 0 : d && !f ? f = c * d / l << 0 : (f = c, d = l), h && f > h && (f = h, d = l * f / c << 0), g && d > g && (d = g, f = c * d / l << 0);
                    var m = {
                        width: f,
                        height: d
                    };
                    for (var w in t) m[w] = t[w];
                    var v = e.tagName.toLowerCase();
                    "img" === v ? e.src = a(this.srcImage, m, p) : "canvas" === v && s(this.srcImage, e, m, p), "function" == typeof this.onrender && this.onrender(e), n && n()
                }, r = [], i = function() {
                    return c
                }.apply(t, r), !(void 0 !== i && (e.exports = i))
            }()
        }, function(e, t) {
            function n(e) {
                function t(e) {
                    for (var t = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], n = 0; 64 > n; n++) {
                        var r = F((t[n] * e + 50) / 100);
                        1 > r ? r = 1 : r > 255 && (r = 255), D[N[n]] = r
                    }
                    for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], o = 0; 64 > o; o++) {
                        var a = F((i[o] * e + 50) / 100);
                        1 > a ? a = 1 : a > 255 && (a = 255), x[N[o]] = a
                    }
                    for (var s = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], u = 0, c = 0; 8 > c; c++)
                        for (var l = 0; 8 > l; l++) U[u] = 1 / (D[N[u]] * s[c] * s[l] * 8), C[u] = 1 / (x[N[u]] * s[c] * s[l] * 8), u++
                }

                function n(e, t) {
                    for (var n = 0, r = 0, i = new Array, o = 1; 16 >= o; o++) {
                        for (var a = 1; a <= e[o]; a++) i[t[r]] = [], i[t[r]][0] = n, i[t[r]][1] = o, r++, n++;
                        n *= 2
                    }
                    return i
                }

                function r() {
                    y = n(W, H), b = n(V, X), S = n(z, q), I = n(Q, Y)
                }

                function i() {
                    for (var e = 1, t = 2, n = 1; 15 >= n; n++) {
                        for (var r = e; t > r; r++) A[32767 + r] = n, T[32767 + r] = [], T[32767 + r][1] = n, T[32767 + r][0] = r;
                        for (var i = -(t - 1); - e >= i; i++) A[32767 + i] = n, T[32767 + i] = [], T[32767 + i][1] = n, T[32767 + i][0] = t - 1 + i;
                        e <<= 1, t <<= 1
                    }
                }

                function o() {
                    for (var e = 0; 256 > e; e++) k[e] = 19595 * e, k[e + 256 >> 0] = 38470 * e, k[e + 512 >> 0] = 7471 * e + 32768, k[e + 768 >> 0] = -11059 * e, k[e + 1024 >> 0] = -21709 * e, k[e + 1280 >> 0] = 32768 * e + 8421375, k[e + 1536 >> 0] = -27439 * e, k[e + 1792 >> 0] = -5329 * e
                }

                function a(e) {
                    for (var t = e[0], n = e[1] - 1; n >= 0;) t & 1 << n && (G |= 1 << O), n--, O--, 0 > O && (255 == G ? (s(255), s(0)) : s(G), O = 7, G = 0)
                }

                function s(e) {
                    M.push(j[e])
                }

                function u(e) {
                    s(e >> 8 & 255), s(255 & e)
                }

                function c(e, t) {
                    var n, r, i, o, a, s, u, c, l, f = 0;
                    const d = 8,
                        h = 64;
                    for (l = 0; d > l; ++l) {
                        n = e[f], r = e[f + 1], i = e[f + 2], o = e[f + 3], a = e[f + 4], s = e[f + 5], u = e[f + 6], c = e[f + 7];
                        var g = n + c,
                            p = n - c,
                            m = r + u,
                            w = r - u,
                            v = i + s,
                            y = i - s,
                            b = o + a,
                            S = o - a,
                            I = g + b,
                            P = g - b,
                            F = m + v,
                            D = m - v;
                        e[f] = I + F, e[f + 4] = I - F;
                        var x = .707106781 * (D + P);
                        e[f + 2] = P + x, e[f + 6] = P - x, I = S + y, F = y + w, D = w + p;
                        var U = .382683433 * (I - D),
                            C = .5411961 * I + U,
                            T = 1.306562965 * D + U,
                            A = .707106781 * F,
                            R = p + A,
                            M = p - A;
                        e[f + 5] = M + C, e[f + 3] = M - C, e[f + 1] = R + T, e[f + 7] = R - T, f += 8
                    }
                    for (f = 0, l = 0; d > l; ++l) {
                        n = e[f], r = e[f + 8], i = e[f + 16], o = e[f + 24], a = e[f + 32], s = e[f + 40], u = e[f + 48], c = e[f + 56];
                        var G = n + c,
                            O = n - c,
                            _ = r + u,
                            B = r - u,
                            E = i + s,
                            j = i - s,
                            k = o + a,
                            N = o - a,
                            W = G + k,
                            H = G - k,
                            z = _ + E,
                            q = _ - E;
                        e[f] = W + z, e[f + 32] = W - z;
                        var V = .707106781 * (q + H);
                        e[f + 16] = H + V, e[f + 48] = H - V, W = N + j, z = j + B, q = B + O;
                        var X = .382683433 * (W - q),
                            Q = .5411961 * W + X,
                            Y = 1.306562965 * q + X,
                            K = .707106781 * z,
                            J = O + K,
                            Z = O - K;
                        e[f + 40] = Z + Q, e[f + 24] = Z - Q, e[f + 8] = J + Y, e[f + 56] = J - Y, f++
                    }
                    var $;
                    for (l = 0; h > l; ++l) $ = e[l] * t[l], L[l] = $ > 0 ? $ + .5 | 0 : $ - .5 | 0;
                    return L
                }

                function l() {
                    u(65504), u(16), s(74), s(70), s(73), s(70), s(0), s(1), s(1), s(0), u(1), u(1), s(0), s(0)
                }

                function f(e, t) {
                    u(65472), u(17), s(8), u(t), u(e), s(3), s(1), s(17), s(0), s(2), s(17), s(1), s(3), s(17), s(1)
                }

                function d() {
                    u(65499), u(132), s(0);
                    for (var e = 0; 64 > e; e++) s(D[e]);
                    s(1);
                    for (var t = 0; 64 > t; t++) s(x[t])
                }

                function h() {
                    u(65476), u(418), s(0);
                    for (var e = 0; 16 > e; e++) s(W[e + 1]);
                    for (var t = 0; 11 >= t; t++) s(H[t]);
                    s(16);
                    for (var n = 0; 16 > n; n++) s(z[n + 1]);
                    for (var r = 0; 161 >= r; r++) s(q[r]);
                    s(1);
                    for (var i = 0; 16 > i; i++) s(V[i + 1]);
                    for (var o = 0; 11 >= o; o++) s(X[o]);
                    s(17);
                    for (var a = 0; 16 > a; a++) s(Q[a + 1]);
                    for (var c = 0; 161 >= c; c++) s(Y[c])
                }

                function g() {
                    u(65498), u(12), s(3), s(1), s(0), s(2), s(17), s(3), s(17), s(0), s(63), s(0)
                }

                function p(e, t, n, r, i) {
                    var o, s = i[0],
                        u = i[240];
                    const l = 16,
                        f = 63,
                        d = 64;
                    for (var h = c(e, t), g = 0; d > g; ++g) R[N[g]] = h[g];
                    var p = R[0] - n;
                    n = R[0], 0 == p ? a(r[0]) : (o = 32767 + p, a(r[A[o]]), a(T[o]));
                    for (var m = 63; m > 0 && 0 == R[m]; m--);
                    if (0 == m) return a(s), n;
                    for (var w, v = 1; m >= v;) {
                        for (var y = v; 0 == R[v] && m >= v; ++v);
                        var b = v - y;
                        if (b >= l) {
                            w = b >> 4;
                            for (var S = 1; w >= S; ++S) a(u);
                            b = 15 & b
                        }
                        o = 32767 + R[v], a(i[(b << 4) + A[o]]), a(T[o]), v++
                    }
                    return m != f && a(s), n
                }

                function m() {
                    for (var e = String.fromCharCode, t = 0; 256 > t; t++) j[t] = e(t)
                }

                function w(e) {
                    if (0 >= e && (e = 1), e > 100 && (e = 100), P != e) {
                        var n = 0;
                        n = 50 > e ? Math.floor(5e3 / e) : Math.floor(200 - 2 * e), t(n), P = e
                    }
                }

                function v() {
                    var t = (new Date).getTime();
                    e || (e = 50), m(), r(), i(), o(), w(e);
                    (new Date).getTime() - t
                }

                var y, b, S, I, P, F = (Math.round, Math.floor),
                    D = new Array(64),
                    x = new Array(64),
                    U = new Array(64),
                    C = new Array(64),
                    T = new Array(65535),
                    A = new Array(65535),
                    L = new Array(64),
                    R = new Array(64),
                    M = [],
                    G = 0,
                    O = 7,
                    _ = new Array(64),
                    B = new Array(64),
                    E = new Array(64),
                    j = new Array(256),
                    k = new Array(2048),
                    N = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63],
                    W = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                    H = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                    z = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
                    q = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250],
                    V = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    X = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                    Q = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
                    Y = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                this.encode = function(e, t, n) {
                    var r = (new Date).getTime();
                    t && w(t), M = new Array, G = 0, O = 7, u(65496), l(), d(), f(e.width, e.height), h(), g();
                    var i = 0,
                        o = 0,
                        s = 0;
                    G = 0, O = 7, this.encode.displayName = "_encode_";
                    for (var c, m, v, P, F, D, x, T, A, L = e.data, R = e.width, j = e.height, N = 4 * R, W = 0; j > W;) {
                        for (c = 0; N > c;) {
                            for (F = N * W + c, D = F, x = -1, T = 0, A = 0; 64 > A; A++) T = A >> 3, x = 4 * (7 & A), D = F + T * N + x, W + T >= j && (D -= N * (W + 1 + T - j)), c + x >= N && (D -= c + x - N + 4), m = L[D++], v = L[D++], P = L[D++], _[A] = (k[m] + k[v + 256 >> 0] + k[P + 512 >> 0] >> 16) - 128, B[A] = (k[m + 768 >> 0] + k[v + 1024 >> 0] + k[P + 1280 >> 0] >> 16) - 128, E[A] = (k[m + 1280 >> 0] + k[v + 1536 >> 0] + k[P + 1792 >> 0] >> 16) - 128;
                            i = p(_, U, i, y, S), o = p(B, C, o, b, I), s = p(E, C, s, b, I), c += 32
                        }
                        W += 8
                    }
                    if (O >= 0) {
                        var H = [];
                        H[1] = O + 1, H[0] = (1 << O + 1) - 1, a(H)
                    }
                    if (u(65497), n) {
                        for (var z = M.length, q = new Uint8Array(z), V = 0; z > V; V++) q[V] = M[V].charCodeAt();
                        M = [];
                        (new Date).getTime() - r;
                        return q
                    }
                    var X = "data:image/jpeg;base64," + btoa(M.join(""));
                    M = [];
                    (new Date).getTime() - r;
                    return X
                }, v()
            }

            e.exports = n
        }, function(e, t, n) {
            function r(e, t) {
                var n = this;
                if (!e) throw new Error("没有收到图片，可能的解决方案：https://github.com/think2011/localResizeIMG/issues/7");
                t = t || {}, n.defaults = {
                    width: null,
                    height: null,
                    fieldName: "file",
                    quality: .7
                }, n.file = e;
                for (var r in t) t.hasOwnProperty(r) && (n.defaults[r] = t[r]);
                return this.init()
            }

            function i(e) {
                var t = null;
                return t = e ? [].filter.call(document.scripts, function(t) {
                    return -1 !== t.src.indexOf(e)
                })[0] : document.scripts[document.scripts.length - 1], t ? t.src.substr(0, t.src.lastIndexOf("/")) : null
            }

            function o(e) {
                var t;
                t = e.split(",")[0].indexOf("base64") >= 0 ? atob(e.split(",")[1]) : unescape(e.split(",")[1]);
                for (var n = e.split(",")[0].split(":")[1].split(";")[0], r = new Uint8Array(t.length), i = 0; i < t.length; i++) r[i] = t.charCodeAt(i);
                return new s.Blob([r.buffer], {
                    type: n
                })
            }

            n.p = i("lrz") + "/", window.URL = window.URL || window.webkitURL;
            var a = n(1),
                s = n(4),
                u = n(5),
                c = function(e) {
                    var t = /OS (\d)_.* like Mac OS X/g.exec(e),
                        n = /Android (\d.*?);/g.exec(e) || /Android\/(\d.*?) /g.exec(e);
                    return {
                        oldIOS: t ? +t.pop() < 8 : !1,
                        oldAndroid: n ? +n.pop().substr(0, 3) < 4.5 : !1,
                        iOS: /\(i[^;]+;( U;)? CPU.+Mac OS X/.test(e),
                        android: /Android/g.test(e),
                        mQQBrowser: /MQQBrowser/g.test(e)
                    }
                }(navigator.userAgent);
            r.prototype.init = function() {
                    var e = this,
                        t = e.file,
                        n = "string" == typeof t,
                        r = /^data:/.test(t),
                        i = new Image,
                        u = document.createElement("canvas"),
                        c = n ? t : URL.createObjectURL(t);
                    if (e.img = i, e.blob = c, e.canvas = u, n ? e.fileName = r ? "base64.jpg" : t.split("/").pop() : e.fileName = t.name, !document.createElement("canvas").getContext) throw new Error("浏览器不支持canvas");
                    return new a(function(n, a) {
                        i.onerror = function() {
                            var e = new Error("加载图片文件失败");
                            throw a(e), e
                        }, i.onload = function() {
                            e._getBase64().then(function(e) {
                                if (e.length < 10) {
                                    var t = new Error("生成base64失败");
                                    throw a(t), t
                                }
                                return e
                            }).then(function(r) {
                                var i = null;
                                "object" == typeof e.file && r.length > e.file.size ? (i = new FormData, t = e.file) : (i = new s.FormData, t = o(r)), i.append(e.defaults.fieldName, t, e.fileName.replace(/\..+/g, ".jpg")), n({
                                    formData: i,
                                    fileLen: +t.size,
                                    base64: r,
                                    base64Len: r.length,
                                    origin: e.file,
                                    file: t
                                });
                                for (var a in e) e.hasOwnProperty(a) && (e[a] = null);
                                URL.revokeObjectURL(e.blob)
                            })
                        }, !r && (i.crossOrigin = "*"), i.src = c
                    })
                }, r.prototype._getBase64 = function() {
                    var e = this,
                        t = e.img,
                        n = e.file,
                        r = e.canvas;
                    return new a(function(i) {
                        try {
                            u.getData("object" == typeof n ? n : t, function() {
                                e.orientation = u.getTag(this, "Orientation"), e.resize = e._getResize(), e.ctx = r.getContext("2d"), r.width = e.resize.width, r.height = e.resize.height, e.ctx.fillStyle = "#fff", e.ctx.fillRect(0, 0, r.width, r.height), c.oldIOS ? e._createBase64ForOldIOS().then(i) : e._createBase64().then(i)
                            })
                        } catch (o) {
                            throw new Error(o)
                        }
                    })
                }, r.prototype._createBase64ForOldIOS = function() {
                    var e = this,
                        t = e.img,
                        r = e.canvas,
                        i = e.defaults,
                        o = e.orientation;
                    return new a(function(e) {
                        ! function() {
                            var a = [n(6)];
                            (function(n) {
                                var a = new n(t);
                                "5678".indexOf(o) > -1 ? a.render(r, {
                                    width: r.height,
                                    height: r.width,
                                    orientation: o
                                }) : a.render(r, {
                                    width: r.width,
                                    height: r.height,
                                    orientation: o
                                }), e(r.toDataURL("image/jpeg", i.quality))
                            }).apply(null, a)
                        }()
                    })
                }, r.prototype._createBase64 = function() {
                    var e = this,
                        t = e.resize,
                        r = e.img,
                        i = e.canvas,
                        o = e.ctx,
                        s = e.defaults,
                        u = e.orientation;
                    switch (u) {
                        case 3:
                            o.rotate(180 * Math.PI / 180), o.drawImage(r, -t.width, -t.height, t.width, t.height);
                            break;
                        case 6:
                            o.rotate(90 * Math.PI / 180), o.drawImage(r, 0, -t.width, t.height, t.width);
                            break;
                        case 8:
                            o.rotate(270 * Math.PI / 180), o.drawImage(r, -t.height, 0, t.height, t.width);
                            break;
                        case 2:
                            o.translate(t.width, 0), o.scale(-1, 1), o.drawImage(r, 0, 0, t.width, t.height);
                            break;
                        case 4:
                            o.translate(t.width, 0), o.scale(-1, 1), o.rotate(180 * Math.PI / 180), o.drawImage(r, -t.width, -t.height, t.width, t.height);
                            break;
                        case 5:
                            o.translate(t.width, 0), o.scale(-1, 1), o.rotate(90 * Math.PI / 180), o.drawImage(r, 0, -t.width, t.height, t.width);
                            break;
                        case 7:
                            o.translate(t.width, 0), o.scale(-1, 1), o.rotate(270 * Math.PI / 180), o.drawImage(r, -t.height, 0, t.height, t.width);
                            break;
                        default:
                            o.drawImage(r, 0, 0, t.width, t.height)
                    }
                    return new a(function(e) {
                        c.oldAndroid || c.mQQBrowser || !navigator.userAgent ? ! function() {
                            var t = [n(7)];
                            (function(t) {
                                var n = new t,
                                    r = o.getImageData(0, 0, i.width, i.height);
                                e(n.encode(r, 100 * s.quality))
                            }).apply(null, t)
                        }() : e(i.toDataURL("image/jpeg", s.quality))
                    })
                }, r.prototype._getResize = function() {
                    var e = this,
                        t = e.img,
                        n = e.defaults,
                        r = n.width,
                        i = n.height,
                        o = e.orientation,
                        a = {
                            width: t.width,
                            height: t.height
                        };
                    if ("5678".indexOf(o) > -1 && (a.width = t.height, a.height = t.width), a.width < r || a.height < i) return a;
                    var s = a.width / a.height;
                    for (r && i ? s >= r / i ? a.width > r && (a.width = r, a.height = Math.ceil(r / s)) : a.height > i && (a.height = i, a.width = Math.ceil(i * s)) : r ? r < a.width && (a.width = r, a.height = Math.ceil(r / s)) : i && i < a.height && (a.width = Math.ceil(i * s), a.height = i); a.width >= 3264 || a.height >= 2448;) a.width *= .8, a.height *= .8;
                    return a
                }, window.lrz = function(e, t) {
                    return new r(e, t)
                }, window.lrz.version = "4.9.40",
                e.exports = window.lrz
        }])
    });


    /*!
     * Platform.js <https://mths.be/platform>
     * Copyright 2014-2016 Benjamin Tan <https://demoneaux.github.io/>
     * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
     * Available under MIT license <https://mths.be/mit>
     */
    ;
    (function() {
        'use strict';

        /** Used to determine if values are of the language type `Object`. */
        var objectTypes = {
            'function': true,
            'object': true
        };

        /** Used as a reference to the global object. */
        var root = (objectTypes[typeof window] && window) || this;

        /** Backup possible global object. */
        var oldRoot = root;

        /** Detect free variable `exports`. */
        var freeExports = objectTypes[typeof exports] && exports;

        /** Detect free variable `module`. */
        var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

        /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
        var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
        if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
            root = freeGlobal;
        }

        /**
         * Used as the maximum length of an array-like object.
         * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
         * for more details.
         */
        var maxSafeInteger = Math.pow(2, 53) - 1;

        /** Regular expression to detect Opera. */
        var reOpera = /\bOpera/;

        /** Possible global object. */
        var thisBinding = this;

        /** Used for native method references. */
        var objectProto = Object.prototype;

        /** Used to check for own properties of an object. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to resolve the internal `[[Class]]` of values. */
        var toString = objectProto.toString;

        /*--------------------------------------------------------------------------*/

        /**
         * Capitalizes a string value.
         *
         * @private
         * @param {string} string The string to capitalize.
         * @returns {string} The capitalized string.
         */
        function capitalize(string) {
            string = String(string);
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        /**
         * A utility function to clean up the OS name.
         *
         * @private
         * @param {string} os The OS name to clean up.
         * @param {string} [pattern] A `RegExp` pattern matching the OS name.
         * @param {string} [label] A label for the OS.
         */
        function cleanupOS(os, pattern, label) {
            // Platform tokens are defined at:
            // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
            // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
            var data = {
                '10.0': '10',
                '6.4': '10 Technical Preview',
                '6.3': '8.1',
                '6.2': '8',
                '6.1': 'Server 2008 R2 / 7',
                '6.0': 'Server 2008 / Vista',
                '5.2': 'Server 2003 / XP 64-bit',
                '5.1': 'XP',
                '5.01': '2000 SP1',
                '5.0': '2000',
                '4.0': 'NT',
                '4.90': 'ME'
            };
            // Detect Windows version from platform tokens.
            if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&
                (data = data[/[\d.]+$/.exec(os)])) {
                os = 'Windows ' + data;
            }
            // Correct character case and cleanup string.
            os = String(os);

            if (pattern && label) {
                os = os.replace(RegExp(pattern, 'i'), label);
            }

            os = format(
                os.replace(/ ce$/i, ' CE')
                .replace(/\bhpw/i, 'web')
                .replace(/\bMacintosh\b/, 'Mac OS')
                .replace(/_PowerPC\b/i, ' OS')
                .replace(/\b(OS X) [^ \d]+/i, '$1')
                .replace(/\bMac (OS X)\b/, '$1')
                .replace(/\/(\d)/, ' $1')
                .replace(/_/g, '.')
                .replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '')
                .replace(/\bx86\.64\b/gi, 'x86_64')
                .replace(/\b(Windows Phone) OS\b/, '$1')
                .replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1')
                .split(' on ')[0]
            );

            return os;
        }

        /**
         * An iteration utility for arrays and objects.
         *
         * @private
         * @param {Array|Object} object The object to iterate over.
         * @param {Function} callback The function called per iteration.
         */
        function each(object, callback) {
            var index = -1,
                length = object ? object.length : 0;

            if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
                while (++index < length) {
                    callback(object[index], index, object);
                }
            } else {
                forOwn(object, callback);
            }
        }

        /**
         * Trim and conditionally capitalize string values.
         *
         * @private
         * @param {string} string The string to format.
         * @returns {string} The formatted string.
         */
        function format(string) {
            string = trim(string);
            return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);
        }

        /**
         * Iterates over an object's own properties, executing the `callback` for each.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} callback The function executed per own property.
         */
        function forOwn(object, callback) {
            for (var key in object) {
                if (hasOwnProperty.call(object, key)) {
                    callback(object[key], key, object);
                }
            }
        }

        /**
         * Gets the internal `[[Class]]` of a value.
         *
         * @private
         * @param {*} value The value.
         * @returns {string} The `[[Class]]`.
         */
        function getClassOf(value) {
            return value == null ? capitalize(value) : toString.call(value).slice(8, -1);
        }

        /**
         * Host objects can return type values that are different from their actual
         * data type. The objects we are concerned with usually return non-primitive
         * types of "object", "function", or "unknown".
         *
         * @private
         * @param {*} object The owner of the property.
         * @param {string} property The property to check.
         * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
         */
        function isHostType(object, property) {
            var type = object != null ? typeof object[property] : 'number';
            return !/^(?:boolean|number|string|undefined)$/.test(type) &&
                (type == 'object' ? !!object[property] : true);
        }

        /**
         * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
         *
         * @private
         * @param {string} string The string to qualify.
         * @returns {string} The qualified string.
         */
        function qualify(string) {
            return String(string).replace(/([ -])(?!$)/g, '$1?');
        }

        /**
         * A bare-bones `Array#reduce` like utility function.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function called per iteration.
         * @returns {*} The accumulated result.
         */
        function reduce(array, callback) {
            var accumulator = null;
            each(array, function(value, index) {
                accumulator = callback(accumulator, value, index, array);
            });
            return accumulator;
        }

        /**
         * Removes leading and trailing whitespace from a string.
         *
         * @private
         * @param {string} string The string to trim.
         * @returns {string} The trimmed string.
         */
        function trim(string) {
            return String(string).replace(/^ +| +$/g, '');
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Creates a new platform object.
         *
         * @memberOf platform
         * @param {Object|string} [ua=navigator.userAgent] The user agent string or
         *  context object.
         * @returns {Object} A platform object.
         */
        function parse(ua) {

            /** The environment context object. */
            var context = root;

            /** Used to flag when a custom context is provided. */
            var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';

            // Juggle arguments.
            if (isCustomContext) {
                context = ua;
                ua = null;
            }

            /** Browser navigator object. */
            var nav = context.navigator || {};

            /** Browser user agent string. */
            var userAgent = nav.userAgent || '';

            ua || (ua = userAgent);

            /** Used to flag when `thisBinding` is the [ModuleScope]. */
            var isModuleScope = isCustomContext || thisBinding == oldRoot;

            /** Used to detect if browser is like Chrome. */
            var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());

            /** Internal `[[Class]]` value shortcuts. */
            var objectClass = 'Object',
                airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
                enviroClass = isCustomContext ? objectClass : 'Environment',
                javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),
                phantomClass = isCustomContext ? objectClass : 'RuntimeObject';

            /** Detect Java environments. */
            var java = /\bJava/.test(javaClass) && context.java;

            /** Detect Rhino. */
            var rhino = java && getClassOf(context.environment) == enviroClass;

            /** A character to represent alpha. */
            var alpha = java ? 'a' : '\u03b1';

            /** A character to represent beta. */
            var beta = java ? 'b' : '\u03b2';

            /** Browser document object. */
            var doc = context.document || {};

            /**
             * Detect Opera browser (Presto-based).
             * http://www.howtocreate.co.uk/operaStuff/operaObject.html
             * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
             */
            var opera = context.operamini || context.opera,
                operaClass;

            /** Opera `[[Class]]`. */
            operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera)) ? operaClass : (opera = null);

            /*------------------------------------------------------------------------*/

            /** Temporary variable used over the script's lifetime. */
            var data;

            /** The CPU architecture. */
            var arch = ua;

            /** Platform description array. */
            var description = [];

            /** Platform alpha/beta indicator. */
            var prerelease = null;

            /** A flag to indicate that environment features should be used to resolve the platform. */
            var useFeatures = ua == userAgent;

            /** The browser/environment version. */
            var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();

            /** A flag to indicate if the OS ends with "/ Version" */
            var isSpecialCasedOS;

            /* Detectable layout engines (order is important). */
            var layout = getLayout([{
                    'label': 'EdgeHTML',
                    'pattern': 'Edge'
                },
                'Trident', {
                    'label': 'WebKit',
                    'pattern': 'AppleWebKit'
                },
                'iCab',
                'Presto',
                'NetFront',
                'Tasman',
                'KHTML',
                'Gecko'
            ]);

            /* Detectable browser names (order is important). */
            var name = getName([
                'Adobe AIR',
                'Arora',
                'Avant Browser',
                'Breach',
                'Camino',
                'Electron',
                'Epiphany',
                'Fennec',
                'Flock',
                'Galeon',
                'GreenBrowser',
                'iCab',
                'Iceweasel',
                'K-Meleon',
                'Konqueror',
                'Lunascape',
                'Maxthon', {
                    'label': 'Microsoft Edge',
                    'pattern': 'Edge'
                },
                'Midori',
                'Nook Browser',
                'PaleMoon',
                'PhantomJS',
                'Raven',
                'Rekonq',
                'RockMelt', {
                    'label': 'Samsung Internet',
                    'pattern': 'SamsungBrowser'
                },
                'SeaMonkey', {
                    'label': 'Silk',
                    'pattern': '(?:Cloud9|Silk-Accelerated)'
                },
                'Sleipnir',
                'SlimBrowser', {
                    'label': 'SRWare Iron',
                    'pattern': 'Iron'
                },
                'Sunrise',
                'Swiftfox',
                'Waterfox',
                'WebPositive',
                'Opera Mini', {
                    'label': 'Opera Mini',
                    'pattern': 'OPiOS'
                },
                'Opera', {
                    'label': 'Opera',
                    'pattern': 'OPR'
                },
                'Chrome', {
                    'label': 'Chrome Mobile',
                    'pattern': '(?:CriOS|CrMo)'
                }, {
                    'label': 'Firefox',
                    'pattern': '(?:Firefox|Minefield)'
                }, {
                    'label': 'Firefox for iOS',
                    'pattern': 'FxiOS'
                }, {
                    'label': 'IE',
                    'pattern': 'IEMobile'
                }, {
                    'label': 'IE',
                    'pattern': 'MSIE'
                },
                'Safari'
            ]);

            /* Detectable products (order is important). */
            var product = getProduct([{
                    'label': 'BlackBerry',
                    'pattern': 'BB10'
                },
                'BlackBerry', {
                    'label': 'Galaxy S',
                    'pattern': 'GT-I9000'
                }, {
                    'label': 'Galaxy S2',
                    'pattern': 'GT-I9100'
                }, {
                    'label': 'Galaxy S3',
                    'pattern': 'GT-I9300'
                }, {
                    'label': 'Galaxy S4',
                    'pattern': 'GT-I9500'
                }, {
                    'label': 'Galaxy S5',
                    'pattern': 'SM-G900'
                }, {
                    'label': 'Galaxy S6',
                    'pattern': 'SM-G920'
                }, {
                    'label': 'Galaxy S6 Edge',
                    'pattern': 'SM-G925'
                }, {
                    'label': 'Galaxy S7',
                    'pattern': 'SM-G930'
                }, {
                    'label': 'Galaxy S7 Edge',
                    'pattern': 'SM-G935'
                },
                'Google TV',
                'Lumia',
                'iPad',
                'iPod',
                'iPhone',
                'Kindle', {
                    'label': 'Kindle Fire',
                    'pattern': '(?:Cloud9|Silk-Accelerated)'
                },
                'Nexus',
                'Nook',
                'PlayBook',
                'PlayStation Vita',
                'PlayStation',
                'TouchPad',
                'Transformer', {
                    'label': 'Wii U',
                    'pattern': 'WiiU'
                },
                'Wii',
                'Xbox One', {
                    'label': 'Xbox 360',
                    'pattern': 'Xbox'
                },
                'Xoom'
            ]);

            /* Detectable manufacturers. */
            var manufacturer = getManufacturer({
                'Apple': {
                    'iPad': 1,
                    'iPhone': 1,
                    'iPod': 1
                },
                'Archos': {},
                'Amazon': {
                    'Kindle': 1,
                    'Kindle Fire': 1
                },
                'Asus': {
                    'Transformer': 1
                },
                'Barnes & Noble': {
                    'Nook': 1
                },
                'BlackBerry': {
                    'PlayBook': 1
                },
                'Google': {
                    'Google TV': 1,
                    'Nexus': 1
                },
                'HP': {
                    'TouchPad': 1
                },
                'HTC': {},
                'LG': {},
                'Microsoft': {
                    'Xbox': 1,
                    'Xbox One': 1
                },
                'Motorola': {
                    'Xoom': 1
                },
                'Nintendo': {
                    'Wii U': 1,
                    'Wii': 1
                },
                'Nokia': {
                    'Lumia': 1
                },
                'Samsung': {
                    'Galaxy S': 1,
                    'Galaxy S2': 1,
                    'Galaxy S3': 1,
                    'Galaxy S4': 1
                },
                'Sony': {
                    'PlayStation': 1,
                    'PlayStation Vita': 1
                }
            });

            /* Detectable operating systems (order is important). */
            var os = getOS([
                'Windows Phone',
                'Android',
                'CentOS', {
                    'label': 'Chrome OS',
                    'pattern': 'CrOS'
                },
                'Debian',
                'Fedora',
                'FreeBSD',
                'Gentoo',
                'Haiku',
                'Kubuntu',
                'Linux Mint',
                'OpenBSD',
                'Red Hat',
                'SuSE',
                'Ubuntu',
                'Xubuntu',
                'Cygwin',
                'Symbian OS',
                'hpwOS',
                'webOS ',
                'webOS',
                'Tablet OS',
                'Tizen',
                'Linux',
                'Mac OS X',
                'Macintosh',
                'Mac',
                'Windows 98;',
                'Windows '
            ]);

            /*------------------------------------------------------------------------*/

            /**
             * Picks the layout engine from an array of guesses.
             *
             * @private
             * @param {Array} guesses An array of guesses.
             * @returns {null|string} The detected layout engine.
             */
            function getLayout(guesses) {
                return reduce(guesses, function(result, guess) {
                    return result || RegExp('\\b' + (
                        guess.pattern || qualify(guess)
                    ) + '\\b', 'i').exec(ua) && (guess.label || guess);
                });
            }

            /**
             * Picks the manufacturer from an array of guesses.
             *
             * @private
             * @param {Array} guesses An object of guesses.
             * @returns {null|string} The detected manufacturer.
             */
            function getManufacturer(guesses) {
                return reduce(guesses, function(result, value, key) {
                    // Lookup the manufacturer by product or scan the UA for the manufacturer.
                    return result || (
                        value[product] ||
                        value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] ||
                        RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)
                    ) && key;
                });
            }

            /**
             * Picks the browser name from an array of guesses.
             *
             * @private
             * @param {Array} guesses An array of guesses.
             * @returns {null|string} The detected browser name.
             */
            function getName(guesses) {
                return reduce(guesses, function(result, guess) {
                    return result || RegExp('\\b' + (
                        guess.pattern || qualify(guess)
                    ) + '\\b', 'i').exec(ua) && (guess.label || guess);
                });
            }

            /**
             * Picks the OS name from an array of guesses.
             *
             * @private
             * @param {Array} guesses An array of guesses.
             * @returns {null|string} The detected OS name.
             */
            function getOS(guesses) {
                return reduce(guesses, function(result, guess) {
                    var pattern = guess.pattern || qualify(guess);
                    if (!result && (result =
                            RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua)
                        )) {
                        result = cleanupOS(result, pattern, guess.label || guess);
                    }
                    return result;
                });
            }

            /**
             * Picks the product name from an array of guesses.
             *
             * @private
             * @param {Array} guesses An array of guesses.
             * @returns {null|string} The detected product name.
             */
            function getProduct(guesses) {
                return reduce(guesses, function(result, guess) {
                    var pattern = guess.pattern || qualify(guess);
                    if (!result && (result =
                            RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) ||
                            RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) ||
                            RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua)
                        )) {
                        // Split by forward slash and append product version if needed.
                        if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
                            result[0] += ' ' + result[1];
                        }
                        // Correct character case and cleanup string.
                        guess = guess.label || guess;
                        result = format(result[0]
                            .replace(RegExp(pattern, 'i'), guess)
                            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')
                            .replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
                    }
                    return result;
                });
            }

            /**
             * Resolves the version using an array of UA patterns.
             *
             * @private
             * @param {Array} patterns An array of UA patterns.
             * @returns {null|string} The detected version.
             */
            function getVersion(patterns) {
                return reduce(patterns, function(result, pattern) {
                    return result || (RegExp(pattern +
                        '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
                });
            }

            /**
             * Returns `platform.description` when the platform object is coerced to a string.
             *
             * @name toString
             * @memberOf platform
             * @returns {string} Returns `platform.description` if available, else an empty string.
             */
            function toStringPlatform() {
                return this.description || '';
            }

            /*------------------------------------------------------------------------*/

            // Convert layout to an array so we can add extra details.
            layout && (layout = [layout]);

            // Detect product names that contain their manufacturer's name.
            if (manufacturer && !product) {
                product = getProduct([manufacturer]);
            }
            // Clean up Google TV.
            if ((data = /\bGoogle TV\b/.exec(product))) {
                product = data[0];
            }
            // Detect simulators.
            if (/\bSimulator\b/i.test(ua)) {
                product = (product ? product + ' ' : '') + 'Simulator';
            }
            // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.
            if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
                description.push('running in Turbo/Uncompressed mode');
            }
            // Detect IE Mobile 11.
            if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
                data = parse(ua.replace(/like iPhone OS/, ''));
                manufacturer = data.manufacturer;
                product = data.product;
            }
            // Detect iOS.
            else if (/^iP/.test(product)) {
                name || (name = 'Safari');
                os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua)) ? ' ' + data[1].replace(/_/g, '.') : '');
            }
            // Detect Kubuntu.
            else if (name == 'Konqueror' && !/buntu/i.test(os)) {
                os = 'Kubuntu';
            }
            // Detect Android browsers.
            else if ((manufacturer && manufacturer != 'Google' &&
                    ((/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua)) || /\bVita\b/.test(product))) ||
                (/\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua))) {
                name = 'Android Browser';
                os = /\bAndroid\b/.test(os) ? os : 'Android';
            }
            // Detect Silk desktop/accelerated modes.
            else if (name == 'Silk') {
                if (!/\bMobi/i.test(ua)) {
                    os = 'Android';
                    description.unshift('desktop mode');
                }
                if (/Accelerated *= *true/i.test(ua)) {
                    description.unshift('accelerated');
                }
            }
            // Detect PaleMoon identifying as Firefox.
            else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
                description.push('identifying as Firefox ' + data[1]);
            }
            // Detect Firefox OS and products running Firefox.
            else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
                os || (os = 'Firefox OS');
                product || (product = data[1]);
            }
            // Detect false positives for Firefox/Safari.
            else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
                // Escape the `/` for Firefox 1.
                if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
                    // Clear name of false positives.
                    name = null;
                }
                // Reassign a generic name.
                if ((data = product || manufacturer || os) &&
                    (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
                    name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
                }
            }
            // Add Chrome version to description for Electron.
            else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
                description.push('Chromium ' + data);
            }
            // Detect non-Opera (Presto-based) versions (order is important).
            if (!version) {
                version = getVersion([
                    '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))',
                    'Version',
                    qualify(name),
                    '(?:Firefox|Minefield|NetFront)'
                ]);
            }
            // Detect stubborn layout engines.
            if ((data =
                    layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||
                    /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') ||
                    /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||
                    !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||
                    layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront'
                )) {
                layout = [data];
            }
            // Detect Windows Phone 7 desktop mode.
            if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
                name += ' Mobile';
                os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
                description.unshift('desktop mode');
            }
            // Detect Windows Phone 8.x desktop mode.
            else if (/\bWPDesktop\b/i.test(ua)) {
                name = 'IE Mobile';
                os = 'Windows Phone 8.x';
                description.unshift('desktop mode');
                version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
            }
            // Detect IE 11 identifying as other browsers.
            else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
                if (name) {
                    description.push('identifying as ' + name + (version ? ' ' + version : ''));
                }
                name = 'IE';
                version = data[1];
            }
            // Leverage environment features.
            if (useFeatures) {
                // Detect server-side environments.
                // Rhino has a global function while others have a global object.
                if (isHostType(context, 'global')) {
                    if (java) {
                        data = java.lang.System;
                        arch = data.getProperty('os.arch');
                        os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
                    }
                    if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {
                        os || (os = data[0].os || null);
                        try {
                            data[1] = context.require('ringo/engine').version;
                            version = data[1].join('.');
                            name = 'RingoJS';
                        } catch (e) {
                            if (data[0].global.system == context.system) {
                                name = 'Narwhal';
                            }
                        }
                    } else if (
                        typeof context.process == 'object' && !context.process.browser &&
                        (data = context.process)
                    ) {
                        if (typeof data.versions == 'object') {
                            if (typeof data.versions.electron == 'string') {
                                description.push('Node ' + data.versions.node);
                                name = 'Electron';
                                version = data.versions.electron;
                            } else if (typeof data.versions.nw == 'string') {
                                description.push('Chromium ' + version, 'Node ' + data.versions.node);
                                name = 'NW.js';
                                version = data.versions.nw;
                            }
                        } else {
                            name = 'Node.js';
                            arch = data.arch;
                            os = data.platform;
                            version = /[\d.]+/.exec(data.version)[0];
                        }
                    } else if (rhino) {
                        name = 'Rhino';
                    }
                }
                // Detect Adobe AIR.
                else if (getClassOf((data = context.runtime)) == airRuntimeClass) {
                    name = 'Adobe AIR';
                    os = data.flash.system.Capabilities.os;
                }
                // Detect PhantomJS.
                else if (getClassOf((data = context.phantom)) == phantomClass) {
                    name = 'PhantomJS';
                    version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);
                }
                // Detect IE compatibility modes.
                else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
                    // We're in compatibility mode when the Trident version + 4 doesn't
                    // equal the document mode.
                    version = [version, doc.documentMode];
                    if ((data = +data[1] + 4) != version[1]) {
                        description.push('IE ' + version[1] + ' mode');
                        layout && (layout[1] = '');
                        version[1] = data;
                    }
                    version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
                }
                // Detect IE 11 masking as other browsers.
                else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
                    description.push('masking as ' + name + ' ' + version);
                    name = 'IE';
                    version = '11.0';
                    layout = ['Trident'];
                    os = 'Windows';
                }
                os = os && format(os);
            }
            // Detect prerelease phases.
            if (version && (data =
                    /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) ||
                    /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||
                    /\bMinefield\b/i.test(ua) && 'a'
                )) {
                prerelease = /b/i.test(data) ? 'beta' : 'alpha';
                version = version.replace(RegExp(data + '\\+?$'), '') +
                    (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
            }
            // Detect Firefox Mobile.
            if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS)\b/.test(os)) {
                name = 'Firefox Mobile';
            }
            // Obscure Maxthon's unreliable version.
            else if (name == 'Maxthon' && version) {
                version = version.replace(/\.[\d.]+/, '.x');
            }
            // Detect Xbox 360 and Xbox One.
            else if (/\bXbox\b/i.test(product)) {
                if (product == 'Xbox 360') {
                    os = null;
                }
                if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
                    description.unshift('mobile mode');
                }
            }
            // Add mobile postfix.
            else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&
                (os == 'Windows CE' || /Mobi/i.test(ua))) {
                name += ' Mobile';
            }
            // Detect IE platform preview.
            else if (name == 'IE' && useFeatures) {
                try {
                    if (context.external === null) {
                        description.unshift('platform preview');
                    }
                } catch (e) {
                    description.unshift('embedded');
                }
            }
            // Detect BlackBerry OS version.
            // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
            else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data =
                    (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] ||
                    version
                )) {
                data = [data, /BB10/.test(ua)];
                os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
                version = null;
            }
            // Detect Opera identifying/masking itself as another browser.
            // http://www.opera.com/support/kb/view/843/
            else if (this != forOwn && product != 'Wii' && (
                    (useFeatures && opera) ||
                    (/Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua)) ||
                    (name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os)) ||
                    (name == 'IE' && (
                        (os && !/^Win/.test(os) && version > 5.5) ||
                        /\bWindows XP\b/.test(os) && version > 8 ||
                        version == 8 && !/\bTrident\b/.test(ua)
                    ))
                ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {
                // When "identifying", the UA contains both Opera and the other browser's name.
                data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
                if (reOpera.test(name)) {
                    if (/\bIE\b/.test(data) && os == 'Mac OS') {
                        os = null;
                    }
                    data = 'identify' + data;
                }
                // When "masking", the UA contains only the other browser's name.
                else {
                    data = 'mask' + data;
                    if (operaClass) {
                        name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
                    } else {
                        name = 'Opera';
                    }
                    if (/\bIE\b/.test(data)) {
                        os = null;
                    }
                    if (!useFeatures) {
                        version = null;
                    }
                }
                layout = ['Presto'];
                description.push(data);
            }
            // Detect WebKit Nightly and approximate Chrome/Safari versions.
            if ((data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
                // Correct build number for numeric comparison.
                // (e.g. "532.5" becomes "532.05")
                data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
                // Nightly builds are postfixed with a "+".
                if (name == 'Safari' && data[1].slice(-1) == '+') {
                    name = 'WebKit Nightly';
                    prerelease = 'alpha';
                    version = data[1].slice(0, -1);
                }
                // Clear incorrect browser versions.
                else if (version == data[1] ||
                    version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
                    version = null;
                }
                // Use the full Chrome version when available.
                data[1] = (/\bChrome\/([\d.]+)/i.exec(ua) || 0)[1];
                // Detect Blink layout engine.
                if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
                    layout = ['Blink'];
                }
                // Detect JavaScriptCore.
                // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
                if (!useFeatures || (!likeChrome && !data[1])) {
                    layout && (layout[1] = 'like Safari');
                    data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');
                } else {
                    layout && (layout[1] = 'like Chrome');
                    data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
                }
                // Add the postfix of ".x" or "+" for approximate versions.
                layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
                // Obscure version for some Safari 1-2 releases.
                if (name == 'Safari' && (!version || parseInt(version) > 45)) {
                    version = data;
                }
            }
            // Detect Opera desktop modes.
            if (name == 'Opera' && (data = /\bzbov|zvav$/.exec(os))) {
                name += ' ';
                description.unshift('desktop mode');
                if (data == 'zvav') {
                    name += 'Mini';
                    version = null;
                } else {
                    name += 'Mobile';
                }
                os = os.replace(RegExp(' *' + data + '$'), '');
            }
            // Detect Chrome desktop mode.
            else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
                description.unshift('desktop mode');
                name = 'Chrome Mobile';
                version = null;

                if (/\bOS X\b/.test(os)) {
                    manufacturer = 'Apple';
                    os = 'iOS 4.3+';
                } else {
                    os = null;
                }
            }
            // Strip incorrect OS versions.
            if (version && version.indexOf((data = /[\d.]+$/.exec(os))) == 0 &&
                ua.indexOf('/' + data + '-') > -1) {
                os = trim(os.replace(data, ''));
            }
            // Add layout engine.
            if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (
                    /Browser|Lunascape|Maxthon/.test(name) ||
                    name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) ||
                    /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {
                // Don't add layout details to description if they are falsey.
                (data = layout[layout.length - 1]) && description.push(data);
            }
            // Combine contextual information.
            if (description.length) {
                description = ['(' + description.join('; ') + ')'];
            }
            // Append manufacturer to description.
            if (manufacturer && product && product.indexOf(manufacturer) < 0) {
                description.push('on ' + manufacturer);
            }
            // Append product to description.
            if (product) {
                description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
            }
            // Parse the OS into an object.
            if (os) {
                data = / ([\d.+]+)$/.exec(os);
                isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
                os = {
                    'architecture': 32,
                    'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,
                    'version': data ? data[1] : null,
                    'toString': function() {
                        var version = this.version;
                        return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
                    }
                };
            }
            // Add browser/OS architecture.
            if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
                if (os) {
                    os.architecture = 64;
                    os.family = os.family.replace(RegExp(' *' + data), '');
                }
                if (
                    name && (/\bWOW64\b/i.test(ua) ||
                        (useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua)))
                ) {
                    description.unshift('32-bit');
                }
            }
            // Chrome 39 and above on OS X is always 64-bit.
            else if (
                os && /^OS X/.test(os.family) &&
                name == 'Chrome' && parseFloat(version) >= 39
            ) {
                os.architecture = 64;
            }

            ua || (ua = null);

            /*------------------------------------------------------------------------*/

            /**
             * The platform object.
             *
             * @name platform
             * @type Object
             */
            var platform = {};

            /**
             * The platform description.
             *
             * @memberOf platform
             * @type string|null
             */
            platform.description = ua;

            /**
             * The name of the browser's layout engine.
             *
             * The list of common layout engines include:
             * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
             *
             * @memberOf platform
             * @type string|null
             */
            platform.layout = layout && layout[0];

            /**
             * The name of the product's manufacturer.
             *
             * The list of manufacturers include:
             * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
             * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
             * "Nokia", "Samsung" and "Sony"
             *
             * @memberOf platform
             * @type string|null
             */
            platform.manufacturer = manufacturer;

            /**
             * The name of the browser/environment.
             *
             * The list of common browser names include:
             * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
             * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
             * "Opera Mini" and "Opera"
             *
             * Mobile versions of some browsers have "Mobile" appended to their name:
             * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
             *
             * @memberOf platform
             * @type string|null
             */
            platform.name = name;

            /**
             * The alpha/beta release indicator.
             *
             * @memberOf platform
             * @type string|null
             */
            platform.prerelease = prerelease;

            /**
             * The name of the product hosting the browser.
             *
             * The list of common products include:
             *
             * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
             * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
             *
             * @memberOf platform
             * @type string|null
             */
            platform.product = product;

            /**
             * The browser's user agent string.
             *
             * @memberOf platform
             * @type string|null
             */
            platform.ua = ua;

            /**
             * The browser/environment version.
             *
             * @memberOf platform
             * @type string|null
             */
            platform.version = name && version;

            /**
             * The name of the operating system.
             *
             * @memberOf platform
             * @type Object
             */
            platform.os = os || {

                /**
                 * The CPU architecture the OS is built for.
                 *
                 * @memberOf platform.os
                 * @type number|null
                 */
                'architecture': null,

                /**
                 * The family of the OS.
                 *
                 * Common values include:
                 * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
                 * "Windows XP", "OS X", "Ubuntu", "Debian", "Fedora", "Red Hat", "SuSE",
                 * "Android", "iOS" and "Windows Phone"
                 *
                 * @memberOf platform.os
                 * @type string|null
                 */
                'family': null,

                /**
                 * The version of the OS.
                 *
                 * @memberOf platform.os
                 * @type string|null
                 */
                'version': null,

                /**
                 * Returns the OS string.
                 *
                 * @memberOf platform.os
                 * @returns {string} The OS string.
                 */
                'toString': function() {
                    return 'null';
                }
            };

            platform.parse = parse;
            platform.toString = toStringPlatform;

            if (platform.version) {
                description.unshift(version);
            }
            if (platform.name) {
                description.unshift(name);
            }
            if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
                description.push(product ? '(' + os + ')' : 'on ' + os);
            }
            if (description.length) {
                platform.description = description.join(' ');
            }
            return platform;
        }

        /*--------------------------------------------------------------------------*/

        // Export platform.
        var platform = parse();

        // Some AMD build optimizers, like r.js, check for condition patterns like the following:
        if (typeof define == 'function' && define.amd) {
            // Expose platform on the global object to prevent errors when platform is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // root.platform = platform;

            // Define as an anonymous module so platform can be aliased through path mapping.
            define('platform', function() {
                return platform;
            });
        }
        // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
        else if (freeExports && freeModule) {
            // Export for CommonJS support.
            forOwn(platform, function(value, key) {
                freeExports[key] = value;
            });
        } else {
            // Export to the global object.
            root.platform = platform;
        }
    }.call(this));





    /**
     * Created by xiyuan on 16-10-24.
     */
    ! function(factory) {
        if (typeof define === "function" && define.amd) {

            define('deviceDrive', ['jsonp', 'IC'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('deviceDrive', [], function(require) {
                return factory();
            });

        } else {
            window.deviceDrive = factory();
        }
    }(function($jsonp, $IC) {
        var deviceDrive = {};

        /**
         * 地理定位
         */
        deviceDrive.geolocation = function(callback) {
            callback = typeof callback === "function" ? callback : function() {};

            //经纬度转换成实际地址 接口
            var toAddrUrl = 'http://api.map.baidu.com/geocoder/v2/',
                //key
                ak = '0Dba7a35f35b540c7125443d1c2d5421';

            //百度定位
            if (window.baidu_location) {
                //激活定位
                navigator.geolocation.getCurrentPosition(function() {}, function() {});

                window.baidu_location.getCurrentPosition(function(position) {
                    position = position.split('\n');
                    var positionMap = {};
                    position.forEach(function(val) {
                        var res = val.split(':');
                        positionMap[res[0].trim()] = res[1].trim();

                    });

                    //转实际地址
                    $jsonp({
                        url: toAddrUrl,
                        data: {
                            ak: ak,
                            pois: 1,
                            output: 'json',
                            location: positionMap.latitude + ',' + positionMap.lontitude
                        },
                        callbackName: 'callback', //jsonp发送的参数名称
                        jsonpCallback: 'renderReverse', //jsonp回调成功执行的方法名
                        complete: function(res) {
                            callback(res || positionMap.latitude + ',' + positionMap.lontitude)
                        }
                    });

                }, function(err) {
                    callback(null, err)
                });

            } else {
                navigator.geolocation.getCurrentPosition(function(position) {
                    //转实际地址
                    $jsonp({
                        url: toAddrUrl,
                        data: {
                            ak: ak,
                            pois: 1,
                            output: 'json',
                            coordtype: 'wgs84ll', //经度  //纬度
                            location: position.coords.latitude + ',' + position.coords.longitude
                        },
                        callbackName: 'callback', //jsonp发送的参数名称
                        jsonpCallback: 'renderReverse', //jsonp回调成功执行的方法名
                        complete: function(res) {
                            callback(res || position.coords.latitude + ',' + position.coords.longitude)
                        }
                    });

                }, function(err) {
                    callback(null, err)
                })
            }
        };

        /**
         * 根据经纬度获取实际地址
         * @param locations
         */
        deviceDrive.getLocationAddr = function(locations, callback, coordtype) {
            //经纬度转换成实际地址 接口
            var toAddrUrl = 'http://api.map.baidu.com/geocoder/v2/',
                //key
                ak = '0Dba7a35f35b540c7125443d1c2d5421';

            function getAddr(location, callback, coordtype) {
                $jsonp({
                    url: toAddrUrl,
                    data: {
                        ak: ak,
                        pois: 1,
                        output: 'json',
                        coordtype: coordtype || 'wgs84ll', //经度  //纬度
                        location: location
                    },
                    callbackName: 'callback', //jsonp发送的参数名称
                    jsonpCallback: 'renderReverse', //jsonp回调成功执行的方法名
                    complete: function(res) {
                        callback(res || location)
                    }
                });
            }

            switch (typeof locations) {
                case 'object':
                    var locationValues = [],
                        getCount = 0;
                    locations.forEach(function(location, index) {
                        var _callback = function(res) {
                            locationValues[index] = res;
                            ++getCount === locations.length && callback(locationValues)
                        };
                        getAddr(locations, _callback, coordtype);
                    });
                    break;
                case 'string':
                    getAddr(locations, callback, coordtype);
                    break
            }
        };

        /**
         * 拍照
         */
        deviceDrive.camera = function(callback, handle) {
            if (!navigator.camera) {
                handle();
                alert('此设备不支持拍照');
                callback();
                return
            }
            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 25,
                correctOrientation: true,
                encodingType: Camera.EncodingType.PNG,
                destinationType: Camera.DestinationType.DATA_URL
            });

            function onSuccess(imageData) {
                var base64Data = 'data:image/png;base64,' + imageData;
                typeof handle === "function" && handle(base64Data);
                //图片压缩
                $IC(base64Data, {
                        height: 400,
                        quality: 0.5
                    })
                    .then(function(rst) {
                        callback(rst);
                        return rst;
                    })
                    .catch(function(err) {
                        alert(err);
                    });
            }

            function onFail(message) {
                callback(null, message);
                if (message.match('selected')) {
                    alert('您已取消图片选择!');
                } else {
                    alert('拍照失败!')
                }
            }

        };

        return deviceDrive;
    });


    /*
     * HTML5 Parser
     *
     * Designed for HTML5 documents
     *
     * Original Code from HTML5 Parser By Sam Blowes (https://github.com/blowsie/Pure-JavaScript-HTML5-Parser)
     * Original code by John Resig (ejohn.org)
     * http://ejohn.org/blog/pure-javascript-html-parser/
     * Original code by Erik Arvidsson, Mozilla Public License
     * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
     *
     * // To get a DocumentFragment. If doctype is defined then it returns a Document.
     * HTMLtoDOM(htmlString);
     */
    (function(root, factory) {
        if (typeof define === 'function' && define.amd) {
            //define(factory.bind(this));
            define('HTMLtoDOM', factory.bind(this));
        } else if (typeof exports === 'object') { //nodejs
            module.exports = factory; //Need to pass jsdom window to initialize
        } else {
            root.HTMLtoDOM = factory();
        }
    }(this, function(window) {
        //browser and jsdom compatibility
        window = window || this;
        var document = window.document;

        var HTMLParser = (function() {
            // Regular Expressions for parsing tags and attributes
            var startTag = /^<([-\w:]+)((?:\s+[^\s\/>"'=]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/,
                endTag = /^<\/([-\w:]+)[^>]*>/,
                cdataTag = /^<!\[CDATA\[([\s\S]*?)\]\]>/i,
                attr = /^\s+([^\s\/>"'=]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/;

            // Empty Elements - HTML 5
            var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr"),

                // Block Elements - HTML 5
                block = makeMap("address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video"),

                // Inline Elements - HTML 5
                inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var"),

                // Elements that you can, intentionally, leave open
                // (and which close themselves)
                closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr"),

                // Special Elements (can contain anything)
                special = {
                    script: /^([\s\S]*?)<\/script[^>]*>/i,
                    style: /^([\s\S]*?)<\/style[^>]*>/i
                };

            return function Parser(html, handler) {
                //remove trailing spaces
                html = html.trim();

                var index, chars, match, stack = [],
                    last = html,
                    lastTag;

                var specialReplacer = function(all, text) {
                    if (handler.chars)
                        handler.chars(text);
                    return "";
                };

                while (html) {
                    chars = true;

                    //Handle script and style tags
                    if (special[lastTag]) {
                        html = html.replace(special[lastTag], specialReplacer);
                        chars = false;

                        parseEndTag("", lastTag);

                        // end tag
                    } else if (html.substring(0, 2) === "</") {
                        match = html.match(endTag);

                        if (match) {
                            html = html.substring(match[0].length);
                            parseEndTag.apply(this, match);
                            chars = false;
                        }

                        // Comment
                    } else if (html.substring(0, 4) === "<!--") {
                        index = html.indexOf("-->");

                        if (index >= 0) {
                            if (handler.comment)
                                handler.comment(html.substring(4, index));
                            html = html.substring(index + 3);
                            chars = false;
                        }

                        //CDATA
                    } else if (html.substring(0, 9).toUpperCase() === '<![CDATA[') {
                        match = html.match(cdataTag);

                        if (match) {
                            if (handler.cdata)
                                handler.cdata(match[1]);
                            html = html.substring(match[0].length);
                            chars = false;
                        }

                        // doctype
                    } else if (html.substring(0, 9).toUpperCase() === '<!DOCTYPE') {
                        index = html.indexOf(">");

                        if (index >= 0) {
                            if (handler.doctype)
                                handler.doctype(html.substring(0, index));
                            html = html.substring(index + 1);
                            chars = false;
                        }
                        // start tag
                    } else if (html[0] === "<") {
                        match = html.match(startTag);

                        if (match) {
                            html = html.substring(match[0].length);
                            parseStartTag.apply(this, match);
                            chars = false;
                        } else { //ignore the angle bracket
                            html = html.substring(1);
                            if (handler.chars) {
                                handler.chars('<');
                            }
                            chars = false;
                        }
                    }

                    if (chars) {
                        index = html.indexOf("<");

                        var text = index < 0 ? html : html.substring(0, index);
                        html = index < 0 ? "" : html.substring(index);

                        if (handler.chars) {
                            handler.chars(text);
                        }
                    }

                    if (html === last)
                        throw "Parse Error: " + html;
                    last = html;
                }

                // Clean up any remaining tags
                parseEndTag();

                function parseStartTag(tag, tagName, rest, unary) {
                    var casePreservedTagName = tagName;
                    tagName = tagName.toLowerCase();

                    if (block[tagName]) {
                        while (lastTag && inline[lastTag]) {
                            parseEndTag("", lastTag);
                        }
                    }

                    //TODO: In addition to lastTag === tagName, also check special case for th, td, tfoot, tbody, thead
                    if (closeSelf[tagName] && lastTag === tagName) {
                        parseEndTag("", tagName);
                    }

                    unary = empty[tagName] || !!unary;

                    if (!unary) {
                        stack.push(tagName);
                        lastTag = tagName;
                    }

                    if (handler.start) {
                        var attrs = [],
                            match, name, value;

                        while ((match = rest.match(attr))) {
                            rest = rest.substr(match[0].length);

                            name = match[1];
                            value = match[2] || match[3] || match[4] || '';

                            attrs.push({
                                name: name,
                                value: value,
                                escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
                            });
                        }

                        if (handler.start)
                            handler.start(casePreservedTagName, attrs, unary);
                    }
                }

                function parseEndTag(tag, tagName) {
                    var pos;
                    // If no tag name is provided, clean shop
                    if (!tagName)
                        pos = 0;

                    // Find the closest opened tag of the same type
                    else
                        for (pos = stack.length - 1; pos >= 0; pos -= 1)
                            if (stack[pos] === tagName)
                                break;

                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = stack.length - 1; i >= pos; i -= 1)
                            if (handler.end)
                                handler.end(stack[i]);

                            // Remove the open elements from the stack
                        stack.length = pos;
                        lastTag = stack[pos - 1];
                    }
                }
            };

        })();

        var HTMLtoDOM = function(html) {
            //利用浏览器DOM系统转换
            var div = document.createElement('div'),
                cdf = document.createDocumentFragment();

            div.innerHTML = html;
            while (div.firstChild) {
                cdf.appendChild(div.firstChild);
            }
            return cdf;

            /*var doc = document,

			//创建文档片段
			newDoc = doc.createDocumentFragment(),

			//这些元素文档中只有一个
			one = makeMap("html,head,body,title"),

			// 执行文件的结构
			structure = {
				link: "head",
				base: "head"
			},
			elems = [newDoc],
			curParentNode = newDoc;

		HTMLParser(html, {
			start: function (tagName, attrs, unary) {
				var elem = doc.createElement(tagName);
				if (tagName in one) {
					if (one[tagName] !== true) {
						return;
					}

					//记住重要的标签
					one[tagName] = elem;
				}

				for (var attr = 0; attr < attrs.length; attr += 1)
					elem.setAttribute(attrs[attr].name, attrs[attr].value);

				if (structure[tagName] && typeof one[structure[tagName]] !== "boolean")
					one[structure[tagName]].appendChild(elem);

				else if (curParentNode && curParentNode.appendChild)
					curParentNode.appendChild(elem);

				if (!unary) {
					elems.push(elem);
					curParentNode = elem;
				}
			},
			end: function () {
				elems.length -= 1;

				//初始化新的父节点
				curParentNode = elems[elems.length - 1];
			},
			chars: function (text) {
				//WebKit抛出错误时，试图直接将文本添加到一个文件.
				if (newDoc.nodeType === 11 || curParentNode !== newDoc) {
					curParentNode.appendChild(doc.createTextNode(text));
				}
			},
			comment: function (text) {
				//创建注释节点
				curParentNode.appendChild(doc.createComment(text));
			},
			doctype: function () {
				if (!newDoc.firstChild) {
					//创建空文档
					newDoc = doc = document.implementation.createDocument("", "", null);

					elems = [newDoc];
					curParentNode = newDoc;

					//因为只支持HTML5创建HTML5的doctype。这不会兼容IE8—.
					newDoc.insertBefore(newDoc.implementation.createDocumentType('html', '', ''), newDoc.firstChild);
				}
			}
		});

		newDoc.normalize();
		return newDoc;*/
        };

        //转换字符串为key=>value 形式
        function makeMap(str) {
            var obj = {},
                items = str.split(",");
            for (var i = 0; i < items.length; i += 1)
                obj[items[i]] = true;
            return obj;
        }

        HTMLtoDOM.Parser = HTMLParser;
        return HTMLtoDOM;
    }));


    /**
     * Created by xiyuan on 15-12-4.
     */
    ! function(factory) {
        if (typeof define === "function" && define.amd) {

            define('element', ['type'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('element', ['type'], function(require) {
                return factory();
            });

        } else {
            window.element = factory(type);
        }

    }(function($type) {
        'use strict';


        /**
         * Created by xiyuan on 15-12-4.
         */

        var $element = function(node) {
            if (node instanceof $) {
                return node;
            }
            if ($type.isElement(node)) {
                return new $([node]);
            }
        };

        //元素element nodeType
        var NODE_TYPES = {};

        var ELEMENT_NODE = $element.ELEMENT_NODE = 1;
        NODE_TYPES[ELEMENT_NODE] = ELEMENT_NODE;

        //属性attr
        var ATTRIBUTE_NODE = $element.ATTRIBUTE_NODE = 2;
        NODE_TYPES[ATTRIBUTE_NODE] = ATTRIBUTE_NODE;

        //文本text
        var TEXT_NODE = $element.TEXT_NODE = 3;
        NODE_TYPES[TEXT_NODE] = TEXT_NODE;

        //注释comments
        var COMMENT_NODE = $element.COMMENT_NODE = 8;
        NODE_TYPES[COMMENT_NODE] = COMMENT_NODE;

        //文档document
        var DOCUMENT_NODE = $element.DOCUMENT_NODE = 9;
        NODE_TYPES[DOCUMENT_NODE] = DOCUMENT_NODE;

        //文档片段
        var DOCUMENT_FRAGMENT_NODE = $element.DOCUMENT_FRAGMENT_NODE = 11;
        NODE_TYPES[DOCUMENT_FRAGMENT_NODE] = DOCUMENT_FRAGMENT_NODE;



        /*元素处理对象（类似jquery）*/
        var $ = function(nodes) {
            this.__self__ = nodes[0];
            var i = ~0,
                l = this.length = nodes.length;
            while (++i, i < l) {
                this[i] = nodes[i];
            }
        };

        /*获取节点名称*/
        $element.nodeName = function(element, nodeName) {
            var _nodeName = element.nodeName.toLocaleLowerCase();
            return typeof nodeName === 'string' ? _nodeName === nodeName.toLocaleLowerCase() : _nodeName;
        };

        $.prototype.nodeName = function(nodeName) {
            return $element.nodeName(this.__self__, nodeName);
        };

        /*子节点获取*/
        $element.children = function(element) {
            var arg = arguments,
                len = arg.length,
                a = 0,
                each, type;
            while (++a, a < len) {
                switch ($type.getType(arg[a])) {
                    case 'function':
                        each = arg[a];
                        break;
                    default:
                        type = arg[a];
                }
            }

            if (type === '*') return element.childNodes;
            var TYPES = {},
                children = [],
                nodeType, childrenList;
            switch ($type.getType(type)) {
                case 'array':
                    var i = ~0,
                        len = type.length,
                        _type;
                    while (++i, i < len) {
                        _type = Number(type[i]);
                        nodeType = _type in NODE_TYPES;
                        nodeType && (TYPES[_type] = _type);
                    }
                    break;
                case 'string':
                    type = Number(type);
                    nodeType = type in NODE_TYPES;
                    nodeType && (TYPES[type] = type);
                    break;
                case 'number':
                    TYPES[type] = type;
                    break;
                default:
                    TYPES[1] = 1;
            }

            //检查是否有类型判断
            childrenList = type ? element.childNodes : element.children || element.childNodes;

            var len = childrenList.length,
                i = ~0,
                _node;
            while (++i, i < len) {
                _node = childrenList.item(i);
                if (_node.nodeType in TYPES) {
                    children.push(_node);
                    each && each(_node);
                }
            }

            return children;
        };

        $.prototype.children = function(type, fn) {
            return $element.children(this.__self__, type, fn);
        };

        /*获取父元素*/
        $element.parent = function(element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== DOCUMENT_FRAGMENT_NODE ? parent : null;
        };

        $.prototype.parent = function() {
            return $element.parent(this.__self__);
        };

        /*查看节点是否是另一个节点的子元素（一直往下找）*/
        $element.isChildrens = function(childNode, parentNode) {
            var cType = $type.getType(childNode),
                pType = $type.getType(parentNode);

            if (cType === 'element' || pType === 'element') {
                var swt = function(type, childNode, parentNode) {
                    switch (type) {
                        case 'element':
                            var parent = $element.parent(childNode);
                            switch (parent) {
                                case parentNode:
                                    return parentNode;
                                    break;
                                case window.document:
                                    return false;
                                    break;
                                default:
                                    return swt(type, parent, parentNode);
                            }
                            break;
                        case 'array':

                            break;
                        case 'string':



                    }
                };

                switch (cType) {
                    case 'element':
                        return swt(pType, childNode, parentNode);
                        break;
                }

            }
            return false;
        };

        $.prototype.isChildrens = function(parentNode) {
            return $element.isChildrens(this.__self__, parentNode);
        };

        /*查看节点是否是另一个节点的父元素（一直往上找）*/
        $element.isParents = function(parentNode, childNode) {
            return $element.isChildrens(childNode, parentNode);
        };

        $.prototype.isParents = function(childNode) {
            return $element.isParents(this.__self__, childNode);
        };

        /*获取元素本身或修改属性*/
        $element.prop = function(element, name, value) {
            if ($type.isDefined(value)) {
                element[name] = value;
            } else {
                return element[name];
            }
        };

        $.prototype.prop = function(name, value) {
            return $element.prop(this.__self__, name, value);
        };

        /*获取元素或修改属性*/
        $element.attr = function(element, attrName, value) {
            return value ? (element.setAttribute(attrName, value), value) : element.getAttribute(attrName);
        };

        $.prototype.attr = function(name, value) {
            return $element.attr(this.__self__, name, value);
        };


        /**
         * Created by xiyuan on 15-12-4.
         */
        ;


        /**
         * Created by xiyuan on 15-12-7.
         */

        /*事件绑定与解除*/
        var addEventListener = function(element, type, fn) {
                element.addEventListener(type, fn, false);
            },
            removeEventListener = function(element, type, fn) {
                element.removeEventListener(type, fn, false);
            },
            eventElementCache = {

            };

        /**/

        $element.on = function(element, type, fn) {
            addEventListener(element, type, fn);
        };

        $element.off = function(element, type, fn) {
            removeEventListener(element, type, fn);
        };

        return $element;
    });


    /**
     @package { safety }
     @description { 数据安全 }
     @return { Object }
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('safety', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('safety', [], function(require) {
                return factory();
            });

        } else {
            window.safety = factory();
        }

    })(function() {

        return new function() {
            /**
             * Created by xiyuan on 15-11-30.
             */
            (function(exports) {
                exports.base64_encode = function(str) {
                    var c1, c2, c3;
                    var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                    var i = 0,
                        len = str.length,
                        string = '';

                    while (i < len) {
                        c1 = str.charCodeAt(i++) & 0xff;
                        if (i == len) {
                            string += base64EncodeChars.charAt(c1 >> 2);
                            string += base64EncodeChars.charAt((c1 & 0x3) << 4);
                            string += "==";
                            break;
                        }
                        c2 = str.charCodeAt(i++);
                        if (i == len) {
                            string += base64EncodeChars.charAt(c1 >> 2);
                            string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                            string += base64EncodeChars.charAt((c2 & 0xF) << 2);
                            string += "=";
                            break;
                        }
                        c3 = str.charCodeAt(i++);
                        string += base64EncodeChars.charAt(c1 >> 2);
                        string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                        string += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
                        string += base64EncodeChars.charAt(c3 & 0x3F)
                    }
                    return string
                };

                exports.base64_decode = function(str) {
                    var c1, c2, c3, c4;
                    var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57,
                        58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6,
                        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                        25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
                        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1
                    );
                    var i = 0,
                        len = str.length,
                        string = '';

                    while (i < len) {
                        do {
                            c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                        } while (
                            i < len && c1 == -1
                        );

                        if (c1 == -1) break;

                        do {
                            c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                        } while (
                            i < len && c2 == -1
                        );

                        if (c2 == -1) break;

                        string += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

                        do {
                            c3 = str.charCodeAt(i++) & 0xff;
                            if (c3 == 61)
                                return string;

                            c3 = base64DecodeChars[c3]
                        } while (
                            i < len && c3 == -1
                        );

                        if (c3 == -1) break;

                        string += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

                        do {
                            c4 = str.charCodeAt(i++) & 0xff;
                            if (c4 == 61) return string;
                            c4 = base64DecodeChars[c4]
                        } while (
                            i < len && c4 == -1
                        );

                        if (c4 == -1) break;

                        string += String.fromCharCode(((c3 & 0x03) << 6) | c4)
                    }
                    return string;
                }
            })(this);
            /**
             * Created by xiyuan on 15-11-30.
             */
            (function(exports) {

                exports.utf8_encode = function(input) {
                    var output = "";
                    var i = -1;
                    var x, y;

                    while (++i < input.length) {
                        /* Decode utf-16 surrogate pairs */
                        x = input.charCodeAt(i);
                        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
                        if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
                            x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
                            i++;
                        }

                        /* Encode output as utf-8 */
                        if (x <= 0x7F)
                            output += String.fromCharCode(x);
                        else if (x <= 0x7FF)
                            output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),
                                0x80 | (x & 0x3F));
                        else if (x <= 0xFFFF)
                            output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                0x80 | ((x >>> 6) & 0x3F),
                                0x80 | (x & 0x3F));
                        else if (x <= 0x1FFFFF)
                            output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                0x80 | ((x >>> 12) & 0x3F),
                                0x80 | ((x >>> 6) & 0x3F),
                                0x80 | (x & 0x3F));
                    }
                    return output;
                }

            })(this);
            (function(exports) {
                /*
                 * Configurable variables. You may need to tweak these to be compatible with
                 * the server-side, but the defaults work in most cases.
                 */
                var hexcase = 0;
                /* hex output format. 0 - lowercase; 1 - uppercase        */
                var b64pad = "=";
                /* base-64 pad character. "=" for strict RFC compliance   */

                /*
                 * These are the functions you'll usually want to call
                 * They take string arguments and return either hex or base-64 encoded strings
                 */

                exports.MD5 = function(s) {
                    return rstr2hex(exports.rstrexports(str2rstr_utf8(s)));
                }

                exports.base64exports = function(s) {
                    return exports.base64(exports.rstrexports(str2rstr_utf8(s)));
                }

                exports.anyexports = function(s, e) {
                    return rstr2any(exports.rstrexports(str2rstr_utf8(s)), e);
                }

                exports.hex_hmacexports = function(k, d) {
                    return rstr2hex(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)));
                }

                exports.b64_hmacexports = function(k, d) {
                    return exports.base64(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)));
                }

                exports.any_hmacexports = function(k, d, e) {
                    return rstr2any(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)), e);
                }

                /*
                 * Calculate the MD5 of a raw string
                 */
                exports.rstrexports = function(s) {
                    return binl2rstr(binlexports(rstr2binl(s), s.length * 8));
                }

                /*
                 * Calculate the HMAC-MD5, of a key and some data (raw strings)
                 */
                var rstr_hmacexports = function(key, data) {
                    var bkey = rstr2binl(key);
                    if (bkey.length > 16) bkey = binlexports(bkey, key.length * 8);

                    var ipad = Array(16),
                        opad = Array(16);
                    for (var i = 0; i < 16; i++) {
                        ipad[i] = bkey[i] ^ 0x36363636;
                        opad[i] = bkey[i] ^ 0x5C5C5C5C;
                    }

                    var hash = binlexports(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
                    return binl2rstr(binlexports(opad.concat(hash), 512 + 128));
                };

                /*
                 * Convert a raw string to a hex string
                 */
                var rstr2hex = function(input) {
                    try {
                        hexcase
                    } catch (e) {
                        hexcase = 0;
                    }
                    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                    var output = "";
                    var x;
                    for (var i = 0; i < input.length; i++) {
                        x = input.charCodeAt(i);
                        output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
                    }
                    return output;
                }

                /*
                 * Convert a raw string to a base-64 string
                 */
                exports.base64 = exports.base64_encode;

                /*
                 * Convert a raw string to an arbitrary string encoding
                 */
                var rstr2any = function(input, encoding) {
                    var divisor = encoding.length;
                    var i, j, q, x, quotient;

                    /* Convert to an array of 16-bit big-endian values, forming the dividend */
                    var dividend = Array(Math.ceil(input.length / 2));
                    for (i = 0; i < dividend.length; i++) {
                        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
                    }

                    /*
                     * Repeatedly perform a long division. The binary array forms the dividend,
                     * the length of the encoding is the divisor. Once computed, the quotient
                     * forms the dividend for the next step. All remainders are stored for later
                     * use.
                     */
                    var full_length = Math.ceil(input.length * 8 /
                        (Math.log(encoding.length) / Math.log(2)));
                    var remainders = Array(full_length);
                    for (j = 0; j < full_length; j++) {
                        quotient = Array();
                        x = 0;
                        for (i = 0; i < dividend.length; i++) {
                            x = (x << 16) + dividend[i];
                            q = Math.floor(x / divisor);
                            x -= q * divisor;
                            if (quotient.length > 0 || q > 0)
                                quotient[quotient.length] = q;
                        }
                        remainders[j] = x;
                        dividend = quotient;
                    }

                    /* Convert the remainders to the output string */
                    var output = "";
                    for (i = remainders.length - 1; i >= 0; i--)
                        output += encoding.charAt(remainders[i]);

                    return output;
                }

                /*
                 * Encode a string as utf-8.
                 * For efficiency, this assumes the input is valid utf-16.
                 */
                var str2rstr_utf8 = exports.utf8_encode;

                /*
                 * Encode a string as utf-16
                 */
                var str2rstr_utf16le = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length; i++)
                        output += String.fromCharCode(input.charCodeAt(i) & 0xFF, (input.charCodeAt(i) >>> 8) & 0xFF);
                    return output;
                }

                var str2rstr_utf16be = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length; i++)
                        output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                            input.charCodeAt(i) & 0xFF);
                    return output;
                }

                /*
                 * Convert a raw string to an array of little-endian words
                 * Characters >255 have their high-byte silently ignored.
                 */
                var rstr2binl = function(input) {
                    var output = Array(input.length >> 2);
                    for (var i = 0; i < output.length; i++)
                        output[i] = 0;
                    for (var i = 0; i < input.length * 8; i += 8)
                        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
                    return output;
                }

                /*
                 * Convert an array of little-endian words to a string
                 */
                var binl2rstr = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length * 32; i += 8)
                        output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
                    return output;
                }

                /*
                 * Calculate the MD5 of an array of little-endian words, and a bit length.
                 */
                var binlexports = function(x, len) {
                    /* append padding */
                    x[len >> 5] |= 0x80 << ((len) % 32);
                    x[(((len + 64) >>> 9) << 4) + 14] = len;

                    var a = 1732584193;
                    var b = -271733879;
                    var c = -1732584194;
                    var d = 271733878;

                    for (var i = 0; i < x.length; i += 16) {
                        var olda = a;
                        var oldb = b;
                        var oldc = c;
                        var oldd = d;

                        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
                        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
                        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
                        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
                        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
                        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
                        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
                        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
                        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
                        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
                        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
                        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
                        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
                        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
                        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
                        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

                        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
                        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
                        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
                        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
                        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
                        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
                        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
                        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
                        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
                        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
                        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
                        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
                        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
                        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
                        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
                        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

                        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
                        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
                        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
                        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
                        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
                        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
                        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
                        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
                        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
                        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
                        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
                        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
                        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
                        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
                        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
                        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

                        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
                        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
                        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
                        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
                        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
                        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
                        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
                        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
                        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
                        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
                        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
                        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
                        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
                        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
                        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
                        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

                        a = safe_add(a, olda);
                        b = safe_add(b, oldb);
                        c = safe_add(c, oldc);
                        d = safe_add(d, oldd);
                    }
                    return Array(a, b, c, d);
                }

                /*
                 * These functions implement the four basic operations the algorithm uses.
                 */
                var md5_cmn = function(q, a, b, x, s, t) {
                    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
                }

                var md5_ff = function(a, b, c, d, x, s, t) {
                    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
                }

                var md5_gg = function(a, b, c, d, x, s, t) {
                    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
                }

                var md5_hh = function(a, b, c, d, x, s, t) {
                    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
                }

                var md5_ii = function(a, b, c, d, x, s, t) {
                    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
                }

                /*
                 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
                 * to work around bugs in some JS interpreters.
                 */
                var safe_add = function(x, y) {
                    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
                    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                    return (msw << 16) | (lsw & 0xFFFF);
                }

                /*
                 * Bitwise rotate a 32-bit number to the left.
                 */
                var bit_rol = function(num, cnt) {
                    return (num << cnt) | (num >>> (32 - cnt));
                }

            })(this);
            /*
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
             * in FIPS 180-1
             * Version 2.2 Copyright Paul Johnston 2000 - 2009.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             * Distributed under the BSD License
             * See http://pajhome.org.uk/crypt/md5 for details.
             */

            /*
             * Configurable variables. You may need to tweak these to be compatible with
             * the server-side, but the defaults work in most cases.
             */

            /* base-64 pad character. "=" for strict RFC compliance   */

            /*
             * These are the functions you'll usually want to call
             * They take string arguments and return either hex or base-64 encoded strings
             */
            (function(exports) {
                /*
                 * Configurable variables. You may need to tweak these to be compatible with
                 * the server-side, but the defaults work in most cases.
                 */
                var hexcase = 0;
                /* hex output format. 0 - lowercase; 1 - uppercase        */
                var b64pad = "=";
                /* base-64 pad character. "=" for strict RFC compliance   */

                /*
                 * These are the functions you'll usually want to call
                 * They take string arguments and return either hex or base-64 encoded strings
                 */
                exports.sha1 = exports.SHA1 = function(s) {
                    return rstr2hex(rstrexports(str2rstr_utf8(s)));
                }

                exports.base64exports = function(s) {
                    return rstr2b64(rstrexports(str2rstr_utf8(s)));
                }

                var anyexports = function(s, e) {
                    return rstr2any(rstrexports(str2rstr_utf8(s)), e);
                }

                var hex_hmacexports = function(k, d) {
                    return rstr2hex(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)));
                }

                var b64_hmacexports = function(k, d) {
                    return rstr2b64(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)));
                }

                var any_hmacexports = function(k, d, e) {
                    return rstr2any(rstr_hmacexports(str2rstr_utf8(k), str2rstr_utf8(d)), e);
                }

                /*
                 * Perform a simple self-test to see if the VM is working
                 */
                var sha1_vm_test = function() {
                    return hexexports("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";
                }

                /*
                 * Calculate the SHA1 of a raw string
                 */
                var rstrexports = function(s) {
                    return binb2rstr(binbexports(rstr2binb(s), s.length * 8));
                }

                /*
                 * Calculate the HMAC-SHA1 of a key and some data (raw strings)
                 */
                var rstr_hmacexports = function(key, data) {
                    var bkey = rstr2binb(key);
                    if (bkey.length > 16) bkey = binbexports(bkey, key.length * 8);

                    var ipad = Array(16),
                        opad = Array(16);
                    for (var i = 0; i < 16; i++) {
                        ipad[i] = bkey[i] ^ 0x36363636;
                        opad[i] = bkey[i] ^ 0x5C5C5C5C;
                    }

                    var hash = binbexports(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
                    return binb2rstr(binbexports(opad.concat(hash), 512 + 160));
                }

                /*
                 * Convert a raw string to a hex string
                 */
                var rstr2hex = function(input) {
                    try {
                        hexcase
                    } catch (e) {
                        hexcase = 0;
                    }
                    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                    var output = "";
                    var x;
                    for (var i = 0; i < input.length; i++) {
                        x = input.charCodeAt(i);
                        output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
                    }
                    return output;
                }

                /*
                 * Convert a raw string to a base-64 string
                 */
                var rstr2b64 = exports.base64_encode;


                /*
                 * Convert a raw string to an arbitrary string encoding
                 */
                var rstr2any = function(input, encoding) {
                    var divisor = encoding.length;
                    var remainders = Array();
                    var i, q, x, quotient;

                    /* Convert to an array of 16-bit big-endian values, forming the dividend */
                    var dividend = Array(Math.ceil(input.length / 2));
                    for (i = 0; i < dividend.length; i++) {
                        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
                    }

                    /*
                     * Repeatedly perform a long division. The binary array forms the dividend,
                     * the length of the encoding is the divisor. Once computed, the quotient
                     * forms the dividend for the next step. We stop when the dividend is zero.
                     * All remainders are stored for later use.
                     */
                    while (dividend.length > 0) {
                        quotient = Array();
                        x = 0;
                        for (i = 0; i < dividend.length; i++) {
                            x = (x << 16) + dividend[i];
                            q = Math.floor(x / divisor);
                            x -= q * divisor;
                            if (quotient.length > 0 || q > 0)
                                quotient[quotient.length] = q;
                        }
                        remainders[remainders.length] = x;
                        dividend = quotient;
                    }

                    /* Convert the remainders to the output string */
                    var output = "";
                    for (i = remainders.length - 1; i >= 0; i--)
                        output += encoding.charAt(remainders[i]);

                    /* Append leading zero equivalents */
                    var full_length = Math.ceil(input.length * 8 /
                        (Math.log(encoding.length) / Math.log(2)))
                    for (i = output.length; i < full_length; i++)
                        output = encoding[0] + output;

                    return output;
                }

                /*
                 * Encode a string as utf-8.
                 * For efficiency, this assumes the input is valid utf-16.
                 */
                var str2rstr_utf8 = exports.utf8_encode;

                /*
                 * Encode a string as utf-16
                 */
                var str2rstr_utf16le = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length; i++)
                        output += String.fromCharCode(input.charCodeAt(i) & 0xFF, (input.charCodeAt(i) >>> 8) & 0xFF);
                    return output;
                }

                var str2rstr_utf16be = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length; i++)
                        output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                            input.charCodeAt(i) & 0xFF);
                    return output;
                }

                /*
                 * Convert a raw string to an array of big-endian words
                 * Characters >255 have their high-byte silently ignored.
                 */
                var rstr2binb = function(input) {
                    var output = Array(input.length >> 2);
                    for (var i = 0; i < output.length; i++)
                        output[i] = 0;
                    for (var i = 0; i < input.length * 8; i += 8)
                        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
                    return output;
                }

                /*
                 * Convert an array of big-endian words to a string
                 */
                var binb2rstr = function(input) {
                    var output = "";
                    for (var i = 0; i < input.length * 32; i += 8)
                        output += String.fromCharCode((input[i >> 5] >>> (24 - i % 32)) & 0xFF);
                    return output;
                }

                /*
                 * Calculate the SHA-1 of an array of big-endian words, and a bit length
                 */
                var binbexports = function(x, len) {
                    /* append padding */
                    x[len >> 5] |= 0x80 << (24 - len % 32);
                    x[((len + 64 >> 9) << 4) + 15] = len;

                    var w = Array(80);
                    var a = 1732584193;
                    var b = -271733879;
                    var c = -1732584194;
                    var d = 271733878;
                    var e = -1009589776;

                    for (var i = 0; i < x.length; i += 16) {
                        var olda = a;
                        var oldb = b;
                        var oldc = c;
                        var oldd = d;
                        var olde = e;

                        for (var j = 0; j < 80; j++) {
                            if (j < 16) w[j] = x[i + j];
                            else w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                            var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                                safe_add(safe_add(e, w[j]), sha1_kt(j)));
                            e = d;
                            d = c;
                            c = bit_rol(b, 30);
                            b = a;
                            a = t;
                        }

                        a = safe_add(a, olda);
                        b = safe_add(b, oldb);
                        c = safe_add(c, oldc);
                        d = safe_add(d, oldd);
                        e = safe_add(e, olde);
                    }
                    return Array(a, b, c, d, e);

                }

                /*
                 * Perform the appropriate triplet combination var for=function the current
                 * iteration
                 */
                var sha1_ft = function(t, b, c, d) {
                    if (t < 20) return (b & c) | ((~b) & d);
                    if (t < 40) return b ^ c ^ d;
                    if (t < 60) return (b & c) | (b & d) | (c & d);
                    return b ^ c ^ d;
                }

                /*
                 * Determine the appropriate additive constant for the current iteration
                 */
                var sha1_kt = function(t) {
                    return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :
                        (t < 60) ? -1894007588 : -899497514;
                }

                /*
                 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
                 * to work around bugs in some JS interpreters.
                 */
                var safe_add = function(x, y) {
                    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
                    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                    return (msw << 16) | (lsw & 0xFFFF);
                }

                /*
                 * Bitwise rotate a 32-bit number to the left.
                 */
                var bit_rol = function(num, cnt) {
                    return (num << cnt) | (num >>> (32 - cnt));
                }

            })(this);

        };
    });;


    /**
     * Created by xiyuan on 15-11-30.
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('buffer', [], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('buffer', [], function(require) {
                return factory();
            });

        } else {
            window.buffer = factory();
        }
    })(function() {
        var exports = {};

        exports.uint8ArrayToBase64 = function(bytes) {
            var binary = '';
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        };

        exports.arrayBufferToBase64 = function(buffer) {
            return exports.uint8ArrayToBase64(new Uint8Array(buffer))
        };

        exports.uint8ArrayToImage = function(bytes, fileName) {
            return 'data:image/' + (fileName || 'png').match(/[^\.\s\\\/]+$/) +
                ';base64,' +
                exports.uint8ArrayToBase64(bytes);
        };

        exports.arrayBufferToImage = function(buffer, fileName) {
            return exports.uint8ArrayToImage(new Uint8Array(buffer), fileName);
        };

        return exports;

    });


    /*!

     JSZip - A Javascript class for generating and reading zip files
     <http://stuartk.com/jszip>

     (c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
     Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

     JSZip uses the library pako released under the MIT license :
     https://github.com/nodeca/pako/blob/master/LICENSE
     */
    (function(e) {
        if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
        else if ("function" == typeof define && define.amd) define('zip', ['net'], e);
        else {
            var f;
            "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.JSZip = e()
        }
    })(function(net) {
        var define, module, exports;
        return (function e(t, n, r) {
                function s(o, u) {
                    if (!n[o]) {
                        if (!t[o]) {
                            var a = typeof require == "function" && require;
                            if (!u && a) return a(o, !0);
                            if (i) return i(o, !0);
                            throw new Error("Cannot find module '" + o + "'")
                        }
                        var f = n[o] = {
                            exports: {}
                        };
                        t[o][0].call(f.exports, function(e) {
                            var n = t[o][1][e];
                            return s(n ? n : e)
                        }, f, f.exports, e, t, n, r)
                    }
                    return n[o].exports
                }

                var i = typeof require == "function" && require;
                for (var o = 0; o < r.length; o++) s(r[o]);
                return s
            })({
                1: [function(_dereq_, module, exports) {
                    'use strict';
                    // private property
                    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


                    // public method for encoding
                    exports.encode = function(input, utf8) {
                        var output = "";
                        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                        var i = 0;

                        while (i < input.length) {

                            chr1 = input.charCodeAt(i++);
                            chr2 = input.charCodeAt(i++);
                            chr3 = input.charCodeAt(i++);

                            enc1 = chr1 >> 2;
                            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                            enc4 = chr3 & 63;

                            if (isNaN(chr2)) {
                                enc3 = enc4 = 64;
                            } else if (isNaN(chr3)) {
                                enc4 = 64;
                            }

                            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

                        }

                        return output;
                    };

                    // public method for decoding
                    exports.decode = function(input, utf8) {
                        var output = "";
                        var chr1, chr2, chr3;
                        var enc1, enc2, enc3, enc4;
                        var i = 0;

                        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                        while (i < input.length) {

                            enc1 = _keyStr.indexOf(input.charAt(i++));
                            enc2 = _keyStr.indexOf(input.charAt(i++));
                            enc3 = _keyStr.indexOf(input.charAt(i++));
                            enc4 = _keyStr.indexOf(input.charAt(i++));

                            chr1 = (enc1 << 2) | (enc2 >> 4);
                            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                            chr3 = ((enc3 & 3) << 6) | enc4;

                            output = output + String.fromCharCode(chr1);

                            if (enc3 != 64) {
                                output = output + String.fromCharCode(chr2);
                            }
                            if (enc4 != 64) {
                                output = output + String.fromCharCode(chr3);
                            }

                        }

                        return output;

                    };

                }, {}],
                2: [function(_dereq_, module, exports) {
                    'use strict';

                    function CompressedObject() {
                        this.compressedSize = 0;
                        this.uncompressedSize = 0;
                        this.crc32 = 0;
                        this.compressionMethod = null;
                        this.compressedContent = null;
                    }

                    CompressedObject.prototype = {
                        /**
                         * Return the decompressed content in an unspecified format.
                         * The format will depend on the decompressor.
                         * @return {Object} the decompressed content.
                         */
                        getContent: function() {
                            return null; // see implementation
                        },
                        /**
                         * Return the compressed content in an unspecified format.
                         * The format will depend on the compressed conten source.
                         * @return {Object} the compressed content.
                         */
                        getCompressedContent: function() {
                            return null; // see implementation
                        }
                    };
                    module.exports = CompressedObject;

                }, {}],
                3: [function(_dereq_, module, exports) {
                    'use strict';
                    exports.STORE = {
                        magic: "\x00\x00",
                        compress: function(content, compressionOptions) {
                            return content; // no compression
                        },
                        uncompress: function(content) {
                            return content; // no compression
                        },
                        compressInputType: null,
                        uncompressInputType: null
                    };
                    exports.DEFLATE = _dereq_('./flate');

                }, {
                    "./flate": 8
                }],
                4: [function(_dereq_, module, exports) {
                    'use strict';

                    var utils = _dereq_('./utils');

                    var table = [
                        0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
                        0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                        0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
                        0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
                        0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
                        0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                        0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
                        0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
                        0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
                        0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
                        0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
                        0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
                        0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
                        0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                        0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
                        0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                        0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
                        0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                        0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
                        0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
                        0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
                        0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
                        0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
                        0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
                        0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
                        0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
                        0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
                        0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
                        0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
                        0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
                        0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
                        0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
                        0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
                        0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
                        0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
                        0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
                        0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
                        0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
                        0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
                        0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
                        0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
                        0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
                        0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
                        0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
                        0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
                        0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
                        0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
                        0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
                        0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
                        0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
                        0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
                        0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
                        0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
                        0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
                        0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
                        0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
                        0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
                        0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
                        0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
                        0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
                        0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
                        0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
                        0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
                        0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
                    ];

                    /**
                     *
                     *  Javascript crc32
                     *  http://www.webtoolkit.info/
                     *
                     */
                    module.exports = function crc32(input, crc) {
                        if (typeof input === "undefined" || !input.length) {
                            return 0;
                        }

                        var isArray = utils.getTypeOf(input) !== "string";

                        if (typeof(crc) == "undefined") {
                            crc = 0;
                        }
                        var x = 0;
                        var y = 0;
                        var b = 0;

                        crc = crc ^ (-1);
                        for (var i = 0, iTop = input.length; i < iTop; i++) {
                            b = isArray ? input[i] : input.charCodeAt(i);
                            y = (crc ^ b) & 0xFF;
                            x = table[y];
                            crc = (crc >>> 8) ^ x;
                        }

                        return crc ^ (-1);
                    };
                    // vim: set shiftwidth=4 softtabstop=4:

                }, {
                    "./utils": 21
                }],
                5: [function(_dereq_, module, exports) {
                    'use strict';
                    var utils = _dereq_('./utils');

                    function DataReader(data) {
                        this.data = null; // type : see implementation
                        this.length = 0;
                        this.index = 0;
                    }

                    DataReader.prototype = {
                        /**
                         * Check that the offset will not go too far.
                         * @param {string} offset the additional offset to check.
                         * @throws {Error} an Error if the offset is out of bounds.
                         */
                        checkOffset: function(offset) {
                            this.checkIndex(this.index + offset);
                        },
                        /**
                         * Check that the specifed index will not be too far.
                         * @param {string} newIndex the index to check.
                         * @throws {Error} an Error if the index is out of bounds.
                         */
                        checkIndex: function(newIndex) {
                            if (this.length < newIndex || newIndex < 0) {
                                throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
                            }
                        },
                        /**
                         * Change the index.
                         * @param {number} newIndex The new index.
                         * @throws {Error} if the new index is out of the data.
                         */
                        setIndex: function(newIndex) {
                            this.checkIndex(newIndex);
                            this.index = newIndex;
                        },
                        /**
                         * Skip the next n bytes.
                         * @param {number} n the number of bytes to skip.
                         * @throws {Error} if the new index is out of the data.
                         */
                        skip: function(n) {
                            this.setIndex(this.index + n);
                        },
                        /**
                         * Get the byte at the specified index.
                         * @param {number} i the index to use.
                         * @return {number} a byte.
                         */
                        byteAt: function(i) {
                            // see implementations
                        },
                        /**
                         * Get the next number with a given byte size.
                         * @param {number} size the number of bytes to read.
                         * @return {number} the corresponding number.
                         */
                        readInt: function(size) {
                            var result = 0,
                                i;
                            this.checkOffset(size);
                            for (i = this.index + size - 1; i >= this.index; i--) {
                                result = (result << 8) + this.byteAt(i);
                            }
                            this.index += size;
                            return result;
                        },
                        /**
                         * Get the next string with a given byte size.
                         * @param {number} size the number of bytes to read.
                         * @return {string} the corresponding string.
                         */
                        readString: function(size) {
                            return utils.transformTo("string", this.readData(size));
                        },
                        /**
                         * Get raw data without conversion, <size> bytes.
                         * @param {number} size the number of bytes to read.
                         * @return {Object} the raw data, implementation specific.
                         */
                        readData: function(size) {
                            // see implementations
                        },
                        /**
                         * Find the last occurence of a zip signature (4 bytes).
                         * @param {string} sig the signature to find.
                         * @return {number} the index of the last occurence, -1 if not found.
                         */
                        lastIndexOfSignature: function(sig) {
                            // see implementations
                        },
                        /**
                         * Get the next date.
                         * @return {Date} the date.
                         */
                        readDate: function() {
                            var dostime = this.readInt(4);
                            return new Date(
                                ((dostime >> 25) & 0x7f) + 1980, // year
                                ((dostime >> 21) & 0x0f) - 1, // month
                                (dostime >> 16) & 0x1f, // day
                                (dostime >> 11) & 0x1f, // hour
                                (dostime >> 5) & 0x3f, // minute
                                (dostime & 0x1f) << 1); // second
                        }
                    };
                    module.exports = DataReader;

                }, {
                    "./utils": 21
                }],
                6: [function(_dereq_, module, exports) {
                    'use strict';
                    exports.base64 = false;
                    exports.binary = false;
                    exports.dir = false;
                    exports.createFolders = false;
                    exports.date = null;
                    exports.compression = null;
                    exports.compressionOptions = null;
                    exports.comment = null;
                    exports.unixPermissions = null;
                    exports.dosPermissions = null;

                }, {}],
                7: [function(_dereq_, module, exports) {
                    'use strict';
                    var utils = _dereq_('./utils');

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.string2binary = function(str) {
                        return utils.string2binary(str);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.string2Uint8Array = function(str) {
                        return utils.transformTo("uint8array", str);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.uint8Array2String = function(array) {
                        return utils.transformTo("string", array);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.string2Blob = function(str) {
                        var buffer = utils.transformTo("arraybuffer", str);
                        return utils.arrayBuffer2Blob(buffer);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.arrayBuffer2Blob = function(buffer) {
                        return utils.arrayBuffer2Blob(buffer);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.transformTo = function(outputType, input) {
                        return utils.transformTo(outputType, input);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.getTypeOf = function(input) {
                        return utils.getTypeOf(input);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.checkSupport = function(type) {
                        return utils.checkSupport(type);
                    };

                    /**
                     * @deprecated
                     * This value will be removed in a future version without replacement.
                     */
                    exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

                    /**
                     * @deprecated
                     * This value will be removed in a future version without replacement.
                     */
                    exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.pretty = function(str) {
                        return utils.pretty(str);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.findCompression = function(compressionMethod) {
                        return utils.findCompression(compressionMethod);
                    };

                    /**
                     * @deprecated
                     * This function will be removed in a future version without replacement.
                     */
                    exports.isRegExp = function(object) {
                        return utils.isRegExp(object);
                    };


                }, {
                    "./utils": 21
                }],
                8: [function(_dereq_, module, exports) {
                    'use strict';
                    var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

                    var pako = _dereq_("pako");
                    exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
                    exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

                    exports.magic = "\x08\x00";
                    exports.compress = function(input, compressionOptions) {
                        return pako.deflateRaw(input, {
                            level: compressionOptions.level || -1 // default compression
                        });
                    };
                    exports.uncompress = function(input) {
                        return pako.inflateRaw(input);
                    };

                }, {
                    "pako": 24
                }],
                9: [function(_dereq_, module, exports) {
                    'use strict';

                    var base64 = _dereq_('./base64');

                    /**
                     Usage:
                     zip = new JSZip();
                     zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
                     zip.folder("images").file("smile.gif", base64Data, {base64: true});
                     zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
                     zip.remove("tempfile");

                     base64zip = zip.generate();

                     **/

                    /**
                     * Representation a of zip file in js
                     * @constructor
                     * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
                     * @param {Object=} options the options for creating this objects (optional).
                     */
                    function JSZip(data, options) {
                        // if this constructor is used without `new`, it adds `new` before itself:
                        if (!(this instanceof JSZip)) return new JSZip(data, options);

                        // object containing the files :
                        // {
                        //   "folder/" : {...},
                        //   "folder/data.txt" : {...}
                        // }
                        this.files = {};

                        this.comment = null;

                        // Where we are in the hierarchy
                        this.root = "";
                        if (data) {
                            this.load(data, options);
                        }
                        this.clone = function() {
                            var newObj = new JSZip();
                            for (var i in this) {
                                if (typeof this[i] !== "function") {
                                    newObj[i] = this[i];
                                }
                            }
                            return newObj;
                        };
                    }

                    JSZip.prototype = _dereq_('./object');
                    JSZip.prototype.load = _dereq_('./load');
                    JSZip.support = _dereq_('./support');
                    JSZip.defaults = _dereq_('./defaults');

                    //记录请求中的压缩包地址
                    var zipStroageCache = {};
                    //加载资源
                    JSZip.load = function(url, callback, progress) {
                        var zipSource,
                            optionFn = {
                                callback: callback,
                                progress: progress
                            };

                        if (zipSource = zipStroageCache[url]) {
                            zipSource.push(optionFn);
                            return;
                        } else {
                            zipSource = zipStroageCache[url] = [optionFn];
                        }

                        //请求预设
                        var preset = function(xhr) {

                            // recent browsers
                            if ("responseType" in xhr) {
                                xhr.responseType = "arraybuffer";
                            }

                            // older browser
                            if (xhr.overrideMimeType) {
                                xhr.overrideMimeType("text/plain; charset=x-user-defined");
                            }

                        };

                        //告诉ajax不需要设置content-type
                        preset.type = true;

                        net.ajax({
                            data: {},
                            url: url,
                            type: 'get',
                            dataType: 'response',
                            preset: preset,
                            complete: function(data) {
                                var status = this.status == 200 || false,
                                    i = ~0,
                                    l = zipSource.length,
                                    v, callback;
                                while (i++, i < l) {
                                    v = zipSource[i];
                                    callback = v.callback;
                                    typeof callback === "function" && callback(status, status && new JSZip(data));
                                }
                                delete zipStroageCache[url];
                            },
                            progress: function(progressEvent) {
                                var i = ~0,
                                    l = zipSource.length,
                                    v, progress;
                                while (i++, i < l) {
                                    v = zipSource[i];
                                    progress = v.progress;
                                    typeof progress === "function" && progress.call(progressEvent, Math.floor(progressEvent.loaded / progressEvent.total * 100));
                                }

                            }

                        })
                    };

                    /*下载保存资源*/
                    JSZip.saveAs = (typeof navigator !== "undefined" &&
                            // IE 10+ (native saveAs)
                            navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
                        // Everyone else
                        || (function(view) {
                            "use strict";
                            // IE <10 is explicitly unsupported
                            if (typeof navigator !== "undefined" &&
                                /MSIE [1-9]\./.test(navigator.userAgent)) {
                                return;
                            }
                            var
                                doc = view.document
                                // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet
                                ,
                                get_URL = function() {
                                    return view.URL || view.webkitURL || view;
                                },
                                URL = view.URL || view.webkitURL || view,
                                save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
                                can_use_save_link = !view.externalHost && "download" in save_link,
                                click = function(node) {
                                    var event = doc.createEvent("MouseEvents");
                                    event.initMouseEvent(
                                        "click", true, false, view, 0, 0, 0, 0, 0, false, false, false, false, 0, null
                                    );
                                    node.dispatchEvent(event);
                                },
                                webkit_req_fs = view.webkitRequestFileSystem,
                                req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem,
                                throw_outside = function(ex) {
                                    (view.setImmediate || view.setTimeout)(function() {
                                        throw ex;
                                    }, 0);
                                },
                                force_saveable_type = "application/octet-stream",
                                fs_min_size = 0,
                                deletion_queue = [],
                                process_deletion_queue = function() {
                                    var i = deletion_queue.length;
                                    while (i--) {
                                        var file = deletion_queue[i];
                                        if (typeof file === "string") { // file is an object URL
                                            URL.revokeObjectURL(file);
                                        } else { // file is a File
                                            file.remove();
                                        }
                                    }
                                    deletion_queue.length = 0; // clear queue
                                },
                                dispatch = function(filesaver, event_types, event) {
                                    event_types = [].concat(event_types);
                                    var i = event_types.length;
                                    while (i--) {
                                        var listener = filesaver["on" + event_types[i]];
                                        if (typeof listener === "function") {
                                            try {
                                                listener.call(filesaver, event || filesaver);
                                            } catch (ex) {
                                                throw_outside(ex);
                                            }
                                        }
                                    }
                                },
                                FileSaver = function(blob, name) {
                                    // First try a.download, then web filesystem, then object URLs
                                    var
                                        filesaver = this,
                                        type = blob.type,
                                        blob_changed = false,
                                        object_url, target_view, get_object_url = function() {
                                            var object_url = get_URL().createObjectURL(blob);
                                            deletion_queue.push(object_url);
                                            return object_url;
                                        },
                                        dispatch_all = function() {
                                            dispatch(filesaver, "writestart progress write writeend".split(" "));
                                        }
                                        // on any filesys errors revert to saving with object URLs
                                        ,
                                        fs_error = function() {
                                            // don't create more object URLs than needed
                                            if (blob_changed || !object_url) {
                                                object_url = get_object_url(blob);
                                            }
                                            if (target_view) {
                                                target_view.location.href = object_url;
                                            } else {
                                                window.open(object_url, "_blank");
                                            }
                                            filesaver.readyState = filesaver.DONE;
                                            dispatch_all();
                                        },
                                        abortable = function(func) {
                                            return function() {
                                                if (filesaver.readyState !== filesaver.DONE) {
                                                    return func.apply(this, arguments);
                                                }
                                            };
                                        },
                                        create_if_not_found = {
                                            create: true,
                                            exclusive: false
                                        },
                                        slice;
                                    filesaver.readyState = filesaver.INIT;
                                    if (!name) {
                                        name = "download";
                                    }
                                    if (can_use_save_link) {
                                        object_url = get_object_url(blob);
                                        // FF for Android has a nasty garbage collection mechanism
                                        // that turns all objects that are not pure javascript into 'deadObject'
                                        // this means `doc` and `save_link` are unusable and need to be recreated
                                        // `view` is usable though:
                                        doc = view.document;
                                        save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a");
                                        save_link.href = object_url;
                                        save_link.download = name;
                                        var event = doc.createEvent("MouseEvents");
                                        event.initMouseEvent(
                                            "click", true, false, view, 0, 0, 0, 0, 0, false, false, false, false, 0, null
                                        );
                                        save_link.dispatchEvent(event);
                                        filesaver.readyState = filesaver.DONE;
                                        dispatch_all();
                                        return;
                                    }
                                    // Object and web filesystem URLs have a problem saving in Google Chrome when
                                    // viewed in a tab, so I force save with application/octet-stream
                                    // http://code.google.com/p/chromium/issues/detail?id=91158
                                    if (view.chrome && type && type !== force_saveable_type) {
                                        slice = blob.slice || blob.webkitSlice;
                                        blob = slice.call(blob, 0, blob.size, force_saveable_type);
                                        blob_changed = true;
                                    }
                                    // Since I can't be sure that the guessed media type will trigger a download
                                    // in WebKit, I append .download to the filename.
                                    // https://bugs.webkit.org/show_bug.cgi?id=65440
                                    if (webkit_req_fs && name !== "download") {
                                        name += ".download";
                                    }
                                    if (type === force_saveable_type || webkit_req_fs) {
                                        target_view = view;
                                    }
                                    if (!req_fs) {
                                        fs_error();
                                        return;
                                    }
                                    fs_min_size += blob.size;
                                    req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                                        fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                                            var save = function() {
                                                dir.getFile(name, create_if_not_found, abortable(function(file) {
                                                    file.createWriter(abortable(function(writer) {
                                                        writer.onwriteend = function(event) {
                                                            target_view.location.href = file.toURL();
                                                            deletion_queue.push(file);
                                                            filesaver.readyState = filesaver.DONE;
                                                            dispatch(filesaver, "writeend", event);
                                                        };
                                                        writer.onerror = function() {
                                                            var error = writer.error;
                                                            if (error.code !== error.ABORT_ERR) {
                                                                fs_error();
                                                            }
                                                        };
                                                        "writestart progress write abort".split(" ").forEach(function(event) {
                                                            writer["on" + event] = filesaver["on" + event];
                                                        });
                                                        writer.write(blob);
                                                        filesaver.abort = function() {
                                                            writer.abort();
                                                            filesaver.readyState = filesaver.DONE;
                                                        };
                                                        filesaver.readyState = filesaver.WRITING;
                                                    }), fs_error);
                                                }), fs_error);
                                            };
                                            dir.getFile(name, {
                                                create: false
                                            }, abortable(function(file) {
                                                // delete file if it already exists
                                                file.remove();
                                                save();
                                            }), abortable(function(ex) {
                                                if (ex.code === ex.NOT_FOUND_ERR) {
                                                    save();
                                                } else {
                                                    fs_error();
                                                }
                                            }));
                                        }), fs_error);
                                    }), fs_error);
                                },
                                FS_proto = FileSaver.prototype,
                                saveAs = function(blob, name) {
                                    return new FileSaver(blob, name);
                                };
                            FS_proto.abort = function() {
                                var filesaver = this;
                                filesaver.readyState = filesaver.DONE;
                                dispatch(filesaver, "abort");
                            };
                            FS_proto.readyState = FS_proto.INIT = 0;
                            FS_proto.WRITING = 1;
                            FS_proto.DONE = 2;

                            FS_proto.error =
                                FS_proto.onwritestart =
                                FS_proto.onprogress =
                                FS_proto.onwrite =
                                FS_proto.onabort =
                                FS_proto.onerror =
                                FS_proto.onwriteend =
                                null;

                            view.addEventListener("unload", process_deletion_queue, false);
                            saveAs.unload = function() {
                                process_deletion_queue();
                                view.removeEventListener("unload", process_deletion_queue, false);
                            };
                            return saveAs;
                        }(
                            typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content
                        ));

                    JSZip.prototype.saveAs = function(name) {
                        var content = this.generate({
                            type: "blob"
                        });
                        JSZip.saveAs(content, name);
                    }

                    /**
                     * @deprecated
                     * This namespace will be removed in a future version without replacement.
                     */
                    JSZip.utils = _dereq_('./deprecatedPublicUtils');

                    JSZip.base64 = {
                        /**
                         * @deprecated
                         * This method will be removed in a future version without replacement.
                         */
                        encode: function(input) {
                            return base64.encode(input);
                        },
                        /**
                         * @deprecated
                         * This method will be removed in a future version without replacement.
                         */
                        decode: function(input) {
                            return base64.decode(input);
                        }
                    };
                    JSZip.compressions = _dereq_('./compressions');
                    module.exports = JSZip;

                }, {
                    "./base64": 1,
                    "./compressions": 3,
                    "./defaults": 6,
                    "./deprecatedPublicUtils": 7,
                    "./load": 10,
                    "./object": 13,
                    "./support": 17
                }],
                10: [function(_dereq_, module, exports) {
                    'use strict';
                    var base64 = _dereq_('./base64');
                    var ZipEntries = _dereq_('./zipEntries');
                    module.exports = function(data, options) {
                        var files, zipEntries, i, input;
                        options = options || {};
                        if (options.base64) {
                            data = base64.decode(data);
                        }

                        zipEntries = new ZipEntries(data, options);
                        files = zipEntries.files;
                        for (i = 0; i < files.length; i++) {
                            input = files[i];
                            this.file(input.fileName, input.decompressed, {
                                binary: true,
                                optimizedBinaryString: true,
                                date: input.date,
                                dir: input.dir,
                                comment: input.fileComment.length ? input.fileComment : null,
                                unixPermissions: input.unixPermissions,
                                dosPermissions: input.dosPermissions,
                                createFolders: options.createFolders
                            });
                        }
                        if (zipEntries.zipComment.length) {
                            this.comment = zipEntries.zipComment;
                        }

                        return this;
                    };

                }, {
                    "./base64": 1,
                    "./zipEntries": 22
                }],
                11: [function(_dereq_, module, exports) {
                    (function(Buffer) {
                        'use strict';
                        module.exports = function(data, encoding) {
                            return new Buffer(data, encoding);
                        };
                        module.exports.test = function(b) {
                            return Buffer.isBuffer(b);
                        };

                    }).call(this, (typeof Buffer !== "undefined" ? Buffer : undefined))
                }, {}],
                12: [function(_dereq_, module, exports) {
                    'use strict';
                    var Uint8ArrayReader = _dereq_('./uint8ArrayReader');

                    function NodeBufferReader(data) {
                        this.data = data;
                        this.length = this.data.length;
                        this.index = 0;
                    }

                    NodeBufferReader.prototype = new Uint8ArrayReader();

                    /**
                     * @see DataReader.readData
                     */
                    NodeBufferReader.prototype.readData = function(size) {
                        this.checkOffset(size);
                        var result = this.data.slice(this.index, this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = NodeBufferReader;

                }, {
                    "./uint8ArrayReader": 18
                }],
                13: [function(_dereq_, module, exports) {
                    'use strict';
                    var support = _dereq_('./support');
                    var utils = _dereq_('./utils');
                    var crc32 = _dereq_('./crc32');
                    var signature = _dereq_('./signature');
                    var defaults = _dereq_('./defaults');
                    var base64 = _dereq_('./base64');
                    var compressions = _dereq_('./compressions');
                    var CompressedObject = _dereq_('./compressedObject');
                    var nodeBuffer = _dereq_('./nodeBuffer');
                    var utf8 = _dereq_('./utf8');
                    var StringWriter = _dereq_('./stringWriter');
                    var Uint8ArrayWriter = _dereq_('./uint8ArrayWriter');

                    /**
                     * Returns the raw data of a ZipObject, decompress the content if necessary.
                     * @param {ZipObject} file the file to use.
                     * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
                     */
                    var getRawData = function(file) {
                        if (file._data instanceof CompressedObject) {
                            file._data = file._data.getContent();
                            file.options.binary = true;
                            file.options.base64 = false;

                            if (utils.getTypeOf(file._data) === "uint8array") {
                                var copy = file._data;
                                // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
                                // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
                                file._data = new Uint8Array(copy.length);
                                // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                                if (copy.length !== 0) {
                                    file._data.set(copy, 0);
                                }
                            }
                        }
                        return file._data;
                    };

                    /**
                     * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
                     * @param {ZipObject} file the file to use.
                     * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
                     */
                    var getBinaryData = function(file) {
                        var result = getRawData(file),
                            type = utils.getTypeOf(result);
                        if (type === "string") {
                            if (!file.options.binary) {
                                // unicode text !
                                // unicode string => binary string is a painful process, check if we can avoid it.
                                if (support.nodebuffer) {
                                    return nodeBuffer(result, "utf-8");
                                }
                            }
                            return file.asBinary();
                        }
                        return result;
                    };

                    /**
                     * Transform this._data into a string.
                     * @param {function} filter a function String -> String, applied if not null on the result.
                     * @return {String} the string representing this._data.
                     */
                    var dataToString = function(asUTF8) {
                        var result = getRawData(this);
                        if (result === null || typeof result === "undefined") {
                            return "";
                        }
                        // if the data is a base64 string, we decode it before checking the encoding !
                        if (this.options.base64) {
                            result = base64.decode(result);
                        }
                        if (asUTF8 && this.options.binary) {
                            // JSZip.prototype.utf8decode supports arrays as input
                            // skip to array => string step, utf8decode will do it.
                            result = out.utf8decode(result);
                        } else {
                            // no utf8 transformation, do the array => string step.
                            result = utils.transformTo("string", result);
                        }

                        if (!asUTF8 && !this.options.binary) {
                            result = utils.transformTo("string", out.utf8encode(result));
                        }
                        return result;
                    };
                    /**
                     * A simple object representing a file in the zip file.
                     * @constructor
                     * @param {string} name the name of the file
                     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
                     * @param {Object} options the options of the file
                     */
                    var ZipObject = function(name, data, options) {
                        this.name = name;
                        this.dir = options.dir;
                        this.date = options.date;
                        this.comment = options.comment;
                        this.unixPermissions = options.unixPermissions;
                        this.dosPermissions = options.dosPermissions;

                        this._data = data;
                        this.options = options;

                        /*
                         * This object contains initial values for dir and date.
                         * With them, we can check if the user changed the deprecated metadata in
                         * `ZipObject#options` or not.
                         */
                        this._initialMetadata = {
                            dir: options.dir,
                            date: options.date
                        };
                    };

                    ZipObject.prototype = {
                        /**
                         * Return the content as UTF8 string.
                         * @return {string} the UTF8 string.
                         */
                        asText: function() {
                            return dataToString.call(this, true);
                        },
                        /**
                         * Returns the binary content.
                         * @return {string} the content as binary.
                         */
                        asBinary: function() {
                            return dataToString.call(this, false);
                        },
                        /**
                         * Returns the content as a nodejs Buffer.
                         * @return {Buffer} the content as a Buffer.
                         */
                        asNodeBuffer: function() {
                            var result = getBinaryData(this);
                            return utils.transformTo("nodebuffer", result);
                        },
                        /**
                         * Returns the content as an Uint8Array.
                         * @return {Uint8Array} the content as an Uint8Array.
                         */
                        asUint8Array: function() {
                            var result = getBinaryData(this);
                            return utils.transformTo("uint8array", result);
                        },
                        /**
                         * Returns the content as an ArrayBuffer.
                         * @return {ArrayBuffer} the content as an ArrayBufer.
                         */
                        asArrayBuffer: function() {
                            return this.asUint8Array().buffer;
                        }
                    };

                    /**
                     * Transform an integer into a string in hexadecimal.
                     * @private
                     * @param {number} dec the number to convert.
                     * @param {number} bytes the number of bytes to generate.
                     * @returns {string} the result.
                     */
                    var decToHex = function(dec, bytes) {
                        var hex = "",
                            i;
                        for (i = 0; i < bytes; i++) {
                            hex += String.fromCharCode(dec & 0xff);
                            dec = dec >>> 8;
                        }
                        return hex;
                    };

                    /**
                     * Merge the objects passed as parameters into a new one.
                     * @private
                     * @param {...Object} var_args All objects to merge.
                     * @return {Object} a new object with the data of the others.
                     */
                    var extend = function() {
                        var result = {},
                            i, attr;
                        for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
                            for (attr in arguments[i]) {
                                if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                                    result[attr] = arguments[i][attr];
                                }
                            }
                        }
                        return result;
                    };

                    /**
                     * Transforms the (incomplete) options from the user into the complete
                     * set of options to create a file.
                     * @private
                     * @param {Object} o the options from the user.
                     * @return {Object} the complete set of options.
                     */
                    var prepareFileAttrs = function(o) {
                        o = o || {};
                        if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
                            o.binary = true;
                        }
                        o = extend(o, defaults);
                        o.date = o.date || new Date();
                        if (o.compression !== null) o.compression = o.compression.toUpperCase();

                        return o;
                    };

                    /**
                     * Add a file in the current folder.
                     * @private
                     * @param {string} name the name of the file
                     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
                     * @param {Object} o the options of the file
                     * @return {Object} the new file.
                     */
                    var fileAdd = function(name, data, o) {
                        // be sure sub folders exist
                        var dataType = utils.getTypeOf(data),
                            parent;

                        o = prepareFileAttrs(o);

                        if (typeof o.unixPermissions === "string") {
                            o.unixPermissions = parseInt(o.unixPermissions, 8);
                        }

                        // UNX_IFDIR  0040000 see zipinfo.c
                        if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
                            o.dir = true;
                        }
                        // Bit 4    Directory
                        if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
                            o.dir = true;
                        }

                        if (o.dir) {
                            name = forceTrailingSlash(name);
                        }

                        if (o.createFolders && (parent = parentFolder(name))) {
                            folderAdd.call(this, parent, true);
                        }

                        if (o.dir || data === null || typeof data === "undefined") {
                            o.base64 = false;
                            o.binary = false;
                            data = null;
                            dataType = null;
                        } else if (dataType === "string") {
                            if (o.binary && !o.base64) {
                                // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
                                if (o.optimizedBinaryString !== true) {
                                    // this is a string, not in a base64 format.
                                    // Be sure that this is a correct "binary string"
                                    data = utils.string2binary(data);
                                }
                            }
                        } else { // arraybuffer, uint8array, ...
                            o.base64 = false;
                            o.binary = true;

                            if (!dataType && !(data instanceof CompressedObject)) {
                                throw new Error("The data of '" + name + "' is in an unsupported format !");
                            }

                            // special case : it's way easier to work with Uint8Array than with ArrayBuffer
                            if (dataType === "arraybuffer") {
                                data = utils.transformTo("uint8array", data);
                            }
                        }

                        var object = new ZipObject(name, data, o);
                        this.files[name] = object;
                        return object;
                    };

                    /**
                     * Find the parent folder of the path.
                     * @private
                     * @param {string} path the path to use
                     * @return {string} the parent folder, or ""
                     */
                    var parentFolder = function(path) {
                        if (path.slice(-1) == '/') {
                            path = path.substring(0, path.length - 1);
                        }
                        var lastSlash = path.lastIndexOf('/');
                        return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
                    };


                    /**
                     * Returns the path with a slash at the end.
                     * @private
                     * @param {String} path the path to check.
                     * @return {String} the path with a trailing slash.
                     */
                    var forceTrailingSlash = function(path) {
                        // Check the name ends with a /
                        if (path.slice(-1) != "/") {
                            path += "/"; // IE doesn't like substr(-1)
                        }
                        return path;
                    };
                    /**
                     * Add a (sub) folder in the current folder.
                     * @private
                     * @param {string} name the folder's name
                     * @param {boolean=} [createFolders] If true, automatically create sub
                     *  folders. Defaults to false.
                     * @return {Object} the new folder.
                     */
                    var folderAdd = function(name, createFolders) {
                        createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

                        name = forceTrailingSlash(name);

                        // Does this folder already exist?
                        if (!this.files[name]) {
                            fileAdd.call(this, name, null, {
                                dir: true,
                                createFolders: createFolders
                            });
                        }
                        return this.files[name];
                    };

                    /**
                     * Generate a JSZip.CompressedObject for a given zipOject.
                     * @param {ZipObject} file the object to read.
                     * @param {JSZip.compression} compression the compression to use.
                     * @param {Object} compressionOptions the options to use when compressing.
                     * @return {JSZip.CompressedObject} the compressed result.
                     */
                    var generateCompressedObjectFrom = function(file, compression, compressionOptions) {
                        var result = new CompressedObject(),
                            content;

                        // the data has not been decompressed, we might reuse things !
                        if (file._data instanceof CompressedObject) {
                            result.uncompressedSize = file._data.uncompressedSize;
                            result.crc32 = file._data.crc32;

                            if (result.uncompressedSize === 0 || file.dir) {
                                compression = compressions['STORE'];
                                result.compressedContent = "";
                                result.crc32 = 0;
                            } else if (file._data.compressionMethod === compression.magic) {
                                result.compressedContent = file._data.getCompressedContent();
                            } else {
                                content = file._data.getContent();
                                // need to decompress / recompress
                                result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
                            }
                        } else {
                            // have uncompressed data
                            content = getBinaryData(file);
                            if (!content || content.length === 0 || file.dir) {
                                compression = compressions['STORE'];
                                content = "";
                            }
                            result.uncompressedSize = content.length;
                            result.crc32 = crc32(content);
                            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
                        }

                        result.compressedSize = result.compressedContent.length;
                        result.compressionMethod = compression.magic;

                        return result;
                    };


                    /**
                     * Generate the UNIX part of the external file attributes.
                     * @param {Object} unixPermissions the unix permissions or null.
                     * @param {Boolean} isDir true if the entry is a directory, false otherwise.
                     * @return {Number} a 32 bit integer.
                     *
                     * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
                     *
                     * TTTTsstrwxrwxrwx0000000000ADVSHR
                     * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
                     *     ^^^_________________________ setuid, setgid, sticky
                     *        ^^^^^^^^^________________ permissions
                     *                 ^^^^^^^^^^______ not used ?
                     *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
                     */
                    var generateUnixExternalFileAttr = function(unixPermissions, isDir) {

                        var result = unixPermissions;
                        if (!unixPermissions) {
                            // I can't use octal values in strict mode, hence the hexa.
                            //  040775 => 0x41fd
                            // 0100664 => 0x81b4
                            result = isDir ? 0x41fd : 0x81b4;
                        }

                        return (result & 0xFFFF) << 16;
                    };

                    /**
                     * Generate the DOS part of the external file attributes.
                     * @param {Object} dosPermissions the dos permissions or null.
                     * @param {Boolean} isDir true if the entry is a directory, false otherwise.
                     * @return {Number} a 32 bit integer.
                     *
                     * Bit 0     Read-Only
                     * Bit 1     Hidden
                     * Bit 2     System
                     * Bit 3     Volume Label
                     * Bit 4     Directory
                     * Bit 5     Archive
                     */
                    var generateDosExternalFileAttr = function(dosPermissions, isDir) {

                        // the dir flag is already set for compatibility

                        return (dosPermissions || 0) & 0x3F;
                    };

                    /**
                     * Generate the various parts used in the construction of the final zip file.
                     * @param {string} name the file name.
                     * @param {ZipObject} file the file content.
                     * @param {JSZip.CompressedObject} compressedObject the compressed object.
                     * @param {number} offset the current offset from the start of the zip file.
                     * @param {String} platform let's pretend we are this platform (change platform dependents fields)
                     * @return {object} the zip parts.
                     */
                    var generateZipParts = function(name, file, compressedObject, offset, platform) {
                        var data = compressedObject.compressedContent,
                            utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
                            comment = file.comment || "",
                            utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
                            useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
                            useUTF8ForComment = utfEncodedComment.length !== comment.length,
                            o = file.options,
                            dosTime,
                            dosDate,
                            extraFields = "",
                            unicodePathExtraField = "",
                            unicodeCommentExtraField = "",
                            dir, date;


                        // handle the deprecated options.dir
                        if (file._initialMetadata.dir !== file.dir) {
                            dir = file.dir;
                        } else {
                            dir = o.dir;
                        }

                        // handle the deprecated options.date
                        if (file._initialMetadata.date !== file.date) {
                            date = file.date;
                        } else {
                            date = o.date;
                        }

                        var extFileAttr = 0;
                        var versionMadeBy = 0;
                        if (dir) {
                            // dos or unix, we set the dos dir flag
                            extFileAttr |= 0x00010;
                        }
                        if (platform === "UNIX") {
                            versionMadeBy = 0x031E; // UNIX, version 3.0
                            extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
                        } else { // DOS or other, fallback to DOS
                            versionMadeBy = 0x0014; // DOS, version 2.0
                            extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
                        }

                        // date
                        // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
                        // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
                        // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

                        dosTime = date.getHours();
                        dosTime = dosTime << 6;
                        dosTime = dosTime | date.getMinutes();
                        dosTime = dosTime << 5;
                        dosTime = dosTime | date.getSeconds() / 2;

                        dosDate = date.getFullYear() - 1980;
                        dosDate = dosDate << 4;
                        dosDate = dosDate | (date.getMonth() + 1);
                        dosDate = dosDate << 5;
                        dosDate = dosDate | date.getDate();

                        if (useUTF8ForFileName) {
                            // set the unicode path extra field. unzip needs at least one extra
                            // field to correctly handle unicode path, so using the path is as good
                            // as any other information. This could improve the situation with
                            // other archive managers too.
                            // This field is usually used without the utf8 flag, with a non
                            // unicode path in the header (winrar, winzip). This helps (a bit)
                            // with the messy Windows' default compressed folders feature but
                            // breaks on p7zip which doesn't seek the unicode path extra field.
                            // So for now, UTF-8 everywhere !
                            unicodePathExtraField =
                                // Version
                                decToHex(1, 1) +
                                // NameCRC32
                                decToHex(crc32(utfEncodedFileName), 4) +
                                // UnicodeName
                                utfEncodedFileName;

                            extraFields +=
                                // Info-ZIP Unicode Path Extra Field
                                "\x75\x70" +
                                // size
                                decToHex(unicodePathExtraField.length, 2) +
                                // content
                                unicodePathExtraField;
                        }

                        if (useUTF8ForComment) {

                            unicodeCommentExtraField =
                                // Version
                                decToHex(1, 1) +
                                // CommentCRC32
                                decToHex(this.crc32(utfEncodedComment), 4) +
                                // UnicodeName
                                utfEncodedComment;

                            extraFields +=
                                // Info-ZIP Unicode Path Extra Field
                                "\x75\x63" +
                                // size
                                decToHex(unicodeCommentExtraField.length, 2) +
                                // content
                                unicodeCommentExtraField;
                        }

                        var header = "";

                        // version needed to extract
                        header += "\x0A\x00";
                        // general purpose bit flag
                        // set bit 11 if utf8
                        header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
                        // compression method
                        header += compressedObject.compressionMethod;
                        // last mod file time
                        header += decToHex(dosTime, 2);
                        // last mod file date
                        header += decToHex(dosDate, 2);
                        // crc-32
                        header += decToHex(compressedObject.crc32, 4);
                        // compressed size
                        header += decToHex(compressedObject.compressedSize, 4);
                        // uncompressed size
                        header += decToHex(compressedObject.uncompressedSize, 4);
                        // file name length
                        header += decToHex(utfEncodedFileName.length, 2);
                        // extra field length
                        header += decToHex(extraFields.length, 2);


                        var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

                        var dirRecord = signature.CENTRAL_FILE_HEADER +
                            // version made by (00: DOS)
                            decToHex(versionMadeBy, 2) +
                            // file header (common to file and central directory)
                            header +
                            // file comment length
                            decToHex(utfEncodedComment.length, 2) +
                            // disk number start
                            "\x00\x00" +
                            // internal file attributes TODO
                            "\x00\x00" +
                            // external file attributes
                            decToHex(extFileAttr, 4) +
                            // relative offset of local header
                            decToHex(offset, 4) +
                            // file name
                            utfEncodedFileName +
                            // extra field
                            extraFields +
                            // file comment
                            utfEncodedComment;

                        return {
                            fileRecord: fileRecord,
                            dirRecord: dirRecord,
                            compressedObject: compressedObject
                        };
                    };


                    // return the actual prototype of JSZip
                    var out = {
                        /**
                         * Read an existing zip and merge the data in the current JSZip object.
                         * The implementation is in jszip-load.js, don't forget to include it.
                         * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
                         * @param {Object} options Options for loading the stream.
                         *  options.base64 : is the stream in base64 ? default : false
                         * @return {JSZip} the current JSZip object
                         */
                        load: function(stream, options) {
                            throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
                        },

                        /**
                         * Filter nested files/folders with the specified function.
                         * @param {Function} search the predicate to use :
                         * function (relativePath, file) {...}
                         * It takes 2 arguments : the relative path and the file.
                         * @return {Array} An array of matching elements.
                         */
                        filter: function(search) {
                            var result = [],
                                filename, relativePath, file, fileClone;
                            for (filename in this.files) {
                                if (!this.files.hasOwnProperty(filename)) {
                                    continue;
                                }
                                file = this.files[filename];
                                // return a new object, don't let the user mess with our internal objects :)
                                fileClone = new ZipObject(file.name, file._data, extend(file.options));
                                relativePath = filename.slice(this.root.length, filename.length);
                                if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
                                    search(relativePath, fileClone)) { // and the file matches the function
                                    result.push(fileClone);
                                }
                            }
                            return result;
                        },

                        /**
                         * Add a file to the zip file, or search a file.
                         * @param   {string|RegExp} name The name of the file to add (if data is defined),
                         * the name of the file to find (if no data) or a regex to match files.
                         * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
                         * @param   {Object} o     File options
                         * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
                         * a file (when searching by string) or an array of files (when searching by regex).
                         */
                        file: function(name, data, o) {
                            if (arguments.length === 1) {
                                if (utils.isRegExp(name)) {
                                    var regexp = name;
                                    return this.filter(function(relativePath, file) {
                                        return !file.dir && regexp.test(relativePath);
                                    });
                                } else { // text
                                    return this.filter(function(relativePath, file) {
                                        return !file.dir && relativePath === name;
                                    })[0] || null;
                                }
                            } else { // more than one argument : we have data !
                                name = this.root + name;
                                fileAdd.call(this, name, data, o);
                            }
                            return this;
                        },

                        /**
                         * Add a directory to the zip file, or search.
                         * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
                         * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
                         */
                        folder: function(arg) {
                            if (!arg) {
                                return this;
                            }

                            if (utils.isRegExp(arg)) {
                                return this.filter(function(relativePath, file) {
                                    return file.dir && arg.test(relativePath);
                                });
                            }

                            // else, name is a new folder
                            var name = this.root + arg;
                            var newFolder = folderAdd.call(this, name);

                            // Allow chaining by returning a new object with this folder as the root
                            var ret = this.clone();
                            ret.root = newFolder.name;
                            return ret;
                        },

                        /**
                         * Delete a file, or a directory and all sub-files, from the zip
                         * @param {string} name the name of the file to delete
                         * @return {JSZip} this JSZip object
                         */
                        remove: function(name) {
                            name = this.root + name;
                            var file = this.files[name];
                            if (!file) {
                                // Look for any folders
                                if (name.slice(-1) != "/") {
                                    name += "/";
                                }
                                file = this.files[name];
                            }

                            if (file && !file.dir) {
                                // file
                                delete this.files[name];
                            } else {
                                // maybe a folder, delete recursively
                                var kids = this.filter(function(relativePath, file) {
                                    return file.name.slice(0, name.length) === name;
                                });
                                for (var i = 0; i < kids.length; i++) {
                                    delete this.files[kids[i].name];
                                }
                            }

                            return this;
                        },

                        /**
                         * Generate the complete zip file
                         * @param {Object} options the options to generate the zip file :
                         * - base64, (deprecated, use type instead) true to generate base64.
                         * - compression, "STORE" by default.
                         * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
                         * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
                         */
                        generate: function(options) {
                            options = extend(options || {}, {
                                base64: true,
                                compression: "STORE",
                                compressionOptions: null,
                                type: "base64",
                                platform: "DOS",
                                comment: null,
                                mimeType: 'application/zip'
                            });

                            utils.checkSupport(options.type);

                            // accept nodejs `process.platform`
                            if (
                                options.platform === 'darwin' ||
                                options.platform === 'freebsd' ||
                                options.platform === 'linux' ||
                                options.platform === 'sunos'
                            ) {
                                options.platform = "UNIX";
                            }
                            if (options.platform === 'win32') {
                                options.platform = "DOS";
                            }

                            var zipData = [],
                                localDirLength = 0,
                                centralDirLength = 0,
                                writer, i,
                                utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

                            // first, generate all the zip parts.
                            for (var name in this.files) {
                                if (!this.files.hasOwnProperty(name)) {
                                    continue;
                                }
                                var file = this.files[name];

                                var compressionName = file.options.compression || options.compression.toUpperCase();
                                var compression = compressions[compressionName];
                                if (!compression) {
                                    throw new Error(compressionName + " is not a valid compression method !");
                                }
                                var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};

                                var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);

                                var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);
                                localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
                                centralDirLength += zipPart.dirRecord.length;
                                zipData.push(zipPart);
                            }

                            var dirEnd = "";

                            // end of central dir signature
                            dirEnd = signature.CENTRAL_DIRECTORY_END +
                                // number of this disk
                                "\x00\x00" +
                                // number of the disk with the start of the central directory
                                "\x00\x00" +
                                // total number of entries in the central directory on this disk
                                decToHex(zipData.length, 2) +
                                // total number of entries in the central directory
                                decToHex(zipData.length, 2) +
                                // size of the central directory   4 bytes
                                decToHex(centralDirLength, 4) +
                                // offset of start of central directory with respect to the starting disk number
                                decToHex(localDirLength, 4) +
                                // .ZIP file comment length
                                decToHex(utfEncodedComment.length, 2) +
                                // .ZIP file comment
                                utfEncodedComment;


                            // we have all the parts (and the total length)
                            // time to create a writer !
                            var typeName = options.type.toLowerCase();
                            if (typeName === "uint8array" || typeName === "arraybuffer" || typeName === "blob" || typeName === "nodebuffer") {
                                writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
                            } else {
                                writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
                            }

                            for (i = 0; i < zipData.length; i++) {
                                writer.append(zipData[i].fileRecord);
                                writer.append(zipData[i].compressedObject.compressedContent);
                            }
                            for (i = 0; i < zipData.length; i++) {
                                writer.append(zipData[i].dirRecord);
                            }

                            writer.append(dirEnd);

                            var zip = writer.finalize();


                            switch (options.type.toLowerCase()) {
                                // case "zip is an Uint8Array"
                                case "uint8array":
                                case "arraybuffer":
                                case "nodebuffer":
                                    return utils.transformTo(options.type.toLowerCase(), zip);
                                case "blob":
                                    return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options.mimeType);
                                    // case "zip is a string"
                                case "base64":
                                    return (options.base64) ? base64.encode(zip) : zip;
                                default: // case "string" :
                                    return zip;
                            }

                        },

                        /**
                         * @deprecated
                         * This method will be removed in a future version without replacement.
                         */
                        crc32: function(input, crc) {
                            return crc32(input, crc);
                        },

                        /**
                         * @deprecated
                         * This method will be removed in a future version without replacement.
                         */
                        utf8encode: function(string) {
                            return utils.transformTo("string", utf8.utf8encode(string));
                        },

                        /**
                         * @deprecated
                         * This method will be removed in a future version without replacement.
                         */
                        utf8decode: function(input) {
                            return utf8.utf8decode(input);
                        }
                    };
                    module.exports = out;

                }, {
                    "./base64": 1,
                    "./compressedObject": 2,
                    "./compressions": 3,
                    "./crc32": 4,
                    "./defaults": 6,
                    "./nodeBuffer": 11,
                    "./signature": 14,
                    "./stringWriter": 16,
                    "./support": 17,
                    "./uint8ArrayWriter": 19,
                    "./utf8": 20,
                    "./utils": 21
                }],
                14: [function(_dereq_, module, exports) {
                    'use strict';
                    exports.LOCAL_FILE_HEADER = "PK\x03\x04";
                    exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
                    exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
                    exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
                    exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
                    exports.DATA_DESCRIPTOR = "PK\x07\x08";

                }, {}],
                15: [function(_dereq_, module, exports) {
                    'use strict';
                    var DataReader = _dereq_('./dataReader');
                    var utils = _dereq_('./utils');

                    function StringReader(data, optimizedBinaryString) {
                        this.data = data;
                        if (!optimizedBinaryString) {
                            this.data = utils.string2binary(this.data);
                        }
                        this.length = this.data.length;
                        this.index = 0;
                    }

                    StringReader.prototype = new DataReader();
                    /**
                     * @see DataReader.byteAt
                     */
                    StringReader.prototype.byteAt = function(i) {
                        return this.data.charCodeAt(i);
                    };
                    /**
                     * @see DataReader.lastIndexOfSignature
                     */
                    StringReader.prototype.lastIndexOfSignature = function(sig) {
                        return this.data.lastIndexOf(sig);
                    };
                    /**
                     * @see DataReader.readData
                     */
                    StringReader.prototype.readData = function(size) {
                        this.checkOffset(size);
                        // this will work because the constructor applied the "& 0xff" mask.
                        var result = this.data.slice(this.index, this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = StringReader;

                }, {
                    "./dataReader": 5,
                    "./utils": 21
                }],
                16: [function(_dereq_, module, exports) {
                    'use strict';

                    var utils = _dereq_('./utils');

                    /**
                     * An object to write any content to a string.
                     * @constructor
                     */
                    var StringWriter = function() {
                        this.data = [];
                    };
                    StringWriter.prototype = {
                        /**
                         * Append any content to the current string.
                         * @param {Object} input the content to add.
                         */
                        append: function(input) {
                            input = utils.transformTo("string", input);
                            this.data.push(input);
                        },
                        /**
                         * Finalize the construction an return the result.
                         * @return {string} the generated string.
                         */
                        finalize: function() {
                            return this.data.join("");
                        }
                    };

                    module.exports = StringWriter;

                }, {
                    "./utils": 21
                }],
                17: [function(_dereq_, module, exports) {
                    (function(Buffer) {
                        'use strict';
                        exports.base64 = true;
                        exports.array = true;
                        exports.string = true;
                        exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
                        // contains true if JSZip can read/generate nodejs Buffer, false otherwise.
                        // Browserify will provide a Buffer implementation for browsers, which is
                        // an augmented Uint8Array (i.e., can be used as either Buffer or U8).
                        exports.nodebuffer = typeof Buffer !== "undefined";
                        // contains true if JSZip can read/generate Uint8Array, false otherwise.
                        exports.uint8array = typeof Uint8Array !== "undefined";

                        if (typeof ArrayBuffer === "undefined") {
                            exports.blob = false;
                        } else {
                            var buffer = new ArrayBuffer(0);
                            try {
                                exports.blob = new Blob([buffer], {
                                    type: "application/zip"
                                }).size === 0;
                            } catch (e) {
                                try {
                                    var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                                    var builder = new Builder();
                                    builder.append(buffer);
                                    exports.blob = builder.getBlob('application/zip').size === 0;
                                } catch (e) {
                                    exports.blob = false;
                                }
                            }
                        }

                    }).call(this, (typeof Buffer !== "undefined" ? Buffer : undefined))
                }, {}],
                18: [function(_dereq_, module, exports) {
                    'use strict';
                    var DataReader = _dereq_('./dataReader');

                    function Uint8ArrayReader(data) {
                        if (data) {
                            this.data = data;
                            this.length = this.data.length;
                            this.index = 0;
                        }
                    }

                    Uint8ArrayReader.prototype = new DataReader();
                    /**
                     * @see DataReader.byteAt
                     */
                    Uint8ArrayReader.prototype.byteAt = function(i) {
                        return this.data[i];
                    };
                    /**
                     * @see DataReader.lastIndexOfSignature
                     */
                    Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
                        var sig0 = sig.charCodeAt(0),
                            sig1 = sig.charCodeAt(1),
                            sig2 = sig.charCodeAt(2),
                            sig3 = sig.charCodeAt(3);
                        for (var i = this.length - 4; i >= 0; --i) {
                            if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
                                return i;
                            }
                        }

                        return -1;
                    };
                    /**
                     * @see DataReader.readData
                     */
                    Uint8ArrayReader.prototype.readData = function(size) {
                        this.checkOffset(size);
                        if (size === 0) {
                            // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
                            return new Uint8Array(0);
                        }
                        var result = this.data.subarray(this.index, this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = Uint8ArrayReader;

                }, {
                    "./dataReader": 5
                }],
                19: [function(_dereq_, module, exports) {
                    'use strict';

                    var utils = _dereq_('./utils');

                    /**
                     * An object to write any content to an Uint8Array.
                     * @constructor
                     * @param {number} length The length of the array.
                     */
                    var Uint8ArrayWriter = function(length) {
                        this.data = new Uint8Array(length);
                        this.index = 0;
                    };
                    Uint8ArrayWriter.prototype = {
                        /**
                         * Append any content to the current array.
                         * @param {Object} input the content to add.
                         */
                        append: function(input) {
                            if (input.length !== 0) {
                                // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                                input = utils.transformTo("uint8array", input);
                                this.data.set(input, this.index);
                                this.index += input.length;
                            }
                        },
                        /**
                         * Finalize the construction an return the result.
                         * @return {Uint8Array} the generated array.
                         */
                        finalize: function() {
                            return this.data;
                        }
                    };

                    module.exports = Uint8ArrayWriter;

                }, {
                    "./utils": 21
                }],
                20: [function(_dereq_, module, exports) {
                    'use strict';

                    var utils = _dereq_('./utils');
                    var support = _dereq_('./support');
                    var nodeBuffer = _dereq_('./nodeBuffer');

                    /**
                     * The following functions come from pako, from pako/lib/utils/strings
                     * released under the MIT license, see pako https://github.com/nodeca/pako/
                     */

                    // Table with utf8 lengths (calculated by first byte of sequence)
                    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
                    // because max possible codepoint is 0x10ffff
                    var _utf8len = new Array(256);
                    for (var i = 0; i < 256; i++) {
                        _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
                    }
                    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start

                    // convert string to array (typed, when possible)
                    var string2buf = function(str) {
                        var buf, c, c2, m_pos, i, str_len = str.length,
                            buf_len = 0;

                        // count binary size
                        for (m_pos = 0; m_pos < str_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 0xfc00) === 0xdc00) {
                                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                                    m_pos++;
                                }
                            }
                            buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
                        }

                        // allocate buffer
                        if (support.uint8array) {
                            buf = new Uint8Array(buf_len);
                        } else {
                            buf = new Array(buf_len);
                        }

                        // convert
                        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 0xfc00) === 0xdc00) {
                                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                                    m_pos++;
                                }
                            }
                            if (c < 0x80) {
                                /* one byte */
                                buf[i++] = c;
                            } else if (c < 0x800) {
                                /* two bytes */
                                buf[i++] = 0xC0 | (c >>> 6);
                                buf[i++] = 0x80 | (c & 0x3f);
                            } else if (c < 0x10000) {
                                /* three bytes */
                                buf[i++] = 0xE0 | (c >>> 12);
                                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                                buf[i++] = 0x80 | (c & 0x3f);
                            } else {
                                /* four bytes */
                                buf[i++] = 0xf0 | (c >>> 18);
                                buf[i++] = 0x80 | (c >>> 12 & 0x3f);
                                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                                buf[i++] = 0x80 | (c & 0x3f);
                            }
                        }

                        return buf;
                    };

                    // Calculate max possible position in utf8 buffer,
                    // that will not break sequence. If that's not possible
                    // - (very small limits) return max size as is.
                    //
                    // buf[] - utf8 bytes array
                    // max   - length limit (mandatory);
                    var utf8border = function(buf, max) {
                        var pos;

                        max = max || buf.length;
                        if (max > buf.length) {
                            max = buf.length;
                        }

                        // go back from last position, until start of sequence found
                        pos = max - 1;
                        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
                            pos--;
                        }

                        // Fuckup - very small and broken sequence,
                        // return max, because we should return something anyway.
                        if (pos < 0) {
                            return max;
                        }

                        // If we came to start of buffer - that means vuffer is too small,
                        // return max too.
                        if (pos === 0) {
                            return max;
                        }

                        return (pos + _utf8len[buf[pos]] > max) ? pos : max;
                    };

                    // convert array to string
                    var buf2string = function(buf) {
                        var str, i, out, c, c_len;
                        var len = buf.length;

                        // Reserve max possible length (2 words per char)
                        // NB: by unknown reasons, Array is significantly faster for
                        //     String.fromCharCode.apply than Uint16Array.
                        var utf16buf = new Array(len * 2);

                        for (out = 0, i = 0; i < len;) {
                            c = buf[i++];
                            // quick process ascii
                            if (c < 0x80) {
                                utf16buf[out++] = c;
                                continue;
                            }

                            c_len = _utf8len[c];
                            // skip 5 & 6 byte codes
                            if (c_len > 4) {
                                utf16buf[out++] = 0xfffd;
                                i += c_len - 1;
                                continue;
                            }

                            // apply mask on first byte
                            c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
                            // join the rest
                            while (c_len > 1 && i < len) {
                                c = (c << 6) | (buf[i++] & 0x3f);
                                c_len--;
                            }

                            // terminated by end of string?
                            if (c_len > 1) {
                                utf16buf[out++] = 0xfffd;
                                continue;
                            }

                            if (c < 0x10000) {
                                utf16buf[out++] = c;
                            } else {
                                c -= 0x10000;
                                utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
                                utf16buf[out++] = 0xdc00 | (c & 0x3ff);
                            }
                        }

                        // shrinkBuf(utf16buf, out)
                        if (utf16buf.length !== out) {
                            if (utf16buf.subarray) {
                                utf16buf = utf16buf.subarray(0, out);
                            } else {
                                utf16buf.length = out;
                            }
                        }

                        // return String.fromCharCode.apply(null, utf16buf);
                        return utils.applyFromCharCode(utf16buf);
                    };


                    // That's all for the pako functions.


                    /**
                     * Transform a javascript string into an array (typed if possible) of bytes,
                     * UTF-8 encoded.
                     * @param {String} str the string to encode
                     * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
                     */
                    exports.utf8encode = function utf8encode(str) {
                        if (support.nodebuffer) {
                            return nodeBuffer(str, "utf-8");
                        }

                        return string2buf(str);
                    };


                    /**
                     * Transform a bytes array (or a representation) representing an UTF-8 encoded
                     * string into a javascript string.
                     * @param {Array|Uint8Array|Buffer} buf the data de decode
                     * @return {String} the decoded string.
                     */
                    exports.utf8decode = function utf8decode(buf) {
                        if (support.nodebuffer) {
                            return utils.transformTo("nodebuffer", buf).toString("utf-8");
                        }

                        buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

                        // return buf2string(buf);
                        // Chrome prefers to work with "small" chunks of data
                        // for the method buf2string.
                        // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
                        var result = [],
                            k = 0,
                            len = buf.length,
                            chunk = 65536;
                        while (k < len) {
                            var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
                            if (support.uint8array) {
                                result.push(buf2string(buf.subarray(k, nextBoundary)));
                            } else {
                                result.push(buf2string(buf.slice(k, nextBoundary)));
                            }
                            k = nextBoundary;
                        }
                        return result.join("");

                    };
                    // vim: set shiftwidth=4 softtabstop=4:

                }, {
                    "./nodeBuffer": 11,
                    "./support": 17,
                    "./utils": 21
                }],
                21: [function(_dereq_, module, exports) {
                    'use strict';
                    var support = _dereq_('./support');
                    var compressions = _dereq_('./compressions');
                    var nodeBuffer = _dereq_('./nodeBuffer');
                    /**
                     * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
                     * @param {string} str the string to transform.
                     * @return {String} the binary string.
                     */
                    exports.string2binary = function(str) {
                        var result = "";
                        for (var i = 0; i < str.length; i++) {
                            result += String.fromCharCode(str.charCodeAt(i) & 0xff);
                        }
                        return result;
                    };
                    exports.arrayBuffer2Blob = function(buffer, mimeType) {
                        exports.checkSupport("blob");
                        mimeType = mimeType || 'application/zip';

                        try {
                            // Blob constructor
                            return new Blob([buffer], {
                                type: mimeType
                            });
                        } catch (e) {

                            try {
                                // deprecated, browser only, old way
                                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                                var builder = new Builder();
                                builder.append(buffer);
                                return builder.getBlob(mimeType);
                            } catch (e) {

                                // well, fuck ?!
                                throw new Error("Bug : can't construct the Blob.");
                            }
                        }


                    };
                    /**
                     * The identity function.
                     * @param {Object} input the input.
                     * @return {Object} the same input.
                     */
                    function identity(input) {
                        return input;
                    }

                    /**
                     * Fill in an array with a string.
                     * @param {String} str the string to use.
                     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
                     * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
                     */
                    function stringToArrayLike(str, array) {
                        for (var i = 0; i < str.length; ++i) {
                            array[i] = str.charCodeAt(i) & 0xFF;
                        }
                        return array;
                    }

                    /**
                     * Transform an array-like object to a string.
                     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
                     * @return {String} the result.
                     */
                    function arrayLikeToString(array) {
                        // Performances notes :
                        // --------------------
                        // String.fromCharCode.apply(null, array) is the fastest, see
                        // see http://jsperf.com/converting-a-uint8array-to-a-string/2
                        // but the stack is limited (and we can get huge arrays !).
                        //
                        // result += String.fromCharCode(array[i]); generate too many strings !
                        //
                        // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
                        var chunk = 65536;
                        var result = [],
                            len = array.length,
                            type = exports.getTypeOf(array),
                            k = 0,
                            canUseApply = true;
                        try {
                            switch (type) {
                                case "uint8array":
                                    String.fromCharCode.apply(null, new Uint8Array(0));
                                    break;
                                case "nodebuffer":
                                    String.fromCharCode.apply(null, nodeBuffer(0));
                                    break;
                            }
                        } catch (e) {
                            canUseApply = false;
                        }

                        // no apply : slow and painful algorithm
                        // default browser on android 4.*
                        if (!canUseApply) {
                            var resultStr = "";
                            for (var i = 0; i < array.length; i++) {
                                resultStr += String.fromCharCode(array[i]);
                            }
                            return resultStr;
                        }
                        while (k < len && chunk > 1) {
                            try {
                                if (type === "array" || type === "nodebuffer") {
                                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
                                } else {
                                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
                                }
                                k += chunk;
                            } catch (e) {
                                chunk = Math.floor(chunk / 2);
                            }
                        }
                        return result.join("");
                    }

                    exports.applyFromCharCode = arrayLikeToString;


                    /**
                     * Copy the data from an array-like to an other array-like.
                     * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
                     * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
                     * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
                     */
                    function arrayLikeToArrayLike(arrayFrom, arrayTo) {
                        for (var i = 0; i < arrayFrom.length; i++) {
                            arrayTo[i] = arrayFrom[i];
                        }
                        return arrayTo;
                    }

                    // a matrix containing functions to transform everything into everything.
                    var transform = {};

                    // string to ?
                    transform["string"] = {
                        "string": identity,
                        "array": function(input) {
                            return stringToArrayLike(input, new Array(input.length));
                        },
                        "arraybuffer": function(input) {
                            return transform["string"]["uint8array"](input).buffer;
                        },
                        "uint8array": function(input) {
                            return stringToArrayLike(input, new Uint8Array(input.length));
                        },
                        "nodebuffer": function(input) {
                            return stringToArrayLike(input, nodeBuffer(input.length));
                        }
                    };

                    // array to ?
                    transform["array"] = {
                        "string": arrayLikeToString,
                        "array": identity,
                        "arraybuffer": function(input) {
                            return (new Uint8Array(input)).buffer;
                        },
                        "uint8array": function(input) {
                            return new Uint8Array(input);
                        },
                        "nodebuffer": function(input) {
                            return nodeBuffer(input);
                        }
                    };

                    // arraybuffer to ?
                    transform["arraybuffer"] = {
                        "string": function(input) {
                            return arrayLikeToString(new Uint8Array(input));
                        },
                        "array": function(input) {
                            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
                        },
                        "arraybuffer": identity,
                        "uint8array": function(input) {
                            return new Uint8Array(input);
                        },
                        "nodebuffer": function(input) {
                            return nodeBuffer(new Uint8Array(input));
                        }
                    };

                    // uint8array to ?
                    transform["uint8array"] = {
                        "string": arrayLikeToString,
                        "array": function(input) {
                            return arrayLikeToArrayLike(input, new Array(input.length));
                        },
                        "arraybuffer": function(input) {
                            return input.buffer;
                        },
                        "uint8array": identity,
                        "nodebuffer": function(input) {
                            return nodeBuffer(input);
                        }
                    };

                    // nodebuffer to ?
                    transform["nodebuffer"] = {
                        "string": arrayLikeToString,
                        "array": function(input) {
                            return arrayLikeToArrayLike(input, new Array(input.length));
                        },
                        "arraybuffer": function(input) {
                            return transform["nodebuffer"]["uint8array"](input).buffer;
                        },
                        "uint8array": function(input) {
                            return arrayLikeToArrayLike(input, new Uint8Array(input.length));
                        },
                        "nodebuffer": identity
                    };

                    /**
                     * Transform an input into any type.
                     * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
                     * If no output type is specified, the unmodified input will be returned.
                     * @param {String} outputType the output type.
                     * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
                     * @throws {Error} an Error if the browser doesn't support the requested output type.
                     */
                    exports.transformTo = function(outputType, input) {
                        if (!input) {
                            // undefined, null, etc
                            // an empty string won't harm.
                            input = "";
                        }
                        if (!outputType) {
                            return input;
                        }
                        exports.checkSupport(outputType);
                        var inputType = exports.getTypeOf(input);
                        var result = transform[inputType][outputType](input);
                        return result;
                    };

                    /**
                     * Return the type of the input.
                     * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
                     * @param {Object} input the input to identify.
                     * @return {String} the (lowercase) type of the input.
                     */
                    exports.getTypeOf = function(input) {
                        if (typeof input === "string") {
                            return "string";
                        }
                        if (Object.prototype.toString.call(input) === "[object Array]") {
                            return "array";
                        }
                        if (support.nodebuffer && nodeBuffer.test(input)) {
                            return "nodebuffer";
                        }
                        if (support.uint8array && input instanceof Uint8Array) {
                            return "uint8array";
                        }
                        if (support.arraybuffer && input instanceof ArrayBuffer) {
                            return "arraybuffer";
                        }
                    };

                    /**
                     * Throw an exception if the type is not supported.
                     * @param {String} type the type to check.
                     * @throws {Error} an Error if the browser doesn't support the requested type.
                     */
                    exports.checkSupport = function(type) {
                        var supported = support[type.toLowerCase()];
                        if (!supported) {
                            throw new Error(type + " is not supported by this browser");
                        }
                    };
                    exports.MAX_VALUE_16BITS = 65535;
                    exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

                    /**
                     * Prettify a string read as binary.
                     * @param {string} str the string to prettify.
                     * @return {string} a pretty string.
                     */
                    exports.pretty = function(str) {
                        var res = '',
                            code, i;
                        for (i = 0; i < (str || "").length; i++) {
                            code = str.charCodeAt(i);
                            res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
                        }
                        return res;
                    };

                    /**
                     * Find a compression registered in JSZip.
                     * @param {string} compressionMethod the method magic to find.
                     * @return {Object|null} the JSZip compression object, null if none found.
                     */
                    exports.findCompression = function(compressionMethod) {
                        for (var method in compressions) {
                            if (!compressions.hasOwnProperty(method)) {
                                continue;
                            }
                            if (compressions[method].magic === compressionMethod) {
                                return compressions[method];
                            }
                        }
                        return null;
                    };
                    /**
                     * Cross-window, cross-Node-context regular expression detection
                     * @param  {Object}  object Anything
                     * @return {Boolean}        true if the object is a regular expression,
                     * false otherwise
                     */
                    exports.isRegExp = function(object) {
                        return Object.prototype.toString.call(object) === "[object RegExp]";
                    };


                }, {
                    "./compressions": 3,
                    "./nodeBuffer": 11,
                    "./support": 17
                }],
                22: [function(_dereq_, module, exports) {
                    'use strict';
                    var StringReader = _dereq_('./stringReader');
                    var NodeBufferReader = _dereq_('./nodeBufferReader');
                    var Uint8ArrayReader = _dereq_('./uint8ArrayReader');
                    var utils = _dereq_('./utils');
                    var sig = _dereq_('./signature');
                    var ZipEntry = _dereq_('./zipEntry');
                    var support = _dereq_('./support');
                    var jszipProto = _dereq_('./object');
                    //  class ZipEntries {{{
                    /**
                     * All the entries in the zip file.
                     * @constructor
                     * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
                     * @param {Object} loadOptions Options for loading the stream.
                     */
                    function ZipEntries(data, loadOptions) {
                        this.files = [];
                        this.loadOptions = loadOptions;
                        if (data) {
                            this.load(data);
                        }
                    }

                    ZipEntries.prototype = {
                        /**
                         * Check that the reader is on the speficied signature.
                         * @param {string} expectedSignature the expected signature.
                         * @throws {Error} if it is an other signature.
                         */
                        checkSignature: function(expectedSignature) {
                            var signature = this.reader.readString(4);
                            if (signature !== expectedSignature) {
                                throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
                            }
                        },
                        /**
                         * Read the end of the central directory.
                         */
                        readBlockEndOfCentral: function() {
                            this.diskNumber = this.reader.readInt(2);
                            this.diskWithCentralDirStart = this.reader.readInt(2);
                            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
                            this.centralDirRecords = this.reader.readInt(2);
                            this.centralDirSize = this.reader.readInt(4);
                            this.centralDirOffset = this.reader.readInt(4);

                            this.zipCommentLength = this.reader.readInt(2);
                            // warning : the encoding depends of the system locale
                            // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
                            // On a windows machine, this field is encoded with the localized windows code page.
                            this.zipComment = this.reader.readString(this.zipCommentLength);
                            // To get consistent behavior with the generation part, we will assume that
                            // this is utf8 encoded.
                            this.zipComment = jszipProto.utf8decode(this.zipComment);
                        },
                        /**
                         * Read the end of the Zip 64 central directory.
                         * Not merged with the method readEndOfCentral :
                         * The end of central can coexist with its Zip64 brother,
                         * I don't want to read the wrong number of bytes !
                         */
                        readBlockZip64EndOfCentral: function() {
                            this.zip64EndOfCentralSize = this.reader.readInt(8);
                            this.versionMadeBy = this.reader.readString(2);
                            this.versionNeeded = this.reader.readInt(2);
                            this.diskNumber = this.reader.readInt(4);
                            this.diskWithCentralDirStart = this.reader.readInt(4);
                            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
                            this.centralDirRecords = this.reader.readInt(8);
                            this.centralDirSize = this.reader.readInt(8);
                            this.centralDirOffset = this.reader.readInt(8);

                            this.zip64ExtensibleData = {};
                            var extraDataSize = this.zip64EndOfCentralSize - 44,
                                index = 0,
                                extraFieldId,
                                extraFieldLength,
                                extraFieldValue;
                            while (index < extraDataSize) {
                                extraFieldId = this.reader.readInt(2);
                                extraFieldLength = this.reader.readInt(4);
                                extraFieldValue = this.reader.readString(extraFieldLength);
                                this.zip64ExtensibleData[extraFieldId] = {
                                    id: extraFieldId,
                                    length: extraFieldLength,
                                    value: extraFieldValue
                                };
                            }
                        },
                        /**
                         * Read the end of the Zip 64 central directory locator.
                         */
                        readBlockZip64EndOfCentralLocator: function() {
                            this.diskWithZip64CentralDirStart = this.reader.readInt(4);
                            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
                            this.disksCount = this.reader.readInt(4);
                            if (this.disksCount > 1) {
                                throw new Error("Multi-volumes zip are not supported");
                            }
                        },
                        /**
                         * Read the local files, based on the offset read in the central part.
                         */
                        readLocalFiles: function() {
                            var i, file;
                            for (i = 0; i < this.files.length; i++) {
                                file = this.files[i];
                                this.reader.setIndex(file.localHeaderOffset);
                                this.checkSignature(sig.LOCAL_FILE_HEADER);
                                file.readLocalPart(this.reader);
                                file.handleUTF8();
                                file.processAttributes();
                            }
                        },
                        /**
                         * Read the central directory.
                         */
                        readCentralDir: function() {
                            var file;

                            this.reader.setIndex(this.centralDirOffset);
                            while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
                                file = new ZipEntry({
                                    zip64: this.zip64
                                }, this.loadOptions);
                                file.readCentralPart(this.reader);
                                this.files.push(file);
                            }
                        },
                        /**
                         * Read the end of central directory.
                         */
                        readEndOfCentral: function() {
                            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
                            if (offset === -1) {
                                // Check if the content is a truncated zip or complete garbage.
                                // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
                                // extractible zip for example) but it can give a good hint.
                                // If an ajax request was used without responseType, we will also
                                // get unreadable data.
                                var isGarbage = true;
                                try {
                                    this.reader.setIndex(0);
                                    this.checkSignature(sig.LOCAL_FILE_HEADER);
                                    isGarbage = false;
                                } catch (e) {}

                                if (isGarbage) {
                                    throw new Error("Can't find end of central directory : is this a zip file ? " +
                                        "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
                                } else {
                                    throw new Error("Corrupted zip : can't find end of central directory");
                                }
                            }
                            this.reader.setIndex(offset);
                            this.checkSignature(sig.CENTRAL_DIRECTORY_END);
                            this.readBlockEndOfCentral();


                            /* extract from the zip spec :
                             4)  If one of the fields in the end of central directory
                             record is too small to hold required data, the field
                             should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                             ZIP64 format record should be created.
                             5)  The end of central directory record and the
                             Zip64 end of central directory locator record must
                             reside on the same disk when splitting or spanning
                             an archive.
                             */
                            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
                                this.zip64 = true;

                                /*
                                 Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
                                 the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
                                 all numbers as 64-bit double precision IEEE 754 floating point numbers.
                                 So, we have 53bits for integers and bitwise operations treat everything as 32bits.
                                 see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
                                 and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
                                 */

                                // should look for a zip64 EOCD locator
                                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                                if (offset === -1) {
                                    throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
                                }
                                this.reader.setIndex(offset);
                                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                                this.readBlockZip64EndOfCentralLocator();

                                // now the zip64 EOCD record
                                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
                                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                                this.readBlockZip64EndOfCentral();
                            }
                        },
                        prepareReader: function(data) {
                            var type = utils.getTypeOf(data);
                            if (type === "string" && !support.uint8array) {
                                this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
                            } else if (type === "nodebuffer") {
                                this.reader = new NodeBufferReader(data);
                            } else {
                                this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
                            }
                        },
                        /**
                         * Read a zip file and create ZipEntries.
                         * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
                         */
                        load: function(data) {
                            this.prepareReader(data);
                            this.readEndOfCentral();
                            this.readCentralDir();
                            this.readLocalFiles();
                        }
                    };
                    // }}} end of ZipEntries
                    module.exports = ZipEntries;

                }, {
                    "./nodeBufferReader": 12,
                    "./object": 13,
                    "./signature": 14,
                    "./stringReader": 15,
                    "./support": 17,
                    "./uint8ArrayReader": 18,
                    "./utils": 21,
                    "./zipEntry": 23
                }],
                23: [function(_dereq_, module, exports) {
                    'use strict';
                    var StringReader = _dereq_('./stringReader');
                    var utils = _dereq_('./utils');
                    var CompressedObject = _dereq_('./compressedObject');
                    var jszipProto = _dereq_('./object');

                    var MADE_BY_DOS = 0x00;
                    var MADE_BY_UNIX = 0x03;

                    // class ZipEntry {{{
                    /**
                     * An entry in the zip file.
                     * @constructor
                     * @param {Object} options Options of the current file.
                     * @param {Object} loadOptions Options for loading the stream.
                     */
                    function ZipEntry(options, loadOptions) {
                        this.options = options;
                        this.loadOptions = loadOptions;
                    }

                    ZipEntry.prototype = {
                        /**
                         * say if the file is encrypted.
                         * @return {boolean} true if the file is encrypted, false otherwise.
                         */
                        isEncrypted: function() {
                            // bit 1 is set
                            return (this.bitFlag & 0x0001) === 0x0001;
                        },
                        /**
                         * say if the file has utf-8 filename/comment.
                         * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
                         */
                        useUTF8: function() {
                            // bit 11 is set
                            return (this.bitFlag & 0x0800) === 0x0800;
                        },
                        /**
                         * Prepare the function used to generate the compressed content from this ZipFile.
                         * @param {DataReader} reader the reader to use.
                         * @param {number} from the offset from where we should read the data.
                         * @param {number} length the length of the data to read.
                         * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
                         */
                        prepareCompressedContent: function(reader, from, length) {
                            return function() {
                                var previousIndex = reader.index;
                                reader.setIndex(from);
                                var compressedFileData = reader.readData(length);
                                reader.setIndex(previousIndex);

                                return compressedFileData;
                            };
                        },
                        /**
                         * Prepare the function used to generate the uncompressed content from this ZipFile.
                         * @param {DataReader} reader the reader to use.
                         * @param {number} from the offset from where we should read the data.
                         * @param {number} length the length of the data to read.
                         * @param {JSZip.compression} compression the compression used on this file.
                         * @param {number} uncompressedSize the uncompressed size to expect.
                         * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
                         */
                        prepareContent: function(reader, from, length, compression, uncompressedSize) {
                            return function() {

                                var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
                                var uncompressedFileData = compression.uncompress(compressedFileData);

                                if (uncompressedFileData.length !== uncompressedSize) {
                                    throw new Error("Bug : uncompressed data size mismatch");
                                }

                                return uncompressedFileData;
                            };
                        },
                        /**
                         * Read the local part of a zip file and add the info in this object.
                         * @param {DataReader} reader the reader to use.
                         */
                        readLocalPart: function(reader) {
                            var compression, localExtraFieldsLength;

                            // we already know everything from the central dir !
                            // If the central dir data are false, we are doomed.
                            // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
                            // The less data we get here, the more reliable this should be.
                            // Let's skip the whole header and dash to the data !
                            reader.skip(22);
                            // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
                            // Strangely, the filename here is OK.
                            // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
                            // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
                            // Search "unzip mismatching "local" filename continuing with "central" filename version" on
                            // the internet.
                            //
                            // I think I see the logic here : the central directory is used to display
                            // content and the local directory is used to extract the files. Mixing / and \
                            // may be used to display \ to windows users and use / when extracting the files.
                            // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
                            this.fileNameLength = reader.readInt(2);
                            localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
                            this.fileName = reader.readString(this.fileNameLength);
                            reader.skip(localExtraFieldsLength);

                            if (this.compressedSize == -1 || this.uncompressedSize == -1) {
                                throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
                            }

                            compression = utils.findCompression(this.compressionMethod);
                            if (compression === null) { // no compression found
                                throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
                            }
                            this.decompressed = new CompressedObject();
                            this.decompressed.compressedSize = this.compressedSize;
                            this.decompressed.uncompressedSize = this.uncompressedSize;
                            this.decompressed.crc32 = this.crc32;
                            this.decompressed.compressionMethod = this.compressionMethod;
                            this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
                            this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

                            // we need to compute the crc32...
                            if (this.loadOptions.checkCRC32) {
                                this.decompressed = utils.transformTo("string", this.decompressed.getContent());
                                if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                                    throw new Error("Corrupted zip : CRC32 mismatch");
                                }
                            }
                        },

                        /**
                         * Read the central part of a zip file and add the info in this object.
                         * @param {DataReader} reader the reader to use.
                         */
                        readCentralPart: function(reader) {
                            this.versionMadeBy = reader.readInt(2);
                            this.versionNeeded = reader.readInt(2);
                            this.bitFlag = reader.readInt(2);
                            this.compressionMethod = reader.readString(2);
                            this.date = reader.readDate();
                            this.crc32 = reader.readInt(4);
                            this.compressedSize = reader.readInt(4);
                            this.uncompressedSize = reader.readInt(4);
                            this.fileNameLength = reader.readInt(2);
                            this.extraFieldsLength = reader.readInt(2);
                            this.fileCommentLength = reader.readInt(2);
                            this.diskNumberStart = reader.readInt(2);
                            this.internalFileAttributes = reader.readInt(2);
                            this.externalFileAttributes = reader.readInt(4);
                            this.localHeaderOffset = reader.readInt(4);

                            if (this.isEncrypted()) {
                                throw new Error("Encrypted zip are not supported");
                            }

                            this.fileName = reader.readString(this.fileNameLength);
                            this.readExtraFields(reader);
                            this.parseZIP64ExtraField(reader);
                            this.fileComment = reader.readString(this.fileCommentLength);
                        },

                        /**
                         * Parse the external file attributes and get the unix/dos permissions.
                         */
                        processAttributes: function() {
                            this.unixPermissions = null;
                            this.dosPermissions = null;
                            var madeBy = this.versionMadeBy >> 8;

                            // Check if we have the DOS directory flag set.
                            // We look for it in the DOS and UNIX permissions
                            // but some unknown platform could set it as a compatibility flag.
                            this.dir = this.externalFileAttributes & 0x0010 ? true : false;

                            if (madeBy === MADE_BY_DOS) {
                                // first 6 bits (0 to 5)
                                this.dosPermissions = this.externalFileAttributes & 0x3F;
                            }

                            if (madeBy === MADE_BY_UNIX) {
                                this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
                                // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
                            }

                            // fail safe : if the name ends with a / it probably means a folder
                            if (!this.dir && this.fileName.slice(-1) === '/') {
                                this.dir = true;
                            }
                        },

                        /**
                         * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
                         * @param {DataReader} reader the reader to use.
                         */
                        parseZIP64ExtraField: function(reader) {

                            if (!this.extraFields[0x0001]) {
                                return;
                            }

                            // should be something, preparing the extra reader
                            var extraReader = new StringReader(this.extraFields[0x0001].value);

                            // I really hope that these 64bits integer can fit in 32 bits integer, because js
                            // won't let us have more.
                            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
                                this.uncompressedSize = extraReader.readInt(8);
                            }
                            if (this.compressedSize === utils.MAX_VALUE_32BITS) {
                                this.compressedSize = extraReader.readInt(8);
                            }
                            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
                                this.localHeaderOffset = extraReader.readInt(8);
                            }
                            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
                                this.diskNumberStart = extraReader.readInt(4);
                            }
                        },
                        /**
                         * Read the central part of a zip file and add the info in this object.
                         * @param {DataReader} reader the reader to use.
                         */
                        readExtraFields: function(reader) {
                            var start = reader.index,
                                extraFieldId,
                                extraFieldLength,
                                extraFieldValue;

                            this.extraFields = this.extraFields || {};

                            while (reader.index < start + this.extraFieldsLength) {
                                extraFieldId = reader.readInt(2);
                                extraFieldLength = reader.readInt(2);
                                extraFieldValue = reader.readString(extraFieldLength);

                                this.extraFields[extraFieldId] = {
                                    id: extraFieldId,
                                    length: extraFieldLength,
                                    value: extraFieldValue
                                };
                            }
                        },
                        /**
                         * Apply an UTF8 transformation if needed.
                         */
                        handleUTF8: function() {
                            if (this.useUTF8()) {
                                this.fileName = jszipProto.utf8decode(this.fileName);
                                this.fileComment = jszipProto.utf8decode(this.fileComment);
                            } else {
                                var upath = this.findExtraFieldUnicodePath();
                                if (upath !== null) {
                                    this.fileName = upath;
                                }
                                var ucomment = this.findExtraFieldUnicodeComment();
                                if (ucomment !== null) {
                                    this.fileComment = ucomment;
                                }
                            }
                        },

                        /**
                         * Find the unicode path declared in the extra field, if any.
                         * @return {String} the unicode path, null otherwise.
                         */
                        findExtraFieldUnicodePath: function() {
                            var upathField = this.extraFields[0x7075];
                            if (upathField) {
                                var extraReader = new StringReader(upathField.value);

                                // wrong version
                                if (extraReader.readInt(1) !== 1) {
                                    return null;
                                }

                                // the crc of the filename changed, this field is out of date.
                                if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                                    return null;
                                }

                                return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
                            }
                            return null;
                        },

                        /**
                         * Find the unicode comment declared in the extra field, if any.
                         * @return {String} the unicode comment, null otherwise.
                         */
                        findExtraFieldUnicodeComment: function() {
                            var ucommentField = this.extraFields[0x6375];
                            if (ucommentField) {
                                var extraReader = new StringReader(ucommentField.value);

                                // wrong version
                                if (extraReader.readInt(1) !== 1) {
                                    return null;
                                }

                                // the crc of the comment changed, this field is out of date.
                                if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                                    return null;
                                }

                                return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
                            }
                            return null;
                        }
                    };
                    module.exports = ZipEntry;

                }, {
                    "./compressedObject": 2,
                    "./object": 13,
                    "./stringReader": 15,
                    "./utils": 21
                }],
                24: [function(_dereq_, module, exports) {
                    // Top level file is just a mixin of submodules & constants
                    'use strict';

                    var assign = _dereq_('./lib/utils/common').assign;

                    var deflate = _dereq_('./lib/deflate');
                    var inflate = _dereq_('./lib/inflate');
                    var constants = _dereq_('./lib/zlib/constants');

                    var pako = {};

                    assign(pako, deflate, inflate, constants);

                    module.exports = pako;
                }, {
                    "./lib/deflate": 25,
                    "./lib/inflate": 26,
                    "./lib/utils/common": 27,
                    "./lib/zlib/constants": 30
                }],
                25: [function(_dereq_, module, exports) {
                    'use strict';


                    var zlib_deflate = _dereq_('./zlib/deflate.js');
                    var utils = _dereq_('./utils/common');
                    var strings = _dereq_('./utils/strings');
                    var msg = _dereq_('./zlib/messages');
                    var zstream = _dereq_('./zlib/zstream');


                    /* Public constants ==========================================================*/
                    /* ===========================================================================*/

                    var Z_NO_FLUSH = 0;
                    var Z_FINISH = 4;

                    var Z_OK = 0;
                    var Z_STREAM_END = 1;

                    var Z_DEFAULT_COMPRESSION = -1;

                    var Z_DEFAULT_STRATEGY = 0;

                    var Z_DEFLATED = 8;

                    /* ===========================================================================*/


                    /**
                     * class Deflate
                     *
                     * Generic JS-style wrapper for zlib calls. If you don't need
                     * streaming behaviour - use more simple functions: [[deflate]],
                     * [[deflateRaw]] and [[gzip]].
                     **/

                    /* internal
                     * Deflate.chunks -> Array
                     *
                     * Chunks of output data, if [[Deflate#onData]] not overriden.
                     **/

                    /**
                     * Deflate.result -> Uint8Array|Array
                     *
                     * Compressed result, generated by default [[Deflate#onData]]
                     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
                     * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
                     **/

                    /**
                     * Deflate.err -> Number
                     *
                     * Error code after deflate finished. 0 (Z_OK) on success.
                     * You will not need it in real life, because deflate errors
                     * are possible only on wrong options or bad `onData` / `onEnd`
                     * custom handlers.
                     **/

                    /**
                     * Deflate.msg -> String
                     *
                     * Error message, if [[Deflate.err]] != 0
                     **/


                    /**
                     * new Deflate(options)
                     * - options (Object): zlib deflate options.
                     *
                     * Creates new deflator instance with specified params. Throws exception
                     * on bad params. Supported options:
                     *
                     * - `level`
                     * - `windowBits`
                     * - `memLevel`
                     * - `strategy`
                     *
                     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
                     * for more information on these.
                     *
                     * Additional options, for internal needs:
                     *
                     * - `chunkSize` - size of generated data chunks (16K by default)
                     * - `raw` (Boolean) - do raw deflate
                     * - `gzip` (Boolean) - create gzip wrapper
                     * - `to` (String) - if equal to 'string', then result will be "binary string"
                     *    (each char code [0..255])
                     * - `header` (Object) - custom header for gzip
                     *   - `text` (Boolean) - true if compressed data believed to be text
                     *   - `time` (Number) - modification time, unix timestamp
                     *   - `os` (Number) - operation system code
                     *   - `extra` (Array) - array of bytes with extra data (max 65536)
                     *   - `name` (String) - file name (binary string)
                     *   - `comment` (String) - comment (binary string)
                     *   - `hcrc` (Boolean) - true if header crc should be added
                     *
                     * ##### Example:
                     *
                     * ```javascript
                     * var pako = require('pako')
                     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
                     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
                     *
                     * var deflate = new pako.Deflate({ level: 3});
                     *
                     * deflate.push(chunk1, false);
                     * deflate.push(chunk2, true);  // true -> last chunk
                     *
                     * if (deflate.err) { throw new Error(deflate.err); }
                     *
                     * console.log(deflate.result);
                     * ```
                     **/
                    var Deflate = function(options) {

                        this.options = utils.assign({
                            level: Z_DEFAULT_COMPRESSION,
                            method: Z_DEFLATED,
                            chunkSize: 16384,
                            windowBits: 15,
                            memLevel: 8,
                            strategy: Z_DEFAULT_STRATEGY,
                            to: ''
                        }, options || {});

                        var opt = this.options;

                        if (opt.raw && (opt.windowBits > 0)) {
                            opt.windowBits = -opt.windowBits;
                        } else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
                            opt.windowBits += 16;
                        }

                        this.err = 0; // error code, if happens (0 = Z_OK)
                        this.msg = ''; // error message
                        this.ended = false; // used to avoid multiple onEnd() calls
                        this.chunks = []; // chunks of compressed data

                        this.strm = new zstream();
                        this.strm.avail_out = 0;

                        var status = zlib_deflate.deflateInit2(
                            this.strm,
                            opt.level,
                            opt.method,
                            opt.windowBits,
                            opt.memLevel,
                            opt.strategy
                        );

                        if (status !== Z_OK) {
                            throw new Error(msg[status]);
                        }

                        if (opt.header) {
                            zlib_deflate.deflateSetHeader(this.strm, opt.header);
                        }
                    };

                    /**
                     * Deflate#push(data[, mode]) -> Boolean
                     * - data (Uint8Array|Array|String): input data. Strings will be converted to
                     *   utf8 byte sequence.
                     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
                     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
                     *
                     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
                     * new compressed chunks. Returns `true` on success. The last data block must have
                     * mode Z_FINISH (or `true`). That flush internal pending buffers and call
                     * [[Deflate#onEnd]].
                     *
                     * On fail call [[Deflate#onEnd]] with error code and return false.
                     *
                     * We strongly recommend to use `Uint8Array` on input for best speed (output
                     * array format is detected automatically). Also, don't skip last param and always
                     * use the same type in your code (boolean or number). That will improve JS speed.
                     *
                     * For regular `Array`-s make sure all elements are [0..255].
                     *
                     * ##### Example
                     *
                     * ```javascript
                     * push(chunk, false); // push one of data chunks
                     * ...
                     * push(chunk, true);  // push last chunk
                     * ```
                     **/
                    Deflate.prototype.push = function(data, mode) {
                        var strm = this.strm;
                        var chunkSize = this.options.chunkSize;
                        var status, _mode;

                        if (this.ended) {
                            return false;
                        }

                        _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

                        // Convert data if needed
                        if (typeof data === 'string') {
                            // If we need to compress text, change encoding to utf8.
                            strm.input = strings.string2buf(data);
                        } else {
                            strm.input = data;
                        }

                        strm.next_in = 0;
                        strm.avail_in = strm.input.length;

                        do {
                            if (strm.avail_out === 0) {
                                strm.output = new utils.Buf8(chunkSize);
                                strm.next_out = 0;
                                strm.avail_out = chunkSize;
                            }
                            status = zlib_deflate.deflate(strm, _mode);
                            /* no bad return value */

                            if (status !== Z_STREAM_END && status !== Z_OK) {
                                this.onEnd(status);
                                this.ended = true;
                                return false;
                            }
                            if (strm.avail_out === 0 || (strm.avail_in === 0 && _mode === Z_FINISH)) {
                                if (this.options.to === 'string') {
                                    this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
                                } else {
                                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                                }
                            }
                        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

                        // Finalize on the last chunk.
                        if (_mode === Z_FINISH) {
                            status = zlib_deflate.deflateEnd(this.strm);
                            this.onEnd(status);
                            this.ended = true;
                            return status === Z_OK;
                        }

                        return true;
                    };


                    /**
                     * Deflate#onData(chunk) -> Void
                     * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
                     *   on js engine support. When string output requested, each chunk
                     *   will be string.
                     *
                     * By default, stores data blocks in `chunks[]` property and glue
                     * those in `onEnd`. Override this handler, if you need another behaviour.
                     **/
                    Deflate.prototype.onData = function(chunk) {
                        this.chunks.push(chunk);
                    };


                    /**
                     * Deflate#onEnd(status) -> Void
                     * - status (Number): deflate status. 0 (Z_OK) on success,
                     *   other if not.
                     *
                     * Called once after you tell deflate that input stream complete
                     * or error happenned. By default - join collected chunks,
                     * free memory and fill `results` / `err` properties.
                     **/
                    Deflate.prototype.onEnd = function(status) {
                        // On success - join
                        if (status === Z_OK) {
                            if (this.options.to === 'string') {
                                this.result = this.chunks.join('');
                            } else {
                                this.result = utils.flattenChunks(this.chunks);
                            }
                        }
                        this.chunks = [];
                        this.err = status;
                        this.msg = this.strm.msg;
                    };


                    /**
                     * deflate(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to compress.
                     * - options (Object): zlib deflate options.
                     *
                     * Compress `data` with deflate alrorythm and `options`.
                     *
                     * Supported options are:
                     *
                     * - level
                     * - windowBits
                     * - memLevel
                     * - strategy
                     *
                     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
                     * for more information on these.
                     *
                     * Sugar (options):
                     *
                     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
                     *   negative windowBits implicitly.
                     * - `to` (String) - if equal to 'string', then result will be "binary string"
                     *    (each char code [0..255])
                     *
                     * ##### Example:
                     *
                     * ```javascript
                     * var pako = require('pako')
                     *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
                     *
                     * console.log(pako.deflate(data));
                     * ```
                     **/
                    function deflate(input, options) {
                        var deflator = new Deflate(options);

                        deflator.push(input, true);

                        // That will never happens, if you don't cheat with options :)
                        if (deflator.err) {
                            throw deflator.msg;
                        }

                        return deflator.result;
                    }


                    /**
                     * deflateRaw(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to compress.
                     * - options (Object): zlib deflate options.
                     *
                     * The same as [[deflate]], but creates raw data, without wrapper
                     * (header and adler32 crc).
                     **/
                    function deflateRaw(input, options) {
                        options = options || {};
                        options.raw = true;
                        return deflate(input, options);
                    }


                    /**
                     * gzip(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to compress.
                     * - options (Object): zlib deflate options.
                     *
                     * The same as [[deflate]], but create gzip wrapper instead of
                     * deflate one.
                     **/
                    function gzip(input, options) {
                        options = options || {};
                        options.gzip = true;
                        return deflate(input, options);
                    }


                    exports.Deflate = Deflate;
                    exports.deflate = deflate;
                    exports.deflateRaw = deflateRaw;
                    exports.gzip = gzip;
                }, {
                    "./utils/common": 27,
                    "./utils/strings": 28,
                    "./zlib/deflate.js": 32,
                    "./zlib/messages": 37,
                    "./zlib/zstream": 39
                }],
                26: [function(_dereq_, module, exports) {
                    'use strict';


                    var zlib_inflate = _dereq_('./zlib/inflate.js');
                    var utils = _dereq_('./utils/common');
                    var strings = _dereq_('./utils/strings');
                    var c = _dereq_('./zlib/constants');
                    var msg = _dereq_('./zlib/messages');
                    var zstream = _dereq_('./zlib/zstream');
                    var gzheader = _dereq_('./zlib/gzheader');


                    /**
                     * class Inflate
                     *
                     * Generic JS-style wrapper for zlib calls. If you don't need
                     * streaming behaviour - use more simple functions: [[inflate]]
                     * and [[inflateRaw]].
                     **/

                    /* internal
                     * inflate.chunks -> Array
                     *
                     * Chunks of output data, if [[Inflate#onData]] not overriden.
                     **/

                    /**
                     * Inflate.result -> Uint8Array|Array|String
                     *
                     * Uncompressed result, generated by default [[Inflate#onData]]
                     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
                     * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
                     **/

                    /**
                     * Inflate.err -> Number
                     *
                     * Error code after inflate finished. 0 (Z_OK) on success.
                     * Should be checked if broken data possible.
                     **/

                    /**
                     * Inflate.msg -> String
                     *
                     * Error message, if [[Inflate.err]] != 0
                     **/


                    /**
                     * new Inflate(options)
                     * - options (Object): zlib inflate options.
                     *
                     * Creates new inflator instance with specified params. Throws exception
                     * on bad params. Supported options:
                     *
                     * - `windowBits`
                     *
                     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
                     * for more information on these.
                     *
                     * Additional options, for internal needs:
                     *
                     * - `chunkSize` - size of generated data chunks (16K by default)
                     * - `raw` (Boolean) - do raw inflate
                     * - `to` (String) - if equal to 'string', then result will be converted
                     *   from utf8 to utf16 (javascript) string. When string output requested,
                     *   chunk length can differ from `chunkSize`, depending on content.
                     *
                     * By default, when no options set, autodetect deflate/gzip data format via
                     * wrapper header.
                     *
                     * ##### Example:
                     *
                     * ```javascript
                     * var pako = require('pako')
                     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
                     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
                     *
                     * var inflate = new pako.Inflate({ level: 3});
                     *
                     * inflate.push(chunk1, false);
                     * inflate.push(chunk2, true);  // true -> last chunk
                     *
                     * if (inflate.err) { throw new Error(inflate.err); }
                     *
                     * console.log(inflate.result);
                     * ```
                     **/
                    var Inflate = function(options) {

                        this.options = utils.assign({
                            chunkSize: 16384,
                            windowBits: 0,
                            to: ''
                        }, options || {});

                        var opt = this.options;

                        // Force window size for `raw` data, if not set directly,
                        // because we have no header for autodetect.
                        if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
                            opt.windowBits = -opt.windowBits;
                            if (opt.windowBits === 0) {
                                opt.windowBits = -15;
                            }
                        }

                        // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
                        if ((opt.windowBits >= 0) && (opt.windowBits < 16) && !(options && options.windowBits)) {
                            opt.windowBits += 32;
                        }

                        // Gzip header has no info about windows size, we can do autodetect only
                        // for deflate. So, if window size not set, force it to max when gzip possible
                        if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
                            // bit 3 (16) -> gzipped data
                            // bit 4 (32) -> autodetect gzip/deflate
                            if ((opt.windowBits & 15) === 0) {
                                opt.windowBits |= 15;
                            }
                        }

                        this.err = 0; // error code, if happens (0 = Z_OK)
                        this.msg = ''; // error message
                        this.ended = false; // used to avoid multiple onEnd() calls
                        this.chunks = []; // chunks of compressed data

                        this.strm = new zstream();
                        this.strm.avail_out = 0;

                        var status = zlib_inflate.inflateInit2(
                            this.strm,
                            opt.windowBits
                        );

                        if (status !== c.Z_OK) {
                            throw new Error(msg[status]);
                        }

                        this.header = new gzheader();

                        zlib_inflate.inflateGetHeader(this.strm, this.header);
                    };

                    /**
                     * Inflate#push(data[, mode]) -> Boolean
                     * - data (Uint8Array|Array|String): input data
                     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
                     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
                     *
                     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
                     * new output chunks. Returns `true` on success. The last data block must have
                     * mode Z_FINISH (or `true`). That flush internal pending buffers and call
                     * [[Inflate#onEnd]].
                     *
                     * On fail call [[Inflate#onEnd]] with error code and return false.
                     *
                     * We strongly recommend to use `Uint8Array` on input for best speed (output
                     * format is detected automatically). Also, don't skip last param and always
                     * use the same type in your code (boolean or number). That will improve JS speed.
                     *
                     * For regular `Array`-s make sure all elements are [0..255].
                     *
                     * ##### Example
                     *
                     * ```javascript
                     * push(chunk, false); // push one of data chunks
                     * ...
                     * push(chunk, true);  // push last chunk
                     * ```
                     **/
                    Inflate.prototype.push = function(data, mode) {
                        var strm = this.strm;
                        var chunkSize = this.options.chunkSize;
                        var status, _mode;
                        var next_out_utf8, tail, utf8str;

                        if (this.ended) {
                            return false;
                        }
                        _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

                        // Convert data if needed
                        if (typeof data === 'string') {
                            // Only binary strings can be decompressed on practice
                            strm.input = strings.binstring2buf(data);
                        } else {
                            strm.input = data;
                        }

                        strm.next_in = 0;
                        strm.avail_in = strm.input.length;

                        do {
                            if (strm.avail_out === 0) {
                                strm.output = new utils.Buf8(chunkSize);
                                strm.next_out = 0;
                                strm.avail_out = chunkSize;
                            }

                            status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
                            /* no bad return value */

                            if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
                                this.onEnd(status);
                                this.ended = true;
                                return false;
                            }

                            if (strm.next_out) {
                                if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && _mode === c.Z_FINISH)) {

                                    if (this.options.to === 'string') {

                                        next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

                                        tail = strm.next_out - next_out_utf8;
                                        utf8str = strings.buf2string(strm.output, next_out_utf8);

                                        // move tail
                                        strm.next_out = tail;
                                        strm.avail_out = chunkSize - tail;
                                        if (tail) {
                                            utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                                        }

                                        this.onData(utf8str);

                                    } else {
                                        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                                    }
                                }
                            }
                        } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);

                        if (status === c.Z_STREAM_END) {
                            _mode = c.Z_FINISH;
                        }
                        // Finalize on the last chunk.
                        if (_mode === c.Z_FINISH) {
                            status = zlib_inflate.inflateEnd(this.strm);
                            this.onEnd(status);
                            this.ended = true;
                            return status === c.Z_OK;
                        }

                        return true;
                    };


                    /**
                     * Inflate#onData(chunk) -> Void
                     * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
                     *   on js engine support. When string output requested, each chunk
                     *   will be string.
                     *
                     * By default, stores data blocks in `chunks[]` property and glue
                     * those in `onEnd`. Override this handler, if you need another behaviour.
                     **/
                    Inflate.prototype.onData = function(chunk) {
                        this.chunks.push(chunk);
                    };


                    /**
                     * Inflate#onEnd(status) -> Void
                     * - status (Number): inflate status. 0 (Z_OK) on success,
                     *   other if not.
                     *
                     * Called once after you tell inflate that input stream complete
                     * or error happenned. By default - join collected chunks,
                     * free memory and fill `results` / `err` properties.
                     **/
                    Inflate.prototype.onEnd = function(status) {
                        // On success - join
                        if (status === c.Z_OK) {
                            if (this.options.to === 'string') {
                                // Glue & convert here, until we teach pako to send
                                // utf8 alligned strings to onData
                                this.result = this.chunks.join('');
                            } else {
                                this.result = utils.flattenChunks(this.chunks);
                            }
                        }
                        this.chunks = [];
                        this.err = status;
                        this.msg = this.strm.msg;
                    };


                    /**
                     * inflate(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to decompress.
                     * - options (Object): zlib inflate options.
                     *
                     * Decompress `data` with inflate/ungzip and `options`. Autodetect
                     * format via wrapper header by default. That's why we don't provide
                     * separate `ungzip` method.
                     *
                     * Supported options are:
                     *
                     * - windowBits
                     *
                     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
                     * for more information.
                     *
                     * Sugar (options):
                     *
                     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
                     *   negative windowBits implicitly.
                     * - `to` (String) - if equal to 'string', then result will be converted
                     *   from utf8 to utf16 (javascript) string. When string output requested,
                     *   chunk length can differ from `chunkSize`, depending on content.
                     *
                     *
                     * ##### Example:
                     *
                     * ```javascript
                     * var pako = require('pako')
                     *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
                     *   , output;
                     *
                     * try {
                     *   output = pako.inflate(input);
                     * } catch (err)
                     *   console.log(err);
                     * }
                     * ```
                     **/
                    function inflate(input, options) {
                        var inflator = new Inflate(options);

                        inflator.push(input, true);

                        // That will never happens, if you don't cheat with options :)
                        if (inflator.err) {
                            throw inflator.msg;
                        }

                        return inflator.result;
                    }


                    /**
                     * inflateRaw(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to decompress.
                     * - options (Object): zlib inflate options.
                     *
                     * The same as [[inflate]], but creates raw data, without wrapper
                     * (header and adler32 crc).
                     **/
                    function inflateRaw(input, options) {
                        options = options || {};
                        options.raw = true;
                        return inflate(input, options);
                    }


                    /**
                     * ungzip(data[, options]) -> Uint8Array|Array|String
                     * - data (Uint8Array|Array|String): input data to decompress.
                     * - options (Object): zlib inflate options.
                     *
                     * Just shortcut to [[inflate]], because it autodetects format
                     * by header.content. Done for convenience.
                     **/


                    exports.Inflate = Inflate;
                    exports.inflate = inflate;
                    exports.inflateRaw = inflateRaw;
                    exports.ungzip = inflate;

                }, {
                    "./utils/common": 27,
                    "./utils/strings": 28,
                    "./zlib/constants": 30,
                    "./zlib/gzheader": 33,
                    "./zlib/inflate.js": 35,
                    "./zlib/messages": 37,
                    "./zlib/zstream": 39
                }],
                27: [function(_dereq_, module, exports) {
                    'use strict';


                    var TYPED_OK = (typeof Uint8Array !== 'undefined') &&
                        (typeof Uint16Array !== 'undefined') &&
                        (typeof Int32Array !== 'undefined');


                    exports.assign = function(obj /*from1, from2, from3, ...*/ ) {
                        var sources = Array.prototype.slice.call(arguments, 1);
                        while (sources.length) {
                            var source = sources.shift();
                            if (!source) {
                                continue;
                            }

                            if (typeof(source) !== 'object') {
                                throw new TypeError(source + 'must be non-object');
                            }

                            for (var p in source) {
                                if (source.hasOwnProperty(p)) {
                                    obj[p] = source[p];
                                }
                            }
                        }

                        return obj;
                    };


                    // reduce buffer size, avoiding mem copy
                    exports.shrinkBuf = function(buf, size) {
                        if (buf.length === size) {
                            return buf;
                        }
                        if (buf.subarray) {
                            return buf.subarray(0, size);
                        }
                        buf.length = size;
                        return buf;
                    };


                    var fnTyped = {
                        arraySet: function(dest, src, src_offs, len, dest_offs) {
                            if (src.subarray && dest.subarray) {
                                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                                return;
                            }
                            // Fallback to ordinary array
                            for (var i = 0; i < len; i++) {
                                dest[dest_offs + i] = src[src_offs + i];
                            }
                        },
                        // Join array of chunks to single array.
                        flattenChunks: function(chunks) {
                            var i, l, len, pos, chunk, result;

                            // calculate data length
                            len = 0;
                            for (i = 0, l = chunks.length; i < l; i++) {
                                len += chunks[i].length;
                            }

                            // join chunks
                            result = new Uint8Array(len);
                            pos = 0;
                            for (i = 0, l = chunks.length; i < l; i++) {
                                chunk = chunks[i];
                                result.set(chunk, pos);
                                pos += chunk.length;
                            }

                            return result;
                        }
                    };

                    var fnUntyped = {
                        arraySet: function(dest, src, src_offs, len, dest_offs) {
                            for (var i = 0; i < len; i++) {
                                dest[dest_offs + i] = src[src_offs + i];
                            }
                        },
                        // Join array of chunks to single array.
                        flattenChunks: function(chunks) {
                            return [].concat.apply([], chunks);
                        }
                    };


                    // Enable/Disable typed arrays use, for testing
                    //
                    exports.setTyped = function(on) {
                        if (on) {
                            exports.Buf8 = Uint8Array;
                            exports.Buf16 = Uint16Array;
                            exports.Buf32 = Int32Array;
                            exports.assign(exports, fnTyped);
                        } else {
                            exports.Buf8 = Array;
                            exports.Buf16 = Array;
                            exports.Buf32 = Array;
                            exports.assign(exports, fnUntyped);
                        }
                    };

                    exports.setTyped(TYPED_OK);
                }, {}],
                28: [function(_dereq_, module, exports) {
                    // String encode/decode helpers
                    'use strict';


                    var utils = _dereq_('./common');


                    // Quick check if we can use fast array to bin string conversion
                    //
                    // - apply(Array) can fail on Android 2.2
                    // - apply(Uint8Array) can fail on iOS 5.1 Safary
                    //
                    var STR_APPLY_OK = true;
                    var STR_APPLY_UIA_OK = true;

                    try {
                        String.fromCharCode.apply(null, [0]);
                    } catch (__) {
                        STR_APPLY_OK = false;
                    }
                    try {
                        String.fromCharCode.apply(null, new Uint8Array(1));
                    } catch (__) {
                        STR_APPLY_UIA_OK = false;
                    }


                    // Table with utf8 lengths (calculated by first byte of sequence)
                    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
                    // because max possible codepoint is 0x10ffff
                    var _utf8len = new utils.Buf8(256);
                    for (var i = 0; i < 256; i++) {
                        _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
                    }
                    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


                    // convert string to array (typed, when possible)
                    exports.string2buf = function(str) {
                        var buf, c, c2, m_pos, i, str_len = str.length,
                            buf_len = 0;

                        // count binary size
                        for (m_pos = 0; m_pos < str_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 0xfc00) === 0xdc00) {
                                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                                    m_pos++;
                                }
                            }
                            buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
                        }

                        // allocate buffer
                        buf = new utils.Buf8(buf_len);

                        // convert
                        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 0xfc00) === 0xdc00) {
                                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                                    m_pos++;
                                }
                            }
                            if (c < 0x80) {
                                /* one byte */
                                buf[i++] = c;
                            } else if (c < 0x800) {
                                /* two bytes */
                                buf[i++] = 0xC0 | (c >>> 6);
                                buf[i++] = 0x80 | (c & 0x3f);
                            } else if (c < 0x10000) {
                                /* three bytes */
                                buf[i++] = 0xE0 | (c >>> 12);
                                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                                buf[i++] = 0x80 | (c & 0x3f);
                            } else {
                                /* four bytes */
                                buf[i++] = 0xf0 | (c >>> 18);
                                buf[i++] = 0x80 | (c >>> 12 & 0x3f);
                                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                                buf[i++] = 0x80 | (c & 0x3f);
                            }
                        }

                        return buf;
                    };

                    // Helper (used in 2 places)
                    function buf2binstring(buf, len) {
                        // use fallback for big arrays to avoid stack overflow
                        if (len < 65537) {
                            if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
                                return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
                            }
                        }

                        var result = '';
                        for (var i = 0; i < len; i++) {
                            result += String.fromCharCode(buf[i]);
                        }
                        return result;
                    }


                    // Convert byte array to binary string
                    exports.buf2binstring = function(buf) {
                        return buf2binstring(buf, buf.length);
                    };


                    // Convert binary string (typed, when possible)
                    exports.binstring2buf = function(str) {
                        var buf = new utils.Buf8(str.length);
                        for (var i = 0, len = buf.length; i < len; i++) {
                            buf[i] = str.charCodeAt(i);
                        }
                        return buf;
                    };


                    // convert array to string
                    exports.buf2string = function(buf, max) {
                        var i, out, c, c_len;
                        var len = max || buf.length;

                        // Reserve max possible length (2 words per char)
                        // NB: by unknown reasons, Array is significantly faster for
                        //     String.fromCharCode.apply than Uint16Array.
                        var utf16buf = new Array(len * 2);

                        for (out = 0, i = 0; i < len;) {
                            c = buf[i++];
                            // quick process ascii
                            if (c < 0x80) {
                                utf16buf[out++] = c;
                                continue;
                            }

                            c_len = _utf8len[c];
                            // skip 5 & 6 byte codes
                            if (c_len > 4) {
                                utf16buf[out++] = 0xfffd;
                                i += c_len - 1;
                                continue;
                            }

                            // apply mask on first byte
                            c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
                            // join the rest
                            while (c_len > 1 && i < len) {
                                c = (c << 6) | (buf[i++] & 0x3f);
                                c_len--;
                            }

                            // terminated by end of string?
                            if (c_len > 1) {
                                utf16buf[out++] = 0xfffd;
                                continue;
                            }

                            if (c < 0x10000) {
                                utf16buf[out++] = c;
                            } else {
                                c -= 0x10000;
                                utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
                                utf16buf[out++] = 0xdc00 | (c & 0x3ff);
                            }
                        }

                        return buf2binstring(utf16buf, out);
                    };


                    // Calculate max possible position in utf8 buffer,
                    // that will not break sequence. If that's not possible
                    // - (very small limits) return max size as is.
                    //
                    // buf[] - utf8 bytes array
                    // max   - length limit (mandatory);
                    exports.utf8border = function(buf, max) {
                        var pos;

                        max = max || buf.length;
                        if (max > buf.length) {
                            max = buf.length;
                        }

                        // go back from last position, until start of sequence found
                        pos = max - 1;
                        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
                            pos--;
                        }

                        // Fuckup - very small and broken sequence,
                        // return max, because we should return something anyway.
                        if (pos < 0) {
                            return max;
                        }

                        // If we came to start of buffer - that means vuffer is too small,
                        // return max too.
                        if (pos === 0) {
                            return max;
                        }

                        return (pos + _utf8len[buf[pos]] > max) ? pos : max;
                    };

                }, {
                    "./common": 27
                }],
                29: [function(_dereq_, module, exports) {
                    'use strict';

                    // Note: adler32 takes 12% for level 0 and 2% for level 6.
                    // It doesn't worth to make additional optimizationa as in original.
                    // Small size is preferable.

                    function adler32(adler, buf, len, pos) {
                        var s1 = (adler & 0xffff) | 0,
                            s2 = ((adler >>> 16) & 0xffff) | 0,
                            n = 0;

                        while (len !== 0) {
                            // Set limit ~ twice less than 5552, to keep
                            // s2 in 31-bits, because we force signed ints.
                            // in other case %= will fail.
                            n = len > 2000 ? 2000 : len;
                            len -= n;

                            do {
                                s1 = (s1 + buf[pos++]) | 0;
                                s2 = (s2 + s1) | 0;
                            } while (--n);

                            s1 %= 65521;
                            s2 %= 65521;
                        }

                        return (s1 | (s2 << 16)) | 0;
                    }


                    module.exports = adler32;
                }, {}],
                30: [function(_dereq_, module, exports) {
                    module.exports = {

                        /* Allowed flush values; see deflate() and inflate() below for details */
                        Z_NO_FLUSH: 0,
                        Z_PARTIAL_FLUSH: 1,
                        Z_SYNC_FLUSH: 2,
                        Z_FULL_FLUSH: 3,
                        Z_FINISH: 4,
                        Z_BLOCK: 5,
                        Z_TREES: 6,

                        /* Return codes for the compression/decompression functions. Negative values
                         * are errors, positive values are used for special but normal events.
                         */
                        Z_OK: 0,
                        Z_STREAM_END: 1,
                        Z_NEED_DICT: 2,
                        Z_ERRNO: -1,
                        Z_STREAM_ERROR: -2,
                        Z_DATA_ERROR: -3,
                        //Z_MEM_ERROR:     -4,
                        Z_BUF_ERROR: -5,
                        //Z_VERSION_ERROR: -6,

                        /* compression levels */
                        Z_NO_COMPRESSION: 0,
                        Z_BEST_SPEED: 1,
                        Z_BEST_COMPRESSION: 9,
                        Z_DEFAULT_COMPRESSION: -1,


                        Z_FILTERED: 1,
                        Z_HUFFMAN_ONLY: 2,
                        Z_RLE: 3,
                        Z_FIXED: 4,
                        Z_DEFAULT_STRATEGY: 0,

                        /* Possible values of the data_type field (though see inflate()) */
                        Z_BINARY: 0,
                        Z_TEXT: 1,
                        //Z_ASCII:                1, // = Z_TEXT (deprecated)
                        Z_UNKNOWN: 2,

                        /* The deflate compression method */
                        Z_DEFLATED: 8
                            //Z_NULL:                 null // Use -1 or null inline, depending on var type
                    };
                }, {}],
                31: [function(_dereq_, module, exports) {
                    'use strict';

                    // Note: we can't get significant speed boost here.
                    // So write code to minimize size - no pregenerated tables
                    // and array tools dependencies.


                    // Use ordinary array, since untyped makes no boost here
                    function makeTable() {
                        var c, table = [];

                        for (var n = 0; n < 256; n++) {
                            c = n;
                            for (var k = 0; k < 8; k++) {
                                c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
                            }
                            table[n] = c;
                        }

                        return table;
                    }

                    // Create table on load. Just 255 signed longs. Not a problem.
                    var crcTable = makeTable();


                    function crc32(crc, buf, len, pos) {
                        var t = crcTable,
                            end = pos + len;

                        crc = crc ^ (-1);

                        for (var i = pos; i < end; i++) {
                            crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
                        }

                        return (crc ^ (-1)); // >>> 0;
                    }


                    module.exports = crc32;
                }, {}],
                32: [function(_dereq_, module, exports) {
                    'use strict';

                    var utils = _dereq_('../utils/common');
                    var trees = _dereq_('./trees');
                    var adler32 = _dereq_('./adler32');
                    var crc32 = _dereq_('./crc32');
                    var msg = _dereq_('./messages');

                    /* Public constants ==========================================================*/
                    /* ===========================================================================*/


                    /* Allowed flush values; see deflate() and inflate() below for details */
                    var Z_NO_FLUSH = 0;
                    var Z_PARTIAL_FLUSH = 1;
                    //var Z_SYNC_FLUSH    = 2;
                    var Z_FULL_FLUSH = 3;
                    var Z_FINISH = 4;
                    var Z_BLOCK = 5;
                    //var Z_TREES         = 6;


                    /* Return codes for the compression/decompression functions. Negative values
                     * are errors, positive values are used for special but normal events.
                     */
                    var Z_OK = 0;
                    var Z_STREAM_END = 1;
                    //var Z_NEED_DICT     = 2;
                    //var Z_ERRNO         = -1;
                    var Z_STREAM_ERROR = -2;
                    var Z_DATA_ERROR = -3;
                    //var Z_MEM_ERROR     = -4;
                    var Z_BUF_ERROR = -5;
                    //var Z_VERSION_ERROR = -6;


                    /* compression levels */
                    //var Z_NO_COMPRESSION      = 0;
                    //var Z_BEST_SPEED          = 1;
                    //var Z_BEST_COMPRESSION    = 9;
                    var Z_DEFAULT_COMPRESSION = -1;


                    var Z_FILTERED = 1;
                    var Z_HUFFMAN_ONLY = 2;
                    var Z_RLE = 3;
                    var Z_FIXED = 4;
                    var Z_DEFAULT_STRATEGY = 0;

                    /* Possible values of the data_type field (though see inflate()) */
                    //var Z_BINARY              = 0;
                    //var Z_TEXT                = 1;
                    //var Z_ASCII               = 1; // = Z_TEXT
                    var Z_UNKNOWN = 2;


                    /* The deflate compression method */
                    var Z_DEFLATED = 8;

                    /*============================================================================*/


                    var MAX_MEM_LEVEL = 9;
                    /* Maximum value for memLevel in deflateInit2 */
                    var MAX_WBITS = 15;
                    /* 32K LZ77 window */
                    var DEF_MEM_LEVEL = 8;


                    var LENGTH_CODES = 29;
                    /* number of length codes, not counting the special END_BLOCK code */
                    var LITERALS = 256;
                    /* number of literal bytes 0..255 */
                    var L_CODES = LITERALS + 1 + LENGTH_CODES;
                    /* number of Literal or Length codes, including the END_BLOCK code */
                    var D_CODES = 30;
                    /* number of distance codes */
                    var BL_CODES = 19;
                    /* number of codes used to transfer the bit lengths */
                    var HEAP_SIZE = 2 * L_CODES + 1;
                    /* maximum heap size */
                    var MAX_BITS = 15;
                    /* All codes must not exceed MAX_BITS bits */

                    var MIN_MATCH = 3;
                    var MAX_MATCH = 258;
                    var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

                    var PRESET_DICT = 0x20;

                    var INIT_STATE = 42;
                    var EXTRA_STATE = 69;
                    var NAME_STATE = 73;
                    var COMMENT_STATE = 91;
                    var HCRC_STATE = 103;
                    var BUSY_STATE = 113;
                    var FINISH_STATE = 666;

                    var BS_NEED_MORE = 1;
                    /* block not completed, need more input or more output */
                    var BS_BLOCK_DONE = 2;
                    /* block flush performed */
                    var BS_FINISH_STARTED = 3;
                    /* finish started, need only more output at next deflate */
                    var BS_FINISH_DONE = 4;
                    /* finish done, accept no more input or output */

                    var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

                    function err(strm, errorCode) {
                        strm.msg = msg[errorCode];
                        return errorCode;
                    }

                    function rank(f) {
                        return ((f) << 1) - ((f) > 4 ? 9 : 0);
                    }

                    function zero(buf) {
                        var len = buf.length;
                        while (--len >= 0) {
                            buf[len] = 0;
                        }
                    }


                    /* =========================================================================
                     * Flush as much pending output as possible. All deflate() output goes
                     * through this function so some applications may wish to modify it
                     * to avoid allocating a large strm->output buffer and copying into it.
                     * (See also read_buf()).
                     */
                    function flush_pending(strm) {
                        var s = strm.state;

                        //_tr_flush_bits(s);
                        var len = s.pending;
                        if (len > strm.avail_out) {
                            len = strm.avail_out;
                        }
                        if (len === 0) {
                            return;
                        }

                        utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
                        strm.next_out += len;
                        s.pending_out += len;
                        strm.total_out += len;
                        strm.avail_out -= len;
                        s.pending -= len;
                        if (s.pending === 0) {
                            s.pending_out = 0;
                        }
                    }


                    function flush_block_only(s, last) {
                        trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
                        s.block_start = s.strstart;
                        flush_pending(s.strm);
                    }


                    function put_byte(s, b) {
                        s.pending_buf[s.pending++] = b;
                    }


                    /* =========================================================================
                     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
                     * IN assertion: the stream state is correct and there is enough room in
                     * pending_buf.
                     */
                    function putShortMSB(s, b) {
                        //  put_byte(s, (Byte)(b >> 8));
                        //  put_byte(s, (Byte)(b & 0xff));
                        s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
                        s.pending_buf[s.pending++] = b & 0xff;
                    }


                    /* ===========================================================================
                     * Read a new buffer from the current input stream, update the adler32
                     * and total number of bytes read.  All deflate() input goes through
                     * this function so some applications may wish to modify it to avoid
                     * allocating a large strm->input buffer and copying from it.
                     * (See also flush_pending()).
                     */
                    function read_buf(strm, buf, start, size) {
                        var len = strm.avail_in;

                        if (len > size) {
                            len = size;
                        }
                        if (len === 0) {
                            return 0;
                        }

                        strm.avail_in -= len;

                        utils.arraySet(buf, strm.input, strm.next_in, len, start);
                        if (strm.state.wrap === 1) {
                            strm.adler = adler32(strm.adler, buf, len, start);
                        } else if (strm.state.wrap === 2) {
                            strm.adler = crc32(strm.adler, buf, len, start);
                        }

                        strm.next_in += len;
                        strm.total_in += len;

                        return len;
                    }


                    /* ===========================================================================
                     * Set match_start to the longest match starting at the given string and
                     * return its length. Matches shorter or equal to prev_length are discarded,
                     * in which case the result is equal to prev_length and match_start is
                     * garbage.
                     * IN assertions: cur_match is the head of the hash chain for the current
                     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
                     * OUT assertion: the match length is not greater than s->lookahead.
                     */
                    function longest_match(s, cur_match) {
                        var chain_length = s.max_chain_length;
                        /* max hash chain length */
                        var scan = s.strstart;
                        /* current string */
                        var match;
                        /* matched string */
                        var len;
                        /* length of current match */
                        var best_len = s.prev_length;
                        /* best match length so far */
                        var nice_match = s.nice_match;
                        /* stop if match long enough */
                        var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
                            s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

                        var _win = s.window; // shortcut

                        var wmask = s.w_mask;
                        var prev = s.prev;

                        /* Stop when cur_match becomes <= limit. To simplify the code,
                         * we prevent matches with the string of window index 0.
                         */

                        var strend = s.strstart + MAX_MATCH;
                        var scan_end1 = _win[scan + best_len - 1];
                        var scan_end = _win[scan + best_len];

                        /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                         * It is easy to get rid of this optimization if necessary.
                         */
                        // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

                        /* Do not waste too much time if we already have a good match: */
                        if (s.prev_length >= s.good_match) {
                            chain_length >>= 2;
                        }
                        /* Do not look for matches beyond the end of the input. This is necessary
                         * to make deflate deterministic.
                         */
                        if (nice_match > s.lookahead) {
                            nice_match = s.lookahead;
                        }

                        // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

                        do {
                            // Assert(cur_match < s->strstart, "no future");
                            match = cur_match;

                            /* Skip to next match if the match length cannot increase
                             * or if the match length is less than 2.  Note that the checks below
                             * for insufficient lookahead only occur occasionally for performance
                             * reasons.  Therefore uninitialized memory will be accessed, and
                             * conditional jumps will be made that depend on those values.
                             * However the length of the match is limited to the lookahead, so
                             * the output of deflate is not affected by the uninitialized values.
                             */

                            if (_win[match + best_len] !== scan_end ||
                                _win[match + best_len - 1] !== scan_end1 ||
                                _win[match] !== _win[scan] ||
                                _win[++match] !== _win[scan + 1]) {
                                continue;
                            }

                            /* The check at best_len-1 can be removed because it will be made
                             * again later. (This heuristic is not always a win.)
                             * It is not necessary to compare scan[2] and match[2] since they
                             * are always equal when the other bytes match, given that
                             * the hash keys are equal and that HASH_BITS >= 8.
                             */
                            scan += 2;
                            match++;
                            // Assert(*scan == *match, "match[2]?");

                            /* We check for insufficient lookahead only every 8th comparison;
                             * the 256th check will be made at strstart+258.
                             */
                            do {
                                /*jshint noempty:false*/
                            } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                                _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                                _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                                _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                                scan < strend);

                            // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

                            len = MAX_MATCH - (strend - scan);
                            scan = strend - MAX_MATCH;

                            if (len > best_len) {
                                s.match_start = cur_match;
                                best_len = len;
                                if (len >= nice_match) {
                                    break;
                                }
                                scan_end1 = _win[scan + best_len - 1];
                                scan_end = _win[scan + best_len];
                            }
                        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

                        if (best_len <= s.lookahead) {
                            return best_len;
                        }
                        return s.lookahead;
                    }


                    /* ===========================================================================
                     * Fill the window when the lookahead becomes insufficient.
                     * Updates strstart and lookahead.
                     *
                     * IN assertion: lookahead < MIN_LOOKAHEAD
                     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
                     *    At least one byte has been read, or avail_in == 0; reads are
                     *    performed for at least two bytes (required for the zip translate_eol
                     *    option -- not supported here).
                     */
                    function fill_window(s) {
                        var _w_size = s.w_size;
                        var p, n, m, more, str;

                        //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

                        do {
                            more = s.window_size - s.lookahead - s.strstart;

                            // JS ints have 32 bit, block below not needed
                            /* Deal with !@#$% 64K limit: */
                            //if (sizeof(int) <= 2) {
                            //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                            //        more = wsize;
                            //
                            //  } else if (more == (unsigned)(-1)) {
                            //        /* Very unlikely, but possible on 16 bit machine if
                            //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                            //         */
                            //        more--;
                            //    }
                            //}


                            /* If the window is almost full and there is insufficient lookahead,
                             * move the upper half to the lower one to make room in the upper half.
                             */
                            if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

                                utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                                s.match_start -= _w_size;
                                s.strstart -= _w_size;
                                /* we now have strstart >= MAX_DIST */
                                s.block_start -= _w_size;

                                /* Slide the hash table (could be avoided with 32 bit values
                                 at the expense of memory usage). We slide even when level == 0
                                 to keep the hash table consistent if we switch back to level > 0
                                 later. (Using level 0 permanently is not an optimal usage of
                                 zlib, so we don't care about this pathological case.)
                                 */

                                n = s.hash_size;
                                p = n;
                                do {
                                    m = s.head[--p];
                                    s.head[p] = (m >= _w_size ? m - _w_size : 0);
                                } while (--n);

                                n = _w_size;
                                p = n;
                                do {
                                    m = s.prev[--p];
                                    s.prev[p] = (m >= _w_size ? m - _w_size : 0);
                                    /* If n is not on any hash chain, prev[n] is garbage but
                                     * its value will never be used.
                                     */
                                } while (--n);

                                more += _w_size;
                            }
                            if (s.strm.avail_in === 0) {
                                break;
                            }

                            /* If there was no sliding:
                             *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                             *    more == window_size - lookahead - strstart
                             * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                             * => more >= window_size - 2*WSIZE + 2
                             * In the BIG_MEM or MMAP case (not yet supported),
                             *   window_size == input_size + MIN_LOOKAHEAD  &&
                             *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                             * Otherwise, window_size == 2*WSIZE so more >= 2.
                             * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                             */
                            //Assert(more >= 2, "more < 2");
                            n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                            s.lookahead += n;

                            /* Initialize the hash value now that we have some input: */
                            if (s.lookahead + s.insert >= MIN_MATCH) {
                                str = s.strstart - s.insert;
                                s.ins_h = s.window[str];

                                /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
                                //#if MIN_MATCH != 3
                                //        Call update_hash() MIN_MATCH-3 more times
                                //#endif
                                while (s.insert) {
                                    /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

                                    s.prev[str & s.w_mask] = s.head[s.ins_h];
                                    s.head[s.ins_h] = str;
                                    str++;
                                    s.insert--;
                                    if (s.lookahead + s.insert < MIN_MATCH) {
                                        break;
                                    }
                                }
                            }
                            /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                             * but this is not important since only literal bytes will be emitted.
                             */

                        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

                        /* If the WIN_INIT bytes after the end of the current data have never been
                         * written, then zero those bytes in order to avoid memory check reports of
                         * the use of uninitialized (or uninitialised as Julian writes) bytes by
                         * the longest match routines.  Update the high water mark for the next
                         * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                         * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                         */
                        //  if (s.high_water < s.window_size) {
                        //    var curr = s.strstart + s.lookahead;
                        //    var init = 0;
                        //
                        //    if (s.high_water < curr) {
                        //      /* Previous high water mark below current data -- zero WIN_INIT
                        //       * bytes or up to end of window, whichever is less.
                        //       */
                        //      init = s.window_size - curr;
                        //      if (init > WIN_INIT)
                        //        init = WIN_INIT;
                        //      zmemzero(s->window + curr, (unsigned)init);
                        //      s->high_water = curr + init;
                        //    }
                        //    else if (s->high_water < (ulg)curr + WIN_INIT) {
                        //      /* High water mark at or above current data, but below current data
                        //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
                        //       * to end of window, whichever is less.
                        //       */
                        //      init = (ulg)curr + WIN_INIT - s->high_water;
                        //      if (init > s->window_size - s->high_water)
                        //        init = s->window_size - s->high_water;
                        //      zmemzero(s->window + s->high_water, (unsigned)init);
                        //      s->high_water += init;
                        //    }
                        //  }
                        //
                        //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
                        //    "not enough room for search");
                    }

                    /* ===========================================================================
                     * Copy without compression as much as possible from the input stream, return
                     * the current block state.
                     * This function does not insert new strings in the dictionary since
                     * uncompressible data is probably not useful. This function is used
                     * only for the level=0 compression option.
                     * NOTE: this function should be optimized to avoid extra copying from
                     * window to pending_buf.
                     */
                    function deflate_stored(s, flush) {
                        /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
                         * to pending_buf_size, and each stored block has a 5 byte header:
                         */
                        var max_block_size = 0xffff;

                        if (max_block_size > s.pending_buf_size - 5) {
                            max_block_size = s.pending_buf_size - 5;
                        }

                        /* Copy as much as possible from input to output: */
                        for (;;) {
                            /* Fill the window as much as possible: */
                            if (s.lookahead <= 1) {

                                //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                                //  s->block_start >= (long)s->w_size, "slide too late");
                                //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                                //        s.block_start >= s.w_size)) {
                                //        throw  new Error("slide too late");
                                //      }

                                fill_window(s);
                                if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }

                                if (s.lookahead === 0) {
                                    break;
                                }
                                /* flush the current block */
                            }
                            //Assert(s->block_start >= 0L, "block gone");
                            //    if (s.block_start < 0) throw new Error("block gone");

                            s.strstart += s.lookahead;
                            s.lookahead = 0;

                            /* Emit a stored block if pending_buf will be full: */
                            var max_start = s.block_start + max_block_size;

                            if (s.strstart === 0 || s.strstart >= max_start) {
                                /* strstart == 0 is possible when wraparound on 16-bit machine */
                                s.lookahead = s.strstart - max_start;
                                s.strstart = max_start;
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/


                            }
                            /* Flush if we may have to slide, otherwise block_start may become
                             * negative and the data will be gone:
                             */
                            if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }
                        }

                        s.insert = 0;

                        if (flush === Z_FINISH) {
                            /*** FLUSH_BLOCK(s, 1); ***/
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            /***/
                            return BS_FINISH_DONE;
                        }

                        if (s.strstart > s.block_start) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }

                        return BS_NEED_MORE;
                    }

                    /* ===========================================================================
                     * Compress as much as possible from the input stream, return the current
                     * block state.
                     * This function does not perform lazy evaluation of matches and inserts
                     * new strings in the dictionary only for unmatched strings or for short
                     * matches. It is used only for the fast compression options.
                     */
                    function deflate_fast(s, flush) {
                        var hash_head;
                        /* head of the hash chain */
                        var bflush;
                        /* set if current block must be flushed */

                        for (;;) {
                            /* Make sure that we always have enough lookahead, except
                             * at the end of the input file. We need MAX_MATCH bytes
                             * for the next match, plus MIN_MATCH bytes to insert the
                             * string following the next match.
                             */
                            if (s.lookahead < MIN_LOOKAHEAD) {
                                fill_window(s);
                                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                    /* flush the current block */
                                }
                            }

                            /* Insert the string window[strstart .. strstart+2] in the
                             * dictionary, and set hash_head to the head of the hash chain:
                             */
                            hash_head = 0 /*NIL*/ ;
                            if (s.lookahead >= MIN_MATCH) {
                                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                                /***/
                            }

                            /* Find the longest match, discarding those <= prev_length.
                             * At this point we have always match_length < MIN_MATCH
                             */
                            if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
                                /* To simplify the code, we prevent matches with the string
                                 * of window index 0 (in particular we have to avoid a match
                                 * of the string with itself at the start of the input file).
                                 */
                                s.match_length = longest_match(s, hash_head);
                                /* longest_match() sets match_start */
                            }
                            if (s.match_length >= MIN_MATCH) {
                                // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                                /*** _tr_tally_dist(s, s.strstart - s.match_start,
                                 s.match_length - MIN_MATCH, bflush); ***/
                                bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

                                s.lookahead -= s.match_length;

                                /* Insert new strings in the hash table only if the match length
                                 * is not too large. This saves time but degrades compression.
                                 */
                                if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
                                    s.match_length--;
                                    /* string at strstart already in table */
                                    do {
                                        s.strstart++;
                                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                        s.head[s.ins_h] = s.strstart;
                                        /***/
                                        /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                                         * always MIN_MATCH bytes ahead.
                                         */
                                    } while (--s.match_length !== 0);
                                    s.strstart++;
                                } else {
                                    s.strstart += s.match_length;
                                    s.match_length = 0;
                                    s.ins_h = s.window[s.strstart];
                                    /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
                                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

                                    //#if MIN_MATCH != 3
                                    //                Call UPDATE_HASH() MIN_MATCH-3 more times
                                    //#endif
                                    /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                                     * matter since it will be recomputed at next deflate call.
                                     */
                                }
                            } else {
                                /* No match, output a literal byte */
                                //Tracevv((stderr,"%c", s.window[s.strstart]));
                                /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                                s.lookahead--;
                                s.strstart++;
                            }
                            if (bflush) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }
                        }
                        s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
                        if (flush === Z_FINISH) {
                            /*** FLUSH_BLOCK(s, 1); ***/
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            /***/
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                        return BS_BLOCK_DONE;
                    }

                    /* ===========================================================================
                     * Same as above, but achieves better compression. We use a lazy
                     * evaluation for matches: a match is finally adopted only if there is
                     * no better match at the next window position.
                     */
                    function deflate_slow(s, flush) {
                        var hash_head;
                        /* head of hash chain */
                        var bflush;
                        /* set if current block must be flushed */

                        var max_insert;

                        /* Process the input block. */
                        for (;;) {
                            /* Make sure that we always have enough lookahead, except
                             * at the end of the input file. We need MAX_MATCH bytes
                             * for the next match, plus MIN_MATCH bytes to insert the
                             * string following the next match.
                             */
                            if (s.lookahead < MIN_LOOKAHEAD) {
                                fill_window(s);
                                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                                /* flush the current block */
                            }

                            /* Insert the string window[strstart .. strstart+2] in the
                             * dictionary, and set hash_head to the head of the hash chain:
                             */
                            hash_head = 0 /*NIL*/ ;
                            if (s.lookahead >= MIN_MATCH) {
                                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                                /***/
                            }

                            /* Find the longest match, discarding those <= prev_length.
                             */
                            s.prev_length = s.match_length;
                            s.prev_match = s.match_start;
                            s.match_length = MIN_MATCH - 1;

                            if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
                                s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
                                /* To simplify the code, we prevent matches with the string
                                 * of window index 0 (in particular we have to avoid a match
                                 * of the string with itself at the start of the input file).
                                 */
                                s.match_length = longest_match(s, hash_head);
                                /* longest_match() sets match_start */

                                if (s.match_length <= 5 &&
                                    (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

                                    /* If prev_match is also MIN_MATCH, match_start is garbage
                                     * but we will ignore the current match anyway.
                                     */
                                    s.match_length = MIN_MATCH - 1;
                                }
                            }
                            /* If there was a match at the previous step and the current
                             * match is not better, output the previous match:
                             */
                            if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                                max_insert = s.strstart + s.lookahead - MIN_MATCH;
                                /* Do not insert strings in hash table beyond this. */

                                //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                                /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                                 s.prev_length - MIN_MATCH, bflush);***/
                                bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                                /* Insert in hash table all strings up to the end of the match.
                                 * strstart-1 and strstart are already inserted. If there is not
                                 * enough lookahead, the last two strings are not inserted in
                                 * the hash table.
                                 */
                                s.lookahead -= s.prev_length - 1;
                                s.prev_length -= 2;
                                do {
                                    if (++s.strstart <= max_insert) {
                                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                        s.head[s.ins_h] = s.strstart;
                                        /***/
                                    }
                                } while (--s.prev_length !== 0);
                                s.match_available = 0;
                                s.match_length = MIN_MATCH - 1;
                                s.strstart++;

                                if (bflush) {
                                    /*** FLUSH_BLOCK(s, 0); ***/
                                    flush_block_only(s, false);
                                    if (s.strm.avail_out === 0) {
                                        return BS_NEED_MORE;
                                    }
                                    /***/
                                }

                            } else if (s.match_available) {
                                /* If there was no match at the previous position, output a
                                 * single literal. If there was a match but the current match
                                 * is longer, truncate the previous match to a single literal.
                                 */
                                //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                                /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                                if (bflush) {
                                    /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                                    flush_block_only(s, false);
                                    /***/
                                }
                                s.strstart++;
                                s.lookahead--;
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            } else {
                                /* There is no previous match to compare with, wait for
                                 * the next step to decide.
                                 */
                                s.match_available = 1;
                                s.strstart++;
                                s.lookahead--;
                            }
                        }
                        //Assert (flush != Z_NO_FLUSH, "no flush?");
                        if (s.match_available) {
                            //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                            s.match_available = 0;
                        }
                        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                        if (flush === Z_FINISH) {
                            /*** FLUSH_BLOCK(s, 1); ***/
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            /***/
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }

                        return BS_BLOCK_DONE;
                    }


                    /* ===========================================================================
                     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
                     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
                     * deflate switches away from Z_RLE.)
                     */
                    function deflate_rle(s, flush) {
                        var bflush;
                        /* set if current block must be flushed */
                        var prev;
                        /* byte at distance one to match */
                        var scan, strend;
                        /* scan goes up to strend for length of run */

                        var _win = s.window;

                        for (;;) {
                            /* Make sure that we always have enough lookahead, except
                             * at the end of the input file. We need MAX_MATCH bytes
                             * for the longest run, plus one for the unrolled loop.
                             */
                            if (s.lookahead <= MAX_MATCH) {
                                fill_window(s);
                                if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                                /* flush the current block */
                            }

                            /* See how many times the previous byte repeats */
                            s.match_length = 0;
                            if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                                scan = s.strstart - 1;
                                prev = _win[scan];
                                if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                                    strend = s.strstart + MAX_MATCH;
                                    do {
                                        /*jshint noempty:false*/
                                    } while (prev === _win[++scan] && prev === _win[++scan] &&
                                        prev === _win[++scan] && prev === _win[++scan] &&
                                        prev === _win[++scan] && prev === _win[++scan] &&
                                        prev === _win[++scan] && prev === _win[++scan] &&
                                        scan < strend);
                                    s.match_length = MAX_MATCH - (strend - scan);
                                    if (s.match_length > s.lookahead) {
                                        s.match_length = s.lookahead;
                                    }
                                }
                                //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
                            }

                            /* Emit match if have run of MIN_MATCH or longer, else emit literal */
                            if (s.match_length >= MIN_MATCH) {
                                //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                                /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                                bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

                                s.lookahead -= s.match_length;
                                s.strstart += s.match_length;
                                s.match_length = 0;
                            } else {
                                /* No match, output a literal byte */
                                //Tracevv((stderr,"%c", s->window[s->strstart]));
                                /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                                s.lookahead--;
                                s.strstart++;
                            }
                            if (bflush) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }
                        }
                        s.insert = 0;
                        if (flush === Z_FINISH) {
                            /*** FLUSH_BLOCK(s, 1); ***/
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            /***/
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                        return BS_BLOCK_DONE;
                    }

                    /* ===========================================================================
                     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
                     * (It will be regenerated if this run of deflate switches away from Huffman.)
                     */
                    function deflate_huff(s, flush) {
                        var bflush;
                        /* set if current block must be flushed */

                        for (;;) {
                            /* Make sure that we have a literal to write. */
                            if (s.lookahead === 0) {
                                fill_window(s);
                                if (s.lookahead === 0) {
                                    if (flush === Z_NO_FLUSH) {
                                        return BS_NEED_MORE;
                                    }
                                    break;
                                    /* flush the current block */
                                }
                            }

                            /* Output a literal byte */
                            s.match_length = 0;
                            //Tracevv((stderr,"%c", s->window[s->strstart]));
                            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                            s.lookahead--;
                            s.strstart++;
                            if (bflush) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }
                        }
                        s.insert = 0;
                        if (flush === Z_FINISH) {
                            /*** FLUSH_BLOCK(s, 1); ***/
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            /***/
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                        return BS_BLOCK_DONE;
                    }

                    /* Values for max_lazy_match, good_match and max_chain_length, depending on
                     * the desired pack level (0..9). The values given below have been tuned to
                     * exclude worst case performance for pathological files. Better values may be
                     * found for specific files.
                     */
                    var Config = function(good_length, max_lazy, nice_length, max_chain, func) {
                        this.good_length = good_length;
                        this.max_lazy = max_lazy;
                        this.nice_length = nice_length;
                        this.max_chain = max_chain;
                        this.func = func;
                    };

                    var configuration_table;

                    configuration_table = [
                        /*      good lazy nice chain */
                        new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
                        new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
                        new Config(4, 5, 16, 8, deflate_fast), /* 2 */
                        new Config(4, 6, 32, 32, deflate_fast), /* 3 */

                        new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
                        new Config(8, 16, 32, 32, deflate_slow), /* 5 */
                        new Config(8, 16, 128, 128, deflate_slow), /* 6 */
                        new Config(8, 32, 128, 256, deflate_slow), /* 7 */
                        new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
                        new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
                    ];


                    /* ===========================================================================
                     * Initialize the "longest match" routines for a new zlib stream
                     */
                    function lm_init(s) {
                        s.window_size = 2 * s.w_size;

                        /*** CLEAR_HASH(s); ***/
                        zero(s.head); // Fill with NIL (= 0);

                        /* Set the default configuration parameters:
                         */
                        s.max_lazy_match = configuration_table[s.level].max_lazy;
                        s.good_match = configuration_table[s.level].good_length;
                        s.nice_match = configuration_table[s.level].nice_length;
                        s.max_chain_length = configuration_table[s.level].max_chain;

                        s.strstart = 0;
                        s.block_start = 0;
                        s.lookahead = 0;
                        s.insert = 0;
                        s.match_length = s.prev_length = MIN_MATCH - 1;
                        s.match_available = 0;
                        s.ins_h = 0;
                    }


                    function DeflateState() {
                        this.strm = null;
                        /* pointer back to this zlib stream */
                        this.status = 0;
                        /* as the name implies */
                        this.pending_buf = null;
                        /* output still pending */
                        this.pending_buf_size = 0;
                        /* size of pending_buf */
                        this.pending_out = 0;
                        /* next pending byte to output to the stream */
                        this.pending = 0;
                        /* nb of bytes in the pending buffer */
                        this.wrap = 0;
                        /* bit 0 true for zlib, bit 1 true for gzip */
                        this.gzhead = null;
                        /* gzip header information to write */
                        this.gzindex = 0;
                        /* where in extra, name, or comment */
                        this.method = Z_DEFLATED;
                        /* can only be DEFLATED */
                        this.last_flush = -1;
                        /* value of flush param for previous deflate call */

                        this.w_size = 0;
                        /* LZ77 window size (32K by default) */
                        this.w_bits = 0;
                        /* log2(w_size)  (8..16) */
                        this.w_mask = 0;
                        /* w_size - 1 */

                        this.window = null;
                        /* Sliding window. Input bytes are read into the second half of the window,
                         * and move to the first half later to keep a dictionary of at least wSize
                         * bytes. With this organization, matches are limited to a distance of
                         * wSize-MAX_MATCH bytes, but this ensures that IO is always
                         * performed with a length multiple of the block size.
                         */

                        this.window_size = 0;
                        /* Actual size of window: 2*wSize, except when the user input buffer
                         * is directly used as sliding window.
                         */

                        this.prev = null;
                        /* Link to older string with same hash index. To limit the size of this
                         * array to 64K, this link is maintained only for the last 32K strings.
                         * An index in this array is thus a window index modulo 32K.
                         */

                        this.head = null;
                        /* Heads of the hash chains or NIL. */

                        this.ins_h = 0;
                        /* hash index of string to be inserted */
                        this.hash_size = 0;
                        /* number of elements in hash table */
                        this.hash_bits = 0;
                        /* log2(hash_size) */
                        this.hash_mask = 0;
                        /* hash_size-1 */

                        this.hash_shift = 0;
                        /* Number of bits by which ins_h must be shifted at each input
                         * step. It must be such that after MIN_MATCH steps, the oldest
                         * byte no longer takes part in the hash key, that is:
                         *   hash_shift * MIN_MATCH >= hash_bits
                         */

                        this.block_start = 0;
                        /* Window position at the beginning of the current output block. Gets
                         * negative when the window is moved backwards.
                         */

                        this.match_length = 0;
                        /* length of best match */
                        this.prev_match = 0;
                        /* previous match */
                        this.match_available = 0;
                        /* set if previous match exists */
                        this.strstart = 0;
                        /* start of string to insert */
                        this.match_start = 0;
                        /* start of matching string */
                        this.lookahead = 0;
                        /* number of valid bytes ahead in window */

                        this.prev_length = 0;
                        /* Length of the best match at previous step. Matches not greater than this
                         * are discarded. This is used in the lazy match evaluation.
                         */

                        this.max_chain_length = 0;
                        /* To speed up deflation, hash chains are never searched beyond this
                         * length.  A higher limit improves compression ratio but degrades the
                         * speed.
                         */

                        this.max_lazy_match = 0;
                        /* Attempt to find a better match only when the current match is strictly
                         * smaller than this value. This mechanism is used only for compression
                         * levels >= 4.
                         */
                        // That's alias to max_lazy_match, don't use directly
                        //this.max_insert_length = 0;
                        /* Insert new strings in the hash table only if the match length is not
                         * greater than this length. This saves time but degrades compression.
                         * max_insert_length is used only for compression levels <= 3.
                         */

                        this.level = 0;
                        /* compression level (1..9) */
                        this.strategy = 0;
                        /* favor or force Huffman coding*/

                        this.good_match = 0;
                        /* Use a faster search when the previous match is longer than this */

                        this.nice_match = 0;
                        /* Stop searching when current match exceeds this */

                        /* used by trees.c: */

                        /* Didn't use ct_data typedef below to suppress compiler warning */

                        // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
                        // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
                        // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

                        // Use flat array of DOUBLE size, with interleaved fata,
                        // because JS does not support effective
                        this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
                        this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
                        this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
                        zero(this.dyn_ltree);
                        zero(this.dyn_dtree);
                        zero(this.bl_tree);

                        this.l_desc = null;
                        /* desc. for literal tree */
                        this.d_desc = null;
                        /* desc. for distance tree */
                        this.bl_desc = null;
                        /* desc. for bit length tree */

                        //ush bl_count[MAX_BITS+1];
                        this.bl_count = new utils.Buf16(MAX_BITS + 1);
                        /* number of codes at each bit length for an optimal tree */

                        //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
                        this.heap = new utils.Buf16(2 * L_CODES + 1);
                        /* heap used to build the Huffman trees */
                        zero(this.heap);

                        this.heap_len = 0;
                        /* number of elements in the heap */
                        this.heap_max = 0;
                        /* element of largest frequency */
                        /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                         * The same heap array is used to build all trees.
                         */

                        this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
                        zero(this.depth);
                        /* Depth of each subtree used as tie breaker for trees of equal frequency
                         */

                        this.l_buf = 0;
                        /* buffer index for literals or lengths */

                        this.lit_bufsize = 0;
                        /* Size of match buffer for literals/lengths.  There are 4 reasons for
                         * limiting lit_bufsize to 64K:
                         *   - frequencies can be kept in 16 bit counters
                         *   - if compression is not successful for the first block, all input
                         *     data is still in the window so we can still emit a stored block even
                         *     when input comes from standard input.  (This can also be done for
                         *     all blocks if lit_bufsize is not greater than 32K.)
                         *   - if compression is not successful for a file smaller than 64K, we can
                         *     even emit a stored file instead of a stored block (saving 5 bytes).
                         *     This is applicable only for zip (not gzip or zlib).
                         *   - creating new Huffman trees less frequently may not provide fast
                         *     adaptation to changes in the input data statistics. (Take for
                         *     example a binary file with poorly compressible code followed by
                         *     a highly compressible string table.) Smaller buffer sizes give
                         *     fast adaptation but have of course the overhead of transmitting
                         *     trees more frequently.
                         *   - I can't count above 4
                         */

                        this.last_lit = 0;
                        /* running index in l_buf */

                        this.d_buf = 0;
                        /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                         * the same number of elements. To use different lengths, an extra flag
                         * array would be necessary.
                         */

                        this.opt_len = 0;
                        /* bit length of current block with optimal trees */
                        this.static_len = 0;
                        /* bit length of current block with static trees */
                        this.matches = 0;
                        /* number of string matches in current block */
                        this.insert = 0;
                        /* bytes at end of window left to insert */


                        this.bi_buf = 0;
                        /* Output buffer. bits are inserted starting at the bottom (least
                         * significant bits).
                         */
                        this.bi_valid = 0;
                        /* Number of valid bits in bi_buf.  All bits above the last valid bit
                         * are always zero.
                         */

                        // Used for window memory init. We safely ignore it for JS. That makes
                        // sense only for pointers and memory check tools.
                        //this.high_water = 0;
                        /* High water mark offset in window for initialized bytes -- bytes above
                         * this are set to zero in order to avoid memory check warnings when
                         * longest match routines access bytes past the input.  This is then
                         * updated to the new high water mark.
                         */
                    }


                    function deflateResetKeep(strm) {
                        var s;

                        if (!strm || !strm.state) {
                            return err(strm, Z_STREAM_ERROR);
                        }

                        strm.total_in = strm.total_out = 0;
                        strm.data_type = Z_UNKNOWN;

                        s = strm.state;
                        s.pending = 0;
                        s.pending_out = 0;

                        if (s.wrap < 0) {
                            s.wrap = -s.wrap;
                            /* was made negative by deflate(..., Z_FINISH); */
                        }
                        s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
                        strm.adler = (s.wrap === 2) ?
                            0 // crc32(0, Z_NULL, 0)
                            :
                            1; // adler32(0, Z_NULL, 0)
                        s.last_flush = Z_NO_FLUSH;
                        trees._tr_init(s);
                        return Z_OK;
                    }


                    function deflateReset(strm) {
                        var ret = deflateResetKeep(strm);
                        if (ret === Z_OK) {
                            lm_init(strm.state);
                        }
                        return ret;
                    }


                    function deflateSetHeader(strm, head) {
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        if (strm.state.wrap !== 2) {
                            return Z_STREAM_ERROR;
                        }
                        strm.state.gzhead = head;
                        return Z_OK;
                    }


                    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
                        if (!strm) { // === Z_NULL
                            return Z_STREAM_ERROR;
                        }
                        var wrap = 1;

                        if (level === Z_DEFAULT_COMPRESSION) {
                            level = 6;
                        }

                        if (windowBits < 0) { /* suppress zlib wrapper */
                            wrap = 0;
                            windowBits = -windowBits;
                        } else if (windowBits > 15) {
                            wrap = 2;
                            /* write gzip wrapper instead */
                            windowBits -= 16;
                        }


                        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
                            windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
                            strategy < 0 || strategy > Z_FIXED) {
                            return err(strm, Z_STREAM_ERROR);
                        }


                        if (windowBits === 8) {
                            windowBits = 9;
                        }
                        /* until 256-byte window bug fixed */

                        var s = new DeflateState();

                        strm.state = s;
                        s.strm = strm;

                        s.wrap = wrap;
                        s.gzhead = null;
                        s.w_bits = windowBits;
                        s.w_size = 1 << s.w_bits;
                        s.w_mask = s.w_size - 1;

                        s.hash_bits = memLevel + 7;
                        s.hash_size = 1 << s.hash_bits;
                        s.hash_mask = s.hash_size - 1;
                        s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

                        s.window = new utils.Buf8(s.w_size * 2);
                        s.head = new utils.Buf16(s.hash_size);
                        s.prev = new utils.Buf16(s.w_size);

                        // Don't need mem init magic for JS.
                        //s.high_water = 0;  /* nothing written to s->window yet */

                        s.lit_bufsize = 1 << (memLevel + 6);
                        /* 16K elements by default */

                        s.pending_buf_size = s.lit_bufsize * 4;
                        s.pending_buf = new utils.Buf8(s.pending_buf_size);

                        s.d_buf = s.lit_bufsize >> 1;
                        s.l_buf = (1 + 2) * s.lit_bufsize;

                        s.level = level;
                        s.strategy = strategy;
                        s.method = method;

                        return deflateReset(strm);
                    }

                    function deflateInit(strm, level) {
                        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
                    }


                    function deflate(strm, flush) {
                        var old_flush, s;
                        var beg, val; // for gzip header write only

                        if (!strm || !strm.state ||
                            flush > Z_BLOCK || flush < 0) {
                            return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
                        }

                        s = strm.state;

                        if (!strm.output ||
                            (!strm.input && strm.avail_in !== 0) ||
                            (s.status === FINISH_STATE && flush !== Z_FINISH)) {
                            return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
                        }

                        s.strm = strm;
                        /* just in case */
                        old_flush = s.last_flush;
                        s.last_flush = flush;

                        /* Write the header */
                        if (s.status === INIT_STATE) {

                            if (s.wrap === 2) { // GZIP header
                                strm.adler = 0; //crc32(0L, Z_NULL, 0);
                                put_byte(s, 31);
                                put_byte(s, 139);
                                put_byte(s, 8);
                                if (!s.gzhead) { // s->gzhead == Z_NULL
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, s.level === 9 ? 2 :
                                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                            4 : 0));
                                    put_byte(s, OS_CODE);
                                    s.status = BUSY_STATE;
                                } else {
                                    put_byte(s, (s.gzhead.text ? 1 : 0) +
                                        (s.gzhead.hcrc ? 2 : 0) +
                                        (!s.gzhead.extra ? 0 : 4) +
                                        (!s.gzhead.name ? 0 : 8) +
                                        (!s.gzhead.comment ? 0 : 16)
                                    );
                                    put_byte(s, s.gzhead.time & 0xff);
                                    put_byte(s, (s.gzhead.time >> 8) & 0xff);
                                    put_byte(s, (s.gzhead.time >> 16) & 0xff);
                                    put_byte(s, (s.gzhead.time >> 24) & 0xff);
                                    put_byte(s, s.level === 9 ? 2 :
                                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                            4 : 0));
                                    put_byte(s, s.gzhead.os & 0xff);
                                    if (s.gzhead.extra && s.gzhead.extra.length) {
                                        put_byte(s, s.gzhead.extra.length & 0xff);
                                        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
                                    }
                                    if (s.gzhead.hcrc) {
                                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                                    }
                                    s.gzindex = 0;
                                    s.status = EXTRA_STATE;
                                }
                            } else // DEFLATE header
                            {
                                var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
                                var level_flags = -1;

                                if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                                    level_flags = 0;
                                } else if (s.level < 6) {
                                    level_flags = 1;
                                } else if (s.level === 6) {
                                    level_flags = 2;
                                } else {
                                    level_flags = 3;
                                }
                                header |= (level_flags << 6);
                                if (s.strstart !== 0) {
                                    header |= PRESET_DICT;
                                }
                                header += 31 - (header % 31);

                                s.status = BUSY_STATE;
                                putShortMSB(s, header);

                                /* Save the adler32 of the preset dictionary: */
                                if (s.strstart !== 0) {
                                    putShortMSB(s, strm.adler >>> 16);
                                    putShortMSB(s, strm.adler & 0xffff);
                                }
                                strm.adler = 1; // adler32(0L, Z_NULL, 0);
                            }
                        }

                        //#ifdef GZIP
                        if (s.status === EXTRA_STATE) {
                            if (s.gzhead.extra /* != Z_NULL*/ ) {
                                beg = s.pending;
                                /* start of bytes to update crc */

                                while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            break;
                                        }
                                    }
                                    put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                                    s.gzindex++;
                                }
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (s.gzindex === s.gzhead.extra.length) {
                                    s.gzindex = 0;
                                    s.status = NAME_STATE;
                                }
                            } else {
                                s.status = NAME_STATE;
                            }
                        }
                        if (s.status === NAME_STATE) {
                            if (s.gzhead.name /* != Z_NULL*/ ) {
                                beg = s.pending;
                                /* start of bytes to update crc */
                                //int val;

                                do {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            val = 1;
                                            break;
                                        }
                                    }
                                    // JS specific: little magic to add zero terminator to end of string
                                    if (s.gzindex < s.gzhead.name.length) {
                                        val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                                    } else {
                                        val = 0;
                                    }
                                    put_byte(s, val);
                                } while (val !== 0);

                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (val === 0) {
                                    s.gzindex = 0;
                                    s.status = COMMENT_STATE;
                                }
                            } else {
                                s.status = COMMENT_STATE;
                            }
                        }
                        if (s.status === COMMENT_STATE) {
                            if (s.gzhead.comment /* != Z_NULL*/ ) {
                                beg = s.pending;
                                /* start of bytes to update crc */
                                //int val;

                                do {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            val = 1;
                                            break;
                                        }
                                    }
                                    // JS specific: little magic to add zero terminator to end of string
                                    if (s.gzindex < s.gzhead.comment.length) {
                                        val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                                    } else {
                                        val = 0;
                                    }
                                    put_byte(s, val);
                                } while (val !== 0);

                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (val === 0) {
                                    s.status = HCRC_STATE;
                                }
                            } else {
                                s.status = HCRC_STATE;
                            }
                        }
                        if (s.status === HCRC_STATE) {
                            if (s.gzhead.hcrc) {
                                if (s.pending + 2 > s.pending_buf_size) {
                                    flush_pending(strm);
                                }
                                if (s.pending + 2 <= s.pending_buf_size) {
                                    put_byte(s, strm.adler & 0xff);
                                    put_byte(s, (strm.adler >> 8) & 0xff);
                                    strm.adler = 0; //crc32(0L, Z_NULL, 0);
                                    s.status = BUSY_STATE;
                                }
                            } else {
                                s.status = BUSY_STATE;
                            }
                        }
                        //#endif

                        /* Flush as much pending output as possible */
                        if (s.pending !== 0) {
                            flush_pending(strm);
                            if (strm.avail_out === 0) {
                                /* Since avail_out is 0, deflate will be called again with
                                 * more output space, but possibly with both pending and
                                 * avail_in equal to zero. There won't be anything to do,
                                 * but this is not an error situation so make sure we
                                 * return OK instead of BUF_ERROR at next call of deflate:
                                 */
                                s.last_flush = -1;
                                return Z_OK;
                            }

                            /* Make sure there is something to do and avoid duplicate consecutive
                             * flushes. For repeated and useless calls with Z_FINISH, we keep
                             * returning Z_STREAM_END instead of Z_BUF_ERROR.
                             */
                        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
                            flush !== Z_FINISH) {
                            return err(strm, Z_BUF_ERROR);
                        }

                        /* User must not provide more input after the first FINISH: */
                        if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                            return err(strm, Z_BUF_ERROR);
                        }

                        /* Start a new block or continue the current one.
                         */
                        if (strm.avail_in !== 0 || s.lookahead !== 0 ||
                            (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
                            var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
                                (s.strategy === Z_RLE ? deflate_rle(s, flush) :
                                    configuration_table[s.level].func(s, flush));

                            if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                                s.status = FINISH_STATE;
                            }
                            if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                                if (strm.avail_out === 0) {
                                    s.last_flush = -1;
                                    /* avoid BUF_ERROR next call, see above */
                                }
                                return Z_OK;
                                /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                                 * of deflate should use the same flush parameter to make sure
                                 * that the flush is complete. So we don't have to output an
                                 * empty block here, this will be done at next call. This also
                                 * ensures that for a very small output buffer, we emit at most
                                 * one empty block.
                                 */
                            }
                            if (bstate === BS_BLOCK_DONE) {
                                if (flush === Z_PARTIAL_FLUSH) {
                                    trees._tr_align(s);
                                } else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

                                    trees._tr_stored_block(s, 0, 0, false);
                                    /* For a full flush, this empty block will be recognized
                                     * as a special marker by inflate_sync().
                                     */
                                    if (flush === Z_FULL_FLUSH) {
                                        /*** CLEAR_HASH(s); ***/
                                        /* forget history */
                                        zero(s.head); // Fill with NIL (= 0);

                                        if (s.lookahead === 0) {
                                            s.strstart = 0;
                                            s.block_start = 0;
                                            s.insert = 0;
                                        }
                                    }
                                }
                                flush_pending(strm);
                                if (strm.avail_out === 0) {
                                    s.last_flush = -1;
                                    /* avoid BUF_ERROR at next call, see above */
                                    return Z_OK;
                                }
                            }
                        }
                        //Assert(strm->avail_out > 0, "bug2");
                        //if (strm.avail_out <= 0) { throw new Error("bug2");}

                        if (flush !== Z_FINISH) {
                            return Z_OK;
                        }
                        if (s.wrap <= 0) {
                            return Z_STREAM_END;
                        }

                        /* Write the trailer */
                        if (s.wrap === 2) {
                            put_byte(s, strm.adler & 0xff);
                            put_byte(s, (strm.adler >> 8) & 0xff);
                            put_byte(s, (strm.adler >> 16) & 0xff);
                            put_byte(s, (strm.adler >> 24) & 0xff);
                            put_byte(s, strm.total_in & 0xff);
                            put_byte(s, (strm.total_in >> 8) & 0xff);
                            put_byte(s, (strm.total_in >> 16) & 0xff);
                            put_byte(s, (strm.total_in >> 24) & 0xff);
                        } else {
                            putShortMSB(s, strm.adler >>> 16);
                            putShortMSB(s, strm.adler & 0xffff);
                        }

                        flush_pending(strm);
                        /* If avail_out is zero, the application will call deflate again
                         * to flush the rest.
                         */
                        if (s.wrap > 0) {
                            s.wrap = -s.wrap;
                        }
                        /* write the trailer only once! */
                        return s.pending !== 0 ? Z_OK : Z_STREAM_END;
                    }

                    function deflateEnd(strm) {
                        var status;

                        if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
                            return Z_STREAM_ERROR;
                        }

                        status = strm.state.status;
                        if (status !== INIT_STATE &&
                            status !== EXTRA_STATE &&
                            status !== NAME_STATE &&
                            status !== COMMENT_STATE &&
                            status !== HCRC_STATE &&
                            status !== BUSY_STATE &&
                            status !== FINISH_STATE
                        ) {
                            return err(strm, Z_STREAM_ERROR);
                        }

                        strm.state = null;

                        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
                    }

                    /* =========================================================================
                     * Copy the source state to the destination state
                     */
                    //function deflateCopy(dest, source) {
                    //
                    //}

                    exports.deflateInit = deflateInit;
                    exports.deflateInit2 = deflateInit2;
                    exports.deflateReset = deflateReset;
                    exports.deflateResetKeep = deflateResetKeep;
                    exports.deflateSetHeader = deflateSetHeader;
                    exports.deflate = deflate;
                    exports.deflateEnd = deflateEnd;
                    exports.deflateInfo = 'pako deflate (from Nodeca project)';

                    /* Not implemented
                     exports.deflateBound = deflateBound;
                     exports.deflateCopy = deflateCopy;
                     exports.deflateSetDictionary = deflateSetDictionary;
                     exports.deflateParams = deflateParams;
                     exports.deflatePending = deflatePending;
                     exports.deflatePrime = deflatePrime;
                     exports.deflateTune = deflateTune;
                     */
                }, {
                    "../utils/common": 27,
                    "./adler32": 29,
                    "./crc32": 31,
                    "./messages": 37,
                    "./trees": 38
                }],
                33: [function(_dereq_, module, exports) {
                    'use strict';


                    function GZheader() {
                        /* true if compressed data believed to be text */
                        this.text = 0;
                        /* modification time */
                        this.time = 0;
                        /* extra flags (not used when writing a gzip file) */
                        this.xflags = 0;
                        /* operating system */
                        this.os = 0;
                        /* pointer to extra field or Z_NULL if none */
                        this.extra = null;
                        /* extra field length (valid if extra != Z_NULL) */
                        this.extra_len = 0; // Actually, we don't need it in JS,
                        // but leave for few code modifications

                        //
                        // Setup limits is not necessary because in js we should not preallocate memory
                        // for inflate use constant limit in 65536 bytes
                        //

                        /* space at extra (only when reading header) */
                        // this.extra_max  = 0;
                        /* pointer to zero-terminated file name or Z_NULL */
                        this.name = '';
                        /* space at name (only when reading header) */
                        // this.name_max   = 0;
                        /* pointer to zero-terminated comment or Z_NULL */
                        this.comment = '';
                        /* space at comment (only when reading header) */
                        // this.comm_max   = 0;
                        /* true if there was or will be a header crc */
                        this.hcrc = 0;
                        /* true when done reading gzip header (not used when writing a gzip file) */
                        this.done = false;
                    }

                    module.exports = GZheader;
                }, {}],
                34: [function(_dereq_, module, exports) {
                    'use strict';

                    // See state defs from inflate.js
                    var BAD = 30;
                    /* got a data error -- remain here until reset */
                    var TYPE = 12;
                    /* i: waiting for type bits, including last-flag bit */

                    /*
                     Decode literal, length, and distance codes and write out the resulting
                     literal and match bytes until either not enough input or output is
                     available, an end-of-block is encountered, or a data error is encountered.
                     When large enough input and output buffers are supplied to inflate(), for
                     example, a 16K input buffer and a 64K output buffer, more than 95% of the
                     inflate execution time is spent in this routine.

                     Entry assumptions:

                     state.mode === LEN
                     strm.avail_in >= 6
                     strm.avail_out >= 258
                     start >= strm.avail_out
                     state.bits < 8

                     On return, state.mode is one of:

                     LEN -- ran out of enough output space or enough available input
                     TYPE -- reached end of block code, inflate() to interpret next block
                     BAD -- error in block data

                     Notes:

                     - The maximum input bits used by a length/distance pair is 15 bits for the
                     length code, 5 bits for the length extra, 15 bits for the distance code,
                     and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
                     Therefore if strm.avail_in >= 6, then there is enough input to avoid
                     checking for available input while decoding.

                     - The maximum bytes that a single length/distance pair can output is 258
                     bytes, which is the maximum length that can be coded.  inflate_fast()
                     requires strm.avail_out >= 258 for each loop to avoid checking for
                     output space.
                     */
                    module.exports = function inflate_fast(strm, start) {
                        var state;
                        var _in;
                        /* local strm.input */
                        var last;
                        /* have enough input while in < last */
                        var _out;
                        /* local strm.output */
                        var beg;
                        /* inflate()'s initial strm.output */
                        var end;
                        /* while out < end, enough space available */
                        //#ifdef INFLATE_STRICT
                        var dmax;
                        /* maximum distance from zlib header */
                        //#endif
                        var wsize;
                        /* window size or zero if not using window */
                        var whave;
                        /* valid bytes in the window */
                        var wnext;
                        /* window write index */
                        var window;
                        /* allocated sliding window, if wsize != 0 */
                        var hold;
                        /* local strm.hold */
                        var bits;
                        /* local strm.bits */
                        var lcode;
                        /* local strm.lencode */
                        var dcode;
                        /* local strm.distcode */
                        var lmask;
                        /* mask for first level of length codes */
                        var dmask;
                        /* mask for first level of distance codes */
                        var here;
                        /* retrieved table entry */
                        var op;
                        /* code bits, operation, extra bits, or */
                        /*  window position, window bytes to copy */
                        var len;
                        /* match length, unused bytes */
                        var dist;
                        /* match distance */
                        var from;
                        /* where to copy match from */
                        var from_source;


                        var input, output; // JS specific, because we have no pointers

                        /* copy state to local variables */
                        state = strm.state;
                        //here = state.here;
                        _in = strm.next_in;
                        input = strm.input;
                        last = _in + (strm.avail_in - 5);
                        _out = strm.next_out;
                        output = strm.output;
                        beg = _out - (start - strm.avail_out);
                        end = _out + (strm.avail_out - 257);
                        //#ifdef INFLATE_STRICT
                        dmax = state.dmax;
                        //#endif
                        wsize = state.wsize;
                        whave = state.whave;
                        wnext = state.wnext;
                        window = state.window;
                        hold = state.hold;
                        bits = state.bits;
                        lcode = state.lencode;
                        dcode = state.distcode;
                        lmask = (1 << state.lenbits) - 1;
                        dmask = (1 << state.distbits) - 1;


                        /* decode literals and length/distances until end-of-block or not enough
                         input data or output space */

                        top:
                            do {
                                if (bits < 15) {
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                }

                                here = lcode[hold & lmask];

                                dolen:
                                    for (;;) { // Goto emulation
                                        op = here >>> 24 /*here.bits*/ ;
                                        hold >>>= op;
                                        bits -= op;
                                        op = (here >>> 16) & 0xff /*here.op*/ ;
                                        if (op === 0) { /* literal */
                                            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                            //        "inflate:         literal '%c'\n" :
                                            //        "inflate:         literal 0x%02x\n", here.val));
                                            output[_out++] = here & 0xffff /*here.val*/ ;
                                        } else if (op & 16) { /* length base */
                                            len = here & 0xffff /*here.val*/ ;
                                            op &= 15;
                                            /* number of extra bits */
                                            if (op) {
                                                if (bits < op) {
                                                    hold += input[_in++] << bits;
                                                    bits += 8;
                                                }
                                                len += hold & ((1 << op) - 1);
                                                hold >>>= op;
                                                bits -= op;
                                            }
                                            //Tracevv((stderr, "inflate:         length %u\n", len));
                                            if (bits < 15) {
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                            }
                                            here = dcode[hold & dmask];

                                            dodist:
                                                for (;;) { // goto emulation
                                                    op = here >>> 24 /*here.bits*/ ;
                                                    hold >>>= op;
                                                    bits -= op;
                                                    op = (here >>> 16) & 0xff /*here.op*/ ;

                                                    if (op & 16) { /* distance base */
                                                        dist = here & 0xffff /*here.val*/ ;
                                                        op &= 15;
                                                        /* number of extra bits */
                                                        if (bits < op) {
                                                            hold += input[_in++] << bits;
                                                            bits += 8;
                                                            if (bits < op) {
                                                                hold += input[_in++] << bits;
                                                                bits += 8;
                                                            }
                                                        }
                                                        dist += hold & ((1 << op) - 1);
                                                        //#ifdef INFLATE_STRICT
                                                        if (dist > dmax) {
                                                            strm.msg = 'invalid distance too far back';
                                                            state.mode = BAD;
                                                            break top;
                                                        }
                                                        //#endif
                                                        hold >>>= op;
                                                        bits -= op;
                                                        //Tracevv((stderr, "inflate:         distance %u\n", dist));
                                                        op = _out - beg;
                                                        /* max distance in output */
                                                        if (dist > op) { /* see if copy from window */
                                                            op = dist - op;
                                                            /* distance back in window */
                                                            if (op > whave) {
                                                                if (state.sane) {
                                                                    strm.msg = 'invalid distance too far back';
                                                                    state.mode = BAD;
                                                                    break top;
                                                                }

                                                                // (!) This block is disabled in zlib defailts,
                                                                // don't enable it for binary compatibility
                                                                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                                                //                if (len <= op - whave) {
                                                                //                  do {
                                                                //                    output[_out++] = 0;
                                                                //                  } while (--len);
                                                                //                  continue top;
                                                                //                }
                                                                //                len -= op - whave;
                                                                //                do {
                                                                //                  output[_out++] = 0;
                                                                //                } while (--op > whave);
                                                                //                if (op === 0) {
                                                                //                  from = _out - dist;
                                                                //                  do {
                                                                //                    output[_out++] = output[from++];
                                                                //                  } while (--len);
                                                                //                  continue top;
                                                                //                }
                                                                //#endif
                                                            }
                                                            from = 0; // window index
                                                            from_source = window;
                                                            if (wnext === 0) { /* very common case */
                                                                from += wsize - op;
                                                                if (op < len) { /* some from window */
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = window[from++];
                                                                    } while (--op);
                                                                    from = _out - dist;
                                                                    /* rest from output */
                                                                    from_source = output;
                                                                }
                                                            } else if (wnext < op) { /* wrap around window */
                                                                from += wsize + wnext - op;
                                                                op -= wnext;
                                                                if (op < len) { /* some from end of window */
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = window[from++];
                                                                    } while (--op);
                                                                    from = 0;
                                                                    if (wnext < len) { /* some from start of window */
                                                                        op = wnext;
                                                                        len -= op;
                                                                        do {
                                                                            output[_out++] = window[from++];
                                                                        } while (--op);
                                                                        from = _out - dist;
                                                                        /* rest from output */
                                                                        from_source = output;
                                                                    }
                                                                }
                                                            } else { /* contiguous in window */
                                                                from += wnext - op;
                                                                if (op < len) { /* some from window */
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = window[from++];
                                                                    } while (--op);
                                                                    from = _out - dist;
                                                                    /* rest from output */
                                                                    from_source = output;
                                                                }
                                                            }
                                                            while (len > 2) {
                                                                output[_out++] = from_source[from++];
                                                                output[_out++] = from_source[from++];
                                                                output[_out++] = from_source[from++];
                                                                len -= 3;
                                                            }
                                                            if (len) {
                                                                output[_out++] = from_source[from++];
                                                                if (len > 1) {
                                                                    output[_out++] = from_source[from++];
                                                                }
                                                            }
                                                        } else {
                                                            from = _out - dist;
                                                            /* copy direct from output */
                                                            do { /* minimum length is three */
                                                                output[_out++] = output[from++];
                                                                output[_out++] = output[from++];
                                                                output[_out++] = output[from++];
                                                                len -= 3;
                                                            } while (len > 2);
                                                            if (len) {
                                                                output[_out++] = output[from++];
                                                                if (len > 1) {
                                                                    output[_out++] = output[from++];
                                                                }
                                                            }
                                                        }
                                                    } else if ((op & 64) === 0) { /* 2nd level distance code */
                                                        here = dcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];
                                                        continue dodist;
                                                    } else {
                                                        strm.msg = 'invalid distance code';
                                                        state.mode = BAD;
                                                        break top;
                                                    }

                                                    break; // need to emulate goto via "continue"
                                                }
                                        } else if ((op & 64) === 0) { /* 2nd level length code */
                                            here = lcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];
                                            continue dolen;
                                        } else if (op & 32) { /* end-of-block */
                                            //Tracevv((stderr, "inflate:         end of block\n"));
                                            state.mode = TYPE;
                                            break top;
                                        } else {
                                            strm.msg = 'invalid literal/length code';
                                            state.mode = BAD;
                                            break top;
                                        }

                                        break; // need to emulate goto via "continue"
                                    }
                            } while (_in < last && _out < end);

                        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
                        len = bits >> 3;
                        _in -= len;
                        bits -= len << 3;
                        hold &= (1 << bits) - 1;

                        /* update state and return */
                        strm.next_in = _in;
                        strm.next_out = _out;
                        strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
                        strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
                        state.hold = hold;
                        state.bits = bits;
                        return;
                    };

                }, {}],
                35: [function(_dereq_, module, exports) {
                    'use strict';


                    var utils = _dereq_('../utils/common');
                    var adler32 = _dereq_('./adler32');
                    var crc32 = _dereq_('./crc32');
                    var inflate_fast = _dereq_('./inffast');
                    var inflate_table = _dereq_('./inftrees');

                    var CODES = 0;
                    var LENS = 1;
                    var DISTS = 2;

                    /* Public constants ==========================================================*/
                    /* ===========================================================================*/


                    /* Allowed flush values; see deflate() and inflate() below for details */
                    //var Z_NO_FLUSH      = 0;
                    //var Z_PARTIAL_FLUSH = 1;
                    //var Z_SYNC_FLUSH    = 2;
                    //var Z_FULL_FLUSH    = 3;
                    var Z_FINISH = 4;
                    var Z_BLOCK = 5;
                    var Z_TREES = 6;


                    /* Return codes for the compression/decompression functions. Negative values
                     * are errors, positive values are used for special but normal events.
                     */
                    var Z_OK = 0;
                    var Z_STREAM_END = 1;
                    var Z_NEED_DICT = 2;
                    //var Z_ERRNO         = -1;
                    var Z_STREAM_ERROR = -2;
                    var Z_DATA_ERROR = -3;
                    var Z_MEM_ERROR = -4;
                    var Z_BUF_ERROR = -5;
                    //var Z_VERSION_ERROR = -6;

                    /* The deflate compression method */
                    var Z_DEFLATED = 8;


                    /* STATES ====================================================================*/
                    /* ===========================================================================*/


                    var HEAD = 1;
                    /* i: waiting for magic header */
                    var FLAGS = 2;
                    /* i: waiting for method and flags (gzip) */
                    var TIME = 3;
                    /* i: waiting for modification time (gzip) */
                    var OS = 4;
                    /* i: waiting for extra flags and operating system (gzip) */
                    var EXLEN = 5;
                    /* i: waiting for extra length (gzip) */
                    var EXTRA = 6;
                    /* i: waiting for extra bytes (gzip) */
                    var NAME = 7;
                    /* i: waiting for end of file name (gzip) */
                    var COMMENT = 8;
                    /* i: waiting for end of comment (gzip) */
                    var HCRC = 9;
                    /* i: waiting for header crc (gzip) */
                    var DICTID = 10;
                    /* i: waiting for dictionary check value */
                    var DICT = 11;
                    /* waiting for inflateSetDictionary() call */
                    var TYPE = 12;
                    /* i: waiting for type bits, including last-flag bit */
                    var TYPEDO = 13;
                    /* i: same, but skip check to exit inflate on new block */
                    var STORED = 14;
                    /* i: waiting for stored size (length and complement) */
                    var COPY_ = 15;
                    /* i/o: same as COPY below, but only first time in */
                    var COPY = 16;
                    /* i/o: waiting for input or output to copy stored block */
                    var TABLE = 17;
                    /* i: waiting for dynamic block table lengths */
                    var LENLENS = 18;
                    /* i: waiting for code length code lengths */
                    var CODELENS = 19;
                    /* i: waiting for length/lit and distance code lengths */
                    var LEN_ = 20;
                    /* i: same as LEN below, but only first time in */
                    var LEN = 21;
                    /* i: waiting for length/lit/eob code */
                    var LENEXT = 22;
                    /* i: waiting for length extra bits */
                    var DIST = 23;
                    /* i: waiting for distance code */
                    var DISTEXT = 24;
                    /* i: waiting for distance extra bits */
                    var MATCH = 25;
                    /* o: waiting for output space to copy string */
                    var LIT = 26;
                    /* o: waiting for output space to write literal */
                    var CHECK = 27;
                    /* i: waiting for 32-bit check value */
                    var LENGTH = 28;
                    /* i: waiting for 32-bit length (gzip) */
                    var DONE = 29;
                    /* finished check, done -- remain here until reset */
                    var BAD = 30;
                    /* got a data error -- remain here until reset */
                    var MEM = 31;
                    /* got an inflate() memory error -- remain here until reset */
                    var SYNC = 32;
                    /* looking for synchronization bytes to restart inflate() */

                    /* ===========================================================================*/


                    var ENOUGH_LENS = 852;
                    var ENOUGH_DISTS = 592;
                    //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

                    var MAX_WBITS = 15;
                    /* 32K LZ77 window */
                    var DEF_WBITS = MAX_WBITS;


                    function ZSWAP32(q) {
                        return (((q >>> 24) & 0xff) +
                            ((q >>> 8) & 0xff00) +
                            ((q & 0xff00) << 8) +
                            ((q & 0xff) << 24));
                    }


                    function InflateState() {
                        this.mode = 0;
                        /* current inflate mode */
                        this.last = false;
                        /* true if processing last block */
                        this.wrap = 0;
                        /* bit 0 true for zlib, bit 1 true for gzip */
                        this.havedict = false;
                        /* true if dictionary provided */
                        this.flags = 0;
                        /* gzip header method and flags (0 if zlib) */
                        this.dmax = 0;
                        /* zlib header max distance (INFLATE_STRICT) */
                        this.check = 0;
                        /* protected copy of check value */
                        this.total = 0;
                        /* protected copy of output count */
                        // TODO: may be {}
                        this.head = null;
                        /* where to save gzip header information */

                        /* sliding window */
                        this.wbits = 0;
                        /* log base 2 of requested window size */
                        this.wsize = 0;
                        /* window size or zero if not using window */
                        this.whave = 0;
                        /* valid bytes in the window */
                        this.wnext = 0;
                        /* window write index */
                        this.window = null;
                        /* allocated sliding window, if needed */

                        /* bit accumulator */
                        this.hold = 0;
                        /* input bit accumulator */
                        this.bits = 0;
                        /* number of bits in "in" */

                        /* for string and stored block copying */
                        this.length = 0;
                        /* literal or length of data to copy */
                        this.offset = 0;
                        /* distance back to copy string from */

                        /* for table and code decoding */
                        this.extra = 0;
                        /* extra bits needed */

                        /* fixed and dynamic code tables */
                        this.lencode = null;
                        /* starting table for length/literal codes */
                        this.distcode = null;
                        /* starting table for distance codes */
                        this.lenbits = 0;
                        /* index bits for lencode */
                        this.distbits = 0;
                        /* index bits for distcode */

                        /* dynamic table building */
                        this.ncode = 0;
                        /* number of code length code lengths */
                        this.nlen = 0;
                        /* number of length code lengths */
                        this.ndist = 0;
                        /* number of distance code lengths */
                        this.have = 0;
                        /* number of code lengths in lens[] */
                        this.next = null;
                        /* next available space in codes[] */

                        this.lens = new utils.Buf16(320);
                        /* temporary storage for code lengths */
                        this.work = new utils.Buf16(288);
                        /* work area for code table building */

                        /*
                         because we don't have pointers in js, we use lencode and distcode directly
                         as buffers so we don't need codes
                         */
                        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
                        this.lendyn = null;
                        /* dynamic table for length/literal codes (JS specific) */
                        this.distdyn = null;
                        /* dynamic table for distance codes (JS specific) */
                        this.sane = 0;
                        /* if false, allow invalid distance too far */
                        this.back = 0;
                        /* bits back of last unprocessed length/lit */
                        this.was = 0;
                        /* initial length of match */
                    }

                    function inflateResetKeep(strm) {
                        var state;

                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        strm.total_in = strm.total_out = state.total = 0;
                        strm.msg = '';
                        /*Z_NULL*/
                        if (state.wrap) { /* to support ill-conceived Java test suite */
                            strm.adler = state.wrap & 1;
                        }
                        state.mode = HEAD;
                        state.last = 0;
                        state.havedict = 0;
                        state.dmax = 32768;
                        state.head = null /*Z_NULL*/ ;
                        state.hold = 0;
                        state.bits = 0;
                        //state.lencode = state.distcode = state.next = state.codes;
                        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

                        state.sane = 1;
                        state.back = -1;
                        //Tracev((stderr, "inflate: reset\n"));
                        return Z_OK;
                    }

                    function inflateReset(strm) {
                        var state;

                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        state.wsize = 0;
                        state.whave = 0;
                        state.wnext = 0;
                        return inflateResetKeep(strm);

                    }

                    function inflateReset2(strm, windowBits) {
                        var wrap;
                        var state;

                        /* get the state */
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;

                        /* extract wrap request from windowBits parameter */
                        if (windowBits < 0) {
                            wrap = 0;
                            windowBits = -windowBits;
                        } else {
                            wrap = (windowBits >> 4) + 1;
                            if (windowBits < 48) {
                                windowBits &= 15;
                            }
                        }

                        /* set number of window bits, free window if different */
                        if (windowBits && (windowBits < 8 || windowBits > 15)) {
                            return Z_STREAM_ERROR;
                        }
                        if (state.window !== null && state.wbits !== windowBits) {
                            state.window = null;
                        }

                        /* update state and reset the rest of it */
                        state.wrap = wrap;
                        state.wbits = windowBits;
                        return inflateReset(strm);
                    }

                    function inflateInit2(strm, windowBits) {
                        var ret;
                        var state;

                        if (!strm) {
                            return Z_STREAM_ERROR;
                        }
                        //strm.msg = Z_NULL;                 /* in case we return an error */

                        state = new InflateState();

                        //if (state === Z_NULL) return Z_MEM_ERROR;
                        //Tracev((stderr, "inflate: allocated\n"));
                        strm.state = state;
                        state.window = null /*Z_NULL*/ ;
                        ret = inflateReset2(strm, windowBits);
                        if (ret !== Z_OK) {
                            strm.state = null /*Z_NULL*/ ;
                        }
                        return ret;
                    }

                    function inflateInit(strm) {
                        return inflateInit2(strm, DEF_WBITS);
                    }


                    /*
                     Return state with length and distance decoding tables and index sizes set to
                     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
                     If BUILDFIXED is defined, then instead this routine builds the tables the
                     first time it's called, and returns those tables the first time and
                     thereafter.  This reduces the size of the code by about 2K bytes, in
                     exchange for a little execution time.  However, BUILDFIXED should not be
                     used for threaded applications, since the rewriting of the tables and virgin
                     may not be thread-safe.
                     */
                    var virgin = true;

                    var lenfix, distfix; // We have no pointers in JS, so keep tables separate

                    function fixedtables(state) {
                        /* build fixed huffman tables if first call (may not be thread safe) */
                        if (virgin) {
                            var sym;

                            lenfix = new utils.Buf32(512);
                            distfix = new utils.Buf32(32);

                            /* literal/length table */
                            sym = 0;
                            while (sym < 144) {
                                state.lens[sym++] = 8;
                            }
                            while (sym < 256) {
                                state.lens[sym++] = 9;
                            }
                            while (sym < 280) {
                                state.lens[sym++] = 7;
                            }
                            while (sym < 288) {
                                state.lens[sym++] = 8;
                            }

                            inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
                                bits: 9
                            });

                            /* distance table */
                            sym = 0;
                            while (sym < 32) {
                                state.lens[sym++] = 5;
                            }

                            inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
                                bits: 5
                            });

                            /* do this just once */
                            virgin = false;
                        }

                        state.lencode = lenfix;
                        state.lenbits = 9;
                        state.distcode = distfix;
                        state.distbits = 5;
                    }


                    /*
                     Update the window with the last wsize (normally 32K) bytes written before
                     returning.  If window does not exist yet, create it.  This is only called
                     when a window is already in use, or when output has been written during this
                     inflate call, but the end of the deflate stream has not been reached yet.
                     It is also called to create a window for dictionary data when a dictionary
                     is loaded.

                     Providing output buffers larger than 32K to inflate() should provide a speed
                     advantage, since only the last 32K of output is copied to the sliding window
                     upon return from inflate(), and since all distances after the first 32K of
                     output will fall in the output data, making match copies simpler and faster.
                     The advantage may be dependent on the size of the processor's data caches.
                     */
                    function updatewindow(strm, src, end, copy) {
                        var dist;
                        var state = strm.state;

                        /* if it hasn't been done already, allocate space for the window */
                        if (state.window === null) {
                            state.wsize = 1 << state.wbits;
                            state.wnext = 0;
                            state.whave = 0;

                            state.window = new utils.Buf8(state.wsize);
                        }

                        /* copy state->wsize or less output bytes into the circular window */
                        if (copy >= state.wsize) {
                            utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                            state.wnext = 0;
                            state.whave = state.wsize;
                        } else {
                            dist = state.wsize - state.wnext;
                            if (dist > copy) {
                                dist = copy;
                            }
                            //zmemcpy(state->window + state->wnext, end - copy, dist);
                            utils.arraySet(state.window, src, end - copy, dist, state.wnext);
                            copy -= dist;
                            if (copy) {
                                //zmemcpy(state->window, end - copy, copy);
                                utils.arraySet(state.window, src, end - copy, copy, 0);
                                state.wnext = copy;
                                state.whave = state.wsize;
                            } else {
                                state.wnext += dist;
                                if (state.wnext === state.wsize) {
                                    state.wnext = 0;
                                }
                                if (state.whave < state.wsize) {
                                    state.whave += dist;
                                }
                            }
                        }
                        return 0;
                    }

                    function inflate(strm, flush) {
                        var state;
                        var input, output; // input/output buffers
                        var next;
                        /* next input INDEX */
                        var put;
                        /* next output INDEX */
                        var have, left;
                        /* available input and output */
                        var hold;
                        /* bit buffer */
                        var bits;
                        /* bits in bit buffer */
                        var _in, _out;
                        /* save starting available input and output */
                        var copy;
                        /* number of stored or match bytes to copy */
                        var from;
                        /* where to copy match bytes from */
                        var from_source;
                        var here = 0;
                        /* current decoding table entry */
                        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
                        //var last;                   /* parent table entry */
                        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
                        var len;
                        /* length to copy for repeats, bits to drop */
                        var ret;
                        /* return code */
                        var hbuf = new utils.Buf8(4);
                        /* buffer for gzip header crc calculation */
                        var opts;

                        var n; // temporary var for NEED_BITS

                        var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


                        if (!strm || !strm.state || !strm.output ||
                            (!strm.input && strm.avail_in !== 0)) {
                            return Z_STREAM_ERROR;
                        }

                        state = strm.state;
                        if (state.mode === TYPE) {
                            state.mode = TYPEDO;
                        }
                        /* skip check */


                        //--- LOAD() ---
                        put = strm.next_out;
                        output = strm.output;
                        left = strm.avail_out;
                        next = strm.next_in;
                        input = strm.input;
                        have = strm.avail_in;
                        hold = state.hold;
                        bits = state.bits;
                        //---

                        _in = have;
                        _out = left;
                        ret = Z_OK;

                        inf_leave: // goto emulation
                            for (;;) {
                                switch (state.mode) {
                                    case HEAD:
                                        if (state.wrap === 0) {
                                            state.mode = TYPEDO;
                                            break;
                                        }
                                        //=== NEEDBITS(16);
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
                                            state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                                            //=== CRC2(state.check, hold);
                                            hbuf[0] = hold & 0xff;
                                            hbuf[1] = (hold >>> 8) & 0xff;
                                            state.check = crc32(state.check, hbuf, 2, 0);
                                            //===//

                                            //=== INITBITS();
                                            hold = 0;
                                            bits = 0;
                                            //===//
                                            state.mode = FLAGS;
                                            break;
                                        }
                                        state.flags = 0;
                                        /* expect zlib header */
                                        if (state.head) {
                                            state.head.done = false;
                                        }
                                        if (!(state.wrap & 1) || /* check if zlib header allowed */
                                            (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
                                            strm.msg = 'incorrect header check';
                                            state.mode = BAD;
                                            break;
                                        }
                                        if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED) {
                                            strm.msg = 'unknown compression method';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //--- DROPBITS(4) ---//
                                        hold >>>= 4;
                                        bits -= 4;
                                        //---//
                                        len = (hold & 0x0f) /*BITS(4)*/ + 8;
                                        if (state.wbits === 0) {
                                            state.wbits = len;
                                        } else if (len > state.wbits) {
                                            strm.msg = 'invalid window size';
                                            state.mode = BAD;
                                            break;
                                        }
                                        state.dmax = 1 << len;
                                        //Tracev((stderr, "inflate:   zlib header ok\n"));
                                        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
                                        state.mode = hold & 0x200 ? DICTID : TYPE;
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        break;
                                    case FLAGS:
                                        //=== NEEDBITS(16); */
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.flags = hold;
                                        if ((state.flags & 0xff) !== Z_DEFLATED) {
                                            strm.msg = 'unknown compression method';
                                            state.mode = BAD;
                                            break;
                                        }
                                        if (state.flags & 0xe000) {
                                            strm.msg = 'unknown header flags set';
                                            state.mode = BAD;
                                            break;
                                        }
                                        if (state.head) {
                                            state.head.text = ((hold >> 8) & 1);
                                        }
                                        if (state.flags & 0x0200) {
                                            //=== CRC2(state.check, hold);
                                            hbuf[0] = hold & 0xff;
                                            hbuf[1] = (hold >>> 8) & 0xff;
                                            state.check = crc32(state.check, hbuf, 2, 0);
                                            //===//
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = TIME;
                                        /* falls through */
                                    case TIME:
                                        //=== NEEDBITS(32); */
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if (state.head) {
                                            state.head.time = hold;
                                        }
                                        if (state.flags & 0x0200) {
                                            //=== CRC4(state.check, hold)
                                            hbuf[0] = hold & 0xff;
                                            hbuf[1] = (hold >>> 8) & 0xff;
                                            hbuf[2] = (hold >>> 16) & 0xff;
                                            hbuf[3] = (hold >>> 24) & 0xff;
                                            state.check = crc32(state.check, hbuf, 4, 0);
                                            //===
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = OS;
                                        /* falls through */
                                    case OS:
                                        //=== NEEDBITS(16); */
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if (state.head) {
                                            state.head.xflags = (hold & 0xff);
                                            state.head.os = (hold >> 8);
                                        }
                                        if (state.flags & 0x0200) {
                                            //=== CRC2(state.check, hold);
                                            hbuf[0] = hold & 0xff;
                                            hbuf[1] = (hold >>> 8) & 0xff;
                                            state.check = crc32(state.check, hbuf, 2, 0);
                                            //===//
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = EXLEN;
                                        /* falls through */
                                    case EXLEN:
                                        if (state.flags & 0x0400) {
                                            //=== NEEDBITS(16); */
                                            while (bits < 16) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            state.length = hold;
                                            if (state.head) {
                                                state.head.extra_len = hold;
                                            }
                                            if (state.flags & 0x0200) {
                                                //=== CRC2(state.check, hold);
                                                hbuf[0] = hold & 0xff;
                                                hbuf[1] = (hold >>> 8) & 0xff;
                                                state.check = crc32(state.check, hbuf, 2, 0);
                                                //===//
                                            }
                                            //=== INITBITS();
                                            hold = 0;
                                            bits = 0;
                                            //===//
                                        } else if (state.head) {
                                            state.head.extra = null /*Z_NULL*/ ;
                                        }
                                        state.mode = EXTRA;
                                        /* falls through */
                                    case EXTRA:
                                        if (state.flags & 0x0400) {
                                            copy = state.length;
                                            if (copy > have) {
                                                copy = have;
                                            }
                                            if (copy) {
                                                if (state.head) {
                                                    len = state.head.extra_len - state.length;
                                                    if (!state.head.extra) {
                                                        // Use untyped array for more conveniend processing later
                                                        state.head.extra = new Array(state.head.extra_len);
                                                    }
                                                    utils.arraySet(
                                                        state.head.extra,
                                                        input,
                                                        next,
                                                        // extra field is limited to 65536 bytes
                                                        // - no need for additional size check
                                                        copy,
                                                        /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                                                        len
                                                    );
                                                    //zmemcpy(state.head.extra + len, next,
                                                    //        len + copy > state.head.extra_max ?
                                                    //        state.head.extra_max - len : copy);
                                                }
                                                if (state.flags & 0x0200) {
                                                    state.check = crc32(state.check, input, copy, next);
                                                }
                                                have -= copy;
                                                next += copy;
                                                state.length -= copy;
                                            }
                                            if (state.length) {
                                                break inf_leave;
                                            }
                                        }
                                        state.length = 0;
                                        state.mode = NAME;
                                        /* falls through */
                                    case NAME:
                                        if (state.flags & 0x0800) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            copy = 0;
                                            do {
                                                // TODO: 2 or 1 bytes?
                                                len = input[next + copy++];
                                                /* use constant limit because in js we should not preallocate memory */
                                                if (state.head && len &&
                                                    (state.length < 65536 /*state.head.name_max*/ )) {
                                                    state.head.name += String.fromCharCode(len);
                                                }
                                            } while (len && copy < have);

                                            if (state.flags & 0x0200) {
                                                state.check = crc32(state.check, input, copy, next);
                                            }
                                            have -= copy;
                                            next += copy;
                                            if (len) {
                                                break inf_leave;
                                            }
                                        } else if (state.head) {
                                            state.head.name = null;
                                        }
                                        state.length = 0;
                                        state.mode = COMMENT;
                                        /* falls through */
                                    case COMMENT:
                                        if (state.flags & 0x1000) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            copy = 0;
                                            do {
                                                len = input[next + copy++];
                                                /* use constant limit because in js we should not preallocate memory */
                                                if (state.head && len &&
                                                    (state.length < 65536 /*state.head.comm_max*/ )) {
                                                    state.head.comment += String.fromCharCode(len);
                                                }
                                            } while (len && copy < have);
                                            if (state.flags & 0x0200) {
                                                state.check = crc32(state.check, input, copy, next);
                                            }
                                            have -= copy;
                                            next += copy;
                                            if (len) {
                                                break inf_leave;
                                            }
                                        } else if (state.head) {
                                            state.head.comment = null;
                                        }
                                        state.mode = HCRC;
                                        /* falls through */
                                    case HCRC:
                                        if (state.flags & 0x0200) {
                                            //=== NEEDBITS(16); */
                                            while (bits < 16) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            if (hold !== (state.check & 0xffff)) {
                                                strm.msg = 'header crc mismatch';
                                                state.mode = BAD;
                                                break;
                                            }
                                            //=== INITBITS();
                                            hold = 0;
                                            bits = 0;
                                            //===//
                                        }
                                        if (state.head) {
                                            state.head.hcrc = ((state.flags >> 9) & 1);
                                            state.head.done = true;
                                        }
                                        strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                                        state.mode = TYPE;
                                        break;
                                    case DICTID:
                                        //=== NEEDBITS(32); */
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        strm.adler = state.check = ZSWAP32(hold);
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = DICT;
                                        /* falls through */
                                    case DICT:
                                        if (state.havedict === 0) {
                                            //--- RESTORE() ---
                                            strm.next_out = put;
                                            strm.avail_out = left;
                                            strm.next_in = next;
                                            strm.avail_in = have;
                                            state.hold = hold;
                                            state.bits = bits;
                                            //---
                                            return Z_NEED_DICT;
                                        }
                                        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
                                        state.mode = TYPE;
                                        /* falls through */
                                    case TYPE:
                                        if (flush === Z_BLOCK || flush === Z_TREES) {
                                            break inf_leave;
                                        }
                                        /* falls through */
                                    case TYPEDO:
                                        if (state.last) {
                                            //--- BYTEBITS() ---//
                                            hold >>>= bits & 7;
                                            bits -= bits & 7;
                                            //---//
                                            state.mode = CHECK;
                                            break;
                                        }
                                        //=== NEEDBITS(3); */
                                        while (bits < 3) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.last = (hold & 0x01) /*BITS(1)*/ ;
                                        //--- DROPBITS(1) ---//
                                        hold >>>= 1;
                                        bits -= 1;
                                        //---//

                                        switch ((hold & 0x03) /*BITS(2)*/ ) {
                                            case 0:
                                                /* stored block */
                                                //Tracev((stderr, "inflate:     stored block%s\n",
                                                //        state.last ? " (last)" : ""));
                                                state.mode = STORED;
                                                break;
                                            case 1:
                                                /* fixed block */
                                                fixedtables(state);
                                                //Tracev((stderr, "inflate:     fixed codes block%s\n",
                                                //        state.last ? " (last)" : ""));
                                                state.mode = LEN_;
                                                /* decode codes */
                                                if (flush === Z_TREES) {
                                                    //--- DROPBITS(2) ---//
                                                    hold >>>= 2;
                                                    bits -= 2;
                                                    //---//
                                                    break inf_leave;
                                                }
                                                break;
                                            case 2:
                                                /* dynamic block */
                                                //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                                                //        state.last ? " (last)" : ""));
                                                state.mode = TABLE;
                                                break;
                                            case 3:
                                                strm.msg = 'invalid block type';
                                                state.mode = BAD;
                                        }
                                        //--- DROPBITS(2) ---//
                                        hold >>>= 2;
                                        bits -= 2;
                                        //---//
                                        break;
                                    case STORED:
                                        //--- BYTEBITS() ---// /* go to byte boundary */
                                        hold >>>= bits & 7;
                                        bits -= bits & 7;
                                        //---//
                                        //=== NEEDBITS(32); */
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
                                            strm.msg = 'invalid stored block lengths';
                                            state.mode = BAD;
                                            break;
                                        }
                                        state.length = hold & 0xffff;
                                        //Tracev((stderr, "inflate:       stored length %u\n",
                                        //        state.length));
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = COPY_;
                                        if (flush === Z_TREES) {
                                            break inf_leave;
                                        }
                                        /* falls through */
                                    case COPY_:
                                        state.mode = COPY;
                                        /* falls through */
                                    case COPY:
                                        copy = state.length;
                                        if (copy) {
                                            if (copy > have) {
                                                copy = have;
                                            }
                                            if (copy > left) {
                                                copy = left;
                                            }
                                            if (copy === 0) {
                                                break inf_leave;
                                            }
                                            //--- zmemcpy(put, next, copy); ---
                                            utils.arraySet(output, input, next, copy, put);
                                            //---//
                                            have -= copy;
                                            next += copy;
                                            left -= copy;
                                            put += copy;
                                            state.length -= copy;
                                            break;
                                        }
                                        //Tracev((stderr, "inflate:       stored end\n"));
                                        state.mode = TYPE;
                                        break;
                                    case TABLE:
                                        //=== NEEDBITS(14); */
                                        while (bits < 14) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
                                        //--- DROPBITS(5) ---//
                                        hold >>>= 5;
                                        bits -= 5;
                                        //---//
                                        state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
                                        //--- DROPBITS(5) ---//
                                        hold >>>= 5;
                                        bits -= 5;
                                        //---//
                                        state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
                                        //--- DROPBITS(4) ---//
                                        hold >>>= 4;
                                        bits -= 4;
                                        //---//
                                        //#ifndef PKZIP_BUG_WORKAROUND
                                        if (state.nlen > 286 || state.ndist > 30) {
                                            strm.msg = 'too many length or distance symbols';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //#endif
                                        //Tracev((stderr, "inflate:       table sizes ok\n"));
                                        state.have = 0;
                                        state.mode = LENLENS;
                                        /* falls through */
                                    case LENLENS:
                                        while (state.have < state.ncode) {
                                            //=== NEEDBITS(3);
                                            while (bits < 3) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
                                            //--- DROPBITS(3) ---//
                                            hold >>>= 3;
                                            bits -= 3;
                                            //---//
                                        }
                                        while (state.have < 19) {
                                            state.lens[order[state.have++]] = 0;
                                        }
                                        // We have separate tables & no pointers. 2 commented lines below not needed.
                                        //state.next = state.codes;
                                        //state.lencode = state.next;
                                        // Switch to use dynamic table
                                        state.lencode = state.lendyn;
                                        state.lenbits = 7;

                                        opts = {
                                            bits: state.lenbits
                                        };
                                        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                                        state.lenbits = opts.bits;

                                        if (ret) {
                                            strm.msg = 'invalid code lengths set';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //Tracev((stderr, "inflate:       code lengths ok\n"));
                                        state.have = 0;
                                        state.mode = CODELENS;
                                        /* falls through */
                                    case CODELENS:
                                        while (state.have < state.nlen + state.ndist) {
                                            for (;;) {
                                                here = state.lencode[hold & ((1 << state.lenbits) - 1)];
                                                /*BITS(state.lenbits)*/
                                                here_bits = here >>> 24;
                                                here_op = (here >>> 16) & 0xff;
                                                here_val = here & 0xffff;

                                                if ((here_bits) <= bits) {
                                                    break;
                                                }
                                                //--- PULLBYTE() ---//
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                                //---//
                                            }
                                            if (here_val < 16) {
                                                //--- DROPBITS(here.bits) ---//
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                //---//
                                                state.lens[state.have++] = here_val;
                                            } else {
                                                if (here_val === 16) {
                                                    //=== NEEDBITS(here.bits + 2);
                                                    n = here_bits + 2;
                                                    while (bits < n) {
                                                        if (have === 0) {
                                                            break inf_leave;
                                                        }
                                                        have--;
                                                        hold += input[next++] << bits;
                                                        bits += 8;
                                                    }
                                                    //===//
                                                    //--- DROPBITS(here.bits) ---//
                                                    hold >>>= here_bits;
                                                    bits -= here_bits;
                                                    //---//
                                                    if (state.have === 0) {
                                                        strm.msg = 'invalid bit length repeat';
                                                        state.mode = BAD;
                                                        break;
                                                    }
                                                    len = state.lens[state.have - 1];
                                                    copy = 3 + (hold & 0x03); //BITS(2);
                                                    //--- DROPBITS(2) ---//
                                                    hold >>>= 2;
                                                    bits -= 2;
                                                    //---//
                                                } else if (here_val === 17) {
                                                    //=== NEEDBITS(here.bits + 3);
                                                    n = here_bits + 3;
                                                    while (bits < n) {
                                                        if (have === 0) {
                                                            break inf_leave;
                                                        }
                                                        have--;
                                                        hold += input[next++] << bits;
                                                        bits += 8;
                                                    }
                                                    //===//
                                                    //--- DROPBITS(here.bits) ---//
                                                    hold >>>= here_bits;
                                                    bits -= here_bits;
                                                    //---//
                                                    len = 0;
                                                    copy = 3 + (hold & 0x07); //BITS(3);
                                                    //--- DROPBITS(3) ---//
                                                    hold >>>= 3;
                                                    bits -= 3;
                                                    //---//
                                                } else {
                                                    //=== NEEDBITS(here.bits + 7);
                                                    n = here_bits + 7;
                                                    while (bits < n) {
                                                        if (have === 0) {
                                                            break inf_leave;
                                                        }
                                                        have--;
                                                        hold += input[next++] << bits;
                                                        bits += 8;
                                                    }
                                                    //===//
                                                    //--- DROPBITS(here.bits) ---//
                                                    hold >>>= here_bits;
                                                    bits -= here_bits;
                                                    //---//
                                                    len = 0;
                                                    copy = 11 + (hold & 0x7f); //BITS(7);
                                                    //--- DROPBITS(7) ---//
                                                    hold >>>= 7;
                                                    bits -= 7;
                                                    //---//
                                                }
                                                if (state.have + copy > state.nlen + state.ndist) {
                                                    strm.msg = 'invalid bit length repeat';
                                                    state.mode = BAD;
                                                    break;
                                                }
                                                while (copy--) {
                                                    state.lens[state.have++] = len;
                                                }
                                            }
                                        }

                                        /* handle error breaks in while */
                                        if (state.mode === BAD) {
                                            break;
                                        }

                                        /* check for end-of-block code (better have one) */
                                        if (state.lens[256] === 0) {
                                            strm.msg = 'invalid code -- missing end-of-block';
                                            state.mode = BAD;
                                            break;
                                        }

                                        /* build code tables -- note: do not change the lenbits or distbits
                                         values here (9 and 6) without reading the comments in inftrees.h
                                         concerning the ENOUGH constants, which depend on those values */
                                        state.lenbits = 9;

                                        opts = {
                                            bits: state.lenbits
                                        };
                                        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                                        // We have separate tables & no pointers. 2 commented lines below not needed.
                                        // state.next_index = opts.table_index;
                                        state.lenbits = opts.bits;
                                        // state.lencode = state.next;

                                        if (ret) {
                                            strm.msg = 'invalid literal/lengths set';
                                            state.mode = BAD;
                                            break;
                                        }

                                        state.distbits = 6;
                                        //state.distcode.copy(state.codes);
                                        // Switch to use dynamic table
                                        state.distcode = state.distdyn;
                                        opts = {
                                            bits: state.distbits
                                        };
                                        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                                        // We have separate tables & no pointers. 2 commented lines below not needed.
                                        // state.next_index = opts.table_index;
                                        state.distbits = opts.bits;
                                        // state.distcode = state.next;

                                        if (ret) {
                                            strm.msg = 'invalid distances set';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //Tracev((stderr, 'inflate:       codes ok\n'));
                                        state.mode = LEN_;
                                        if (flush === Z_TREES) {
                                            break inf_leave;
                                        }
                                        /* falls through */
                                    case LEN_:
                                        state.mode = LEN;
                                        /* falls through */
                                    case LEN:
                                        if (have >= 6 && left >= 258) {
                                            //--- RESTORE() ---
                                            strm.next_out = put;
                                            strm.avail_out = left;
                                            strm.next_in = next;
                                            strm.avail_in = have;
                                            state.hold = hold;
                                            state.bits = bits;
                                            //---
                                            inflate_fast(strm, _out);
                                            //--- LOAD() ---
                                            put = strm.next_out;
                                            output = strm.output;
                                            left = strm.avail_out;
                                            next = strm.next_in;
                                            input = strm.input;
                                            have = strm.avail_in;
                                            hold = state.hold;
                                            bits = state.bits;
                                            //---

                                            if (state.mode === TYPE) {
                                                state.back = -1;
                                            }
                                            break;
                                        }
                                        state.back = 0;
                                        for (;;) {
                                            here = state.lencode[hold & ((1 << state.lenbits) - 1)];
                                            /*BITS(state.lenbits)*/
                                            here_bits = here >>> 24;
                                            here_op = (here >>> 16) & 0xff;
                                            here_val = here & 0xffff;

                                            if (here_bits <= bits) {
                                                break;
                                            }
                                            //--- PULLBYTE() ---//
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                            //---//
                                        }
                                        if (here_op && (here_op & 0xf0) === 0) {
                                            last_bits = here_bits;
                                            last_op = here_op;
                                            last_val = here_val;
                                            for (;;) {
                                                here = state.lencode[last_val +
                                                    ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                                                here_bits = here >>> 24;
                                                here_op = (here >>> 16) & 0xff;
                                                here_val = here & 0xffff;

                                                if ((last_bits + here_bits) <= bits) {
                                                    break;
                                                }
                                                //--- PULLBYTE() ---//
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                                //---//
                                            }
                                            //--- DROPBITS(last.bits) ---//
                                            hold >>>= last_bits;
                                            bits -= last_bits;
                                            //---//
                                            state.back += last_bits;
                                        }
                                        //--- DROPBITS(here.bits) ---//
                                        hold >>>= here_bits;
                                        bits -= here_bits;
                                        //---//
                                        state.back += here_bits;
                                        state.length = here_val;
                                        if (here_op === 0) {
                                            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                            //        "inflate:         literal '%c'\n" :
                                            //        "inflate:         literal 0x%02x\n", here.val));
                                            state.mode = LIT;
                                            break;
                                        }
                                        if (here_op & 32) {
                                            //Tracevv((stderr, "inflate:         end of block\n"));
                                            state.back = -1;
                                            state.mode = TYPE;
                                            break;
                                        }
                                        if (here_op & 64) {
                                            strm.msg = 'invalid literal/length code';
                                            state.mode = BAD;
                                            break;
                                        }
                                        state.extra = here_op & 15;
                                        state.mode = LENEXT;
                                        /* falls through */
                                    case LENEXT:
                                        if (state.extra) {
                                            //=== NEEDBITS(state.extra);
                                            n = state.extra;
                                            while (bits < n) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
                                            //--- DROPBITS(state.extra) ---//
                                            hold >>>= state.extra;
                                            bits -= state.extra;
                                            //---//
                                            state.back += state.extra;
                                        }
                                        //Tracevv((stderr, "inflate:         length %u\n", state.length));
                                        state.was = state.length;
                                        state.mode = DIST;
                                        /* falls through */
                                    case DIST:
                                        for (;;) {
                                            here = state.distcode[hold & ((1 << state.distbits) - 1)];
                                            /*BITS(state.distbits)*/
                                            here_bits = here >>> 24;
                                            here_op = (here >>> 16) & 0xff;
                                            here_val = here & 0xffff;

                                            if ((here_bits) <= bits) {
                                                break;
                                            }
                                            //--- PULLBYTE() ---//
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                            //---//
                                        }
                                        if ((here_op & 0xf0) === 0) {
                                            last_bits = here_bits;
                                            last_op = here_op;
                                            last_val = here_val;
                                            for (;;) {
                                                here = state.distcode[last_val +
                                                    ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                                                here_bits = here >>> 24;
                                                here_op = (here >>> 16) & 0xff;
                                                here_val = here & 0xffff;

                                                if ((last_bits + here_bits) <= bits) {
                                                    break;
                                                }
                                                //--- PULLBYTE() ---//
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                                //---//
                                            }
                                            //--- DROPBITS(last.bits) ---//
                                            hold >>>= last_bits;
                                            bits -= last_bits;
                                            //---//
                                            state.back += last_bits;
                                        }
                                        //--- DROPBITS(here.bits) ---//
                                        hold >>>= here_bits;
                                        bits -= here_bits;
                                        //---//
                                        state.back += here_bits;
                                        if (here_op & 64) {
                                            strm.msg = 'invalid distance code';
                                            state.mode = BAD;
                                            break;
                                        }
                                        state.offset = here_val;
                                        state.extra = (here_op) & 15;
                                        state.mode = DISTEXT;
                                        /* falls through */
                                    case DISTEXT:
                                        if (state.extra) {
                                            //=== NEEDBITS(state.extra);
                                            n = state.extra;
                                            while (bits < n) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
                                            //--- DROPBITS(state.extra) ---//
                                            hold >>>= state.extra;
                                            bits -= state.extra;
                                            //---//
                                            state.back += state.extra;
                                        }
                                        //#ifdef INFLATE_STRICT
                                        if (state.offset > state.dmax) {
                                            strm.msg = 'invalid distance too far back';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //#endif
                                        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
                                        state.mode = MATCH;
                                        /* falls through */
                                    case MATCH:
                                        if (left === 0) {
                                            break inf_leave;
                                        }
                                        copy = _out - left;
                                        if (state.offset > copy) { /* copy from window */
                                            copy = state.offset - copy;
                                            if (copy > state.whave) {
                                                if (state.sane) {
                                                    strm.msg = 'invalid distance too far back';
                                                    state.mode = BAD;
                                                    break;
                                                }
                                                // (!) This block is disabled in zlib defailts,
                                                // don't enable it for binary compatibility
                                                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                                //          Trace((stderr, "inflate.c too far\n"));
                                                //          copy -= state.whave;
                                                //          if (copy > state.length) { copy = state.length; }
                                                //          if (copy > left) { copy = left; }
                                                //          left -= copy;
                                                //          state.length -= copy;
                                                //          do {
                                                //            output[put++] = 0;
                                                //          } while (--copy);
                                                //          if (state.length === 0) { state.mode = LEN; }
                                                //          break;
                                                //#endif
                                            }
                                            if (copy > state.wnext) {
                                                copy -= state.wnext;
                                                from = state.wsize - copy;
                                            } else {
                                                from = state.wnext - copy;
                                            }
                                            if (copy > state.length) {
                                                copy = state.length;
                                            }
                                            from_source = state.window;
                                        } else { /* copy from output */
                                            from_source = output;
                                            from = put - state.offset;
                                            copy = state.length;
                                        }
                                        if (copy > left) {
                                            copy = left;
                                        }
                                        left -= copy;
                                        state.length -= copy;
                                        do {
                                            output[put++] = from_source[from++];
                                        } while (--copy);
                                        if (state.length === 0) {
                                            state.mode = LEN;
                                        }
                                        break;
                                    case LIT:
                                        if (left === 0) {
                                            break inf_leave;
                                        }
                                        output[put++] = state.length;
                                        left--;
                                        state.mode = LEN;
                                        break;
                                    case CHECK:
                                        if (state.wrap) {
                                            //=== NEEDBITS(32);
                                            while (bits < 32) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                // Use '|' insdead of '+' to make sure that result is signed
                                                hold |= input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            _out -= left;
                                            strm.total_out += _out;
                                            state.total += _out;
                                            if (_out) {
                                                strm.adler = state.check =
                                                    /*UPDATE(state.check, put - _out, _out);*/
                                                    (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

                                            }
                                            _out = left;
                                            // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
                                            if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
                                                strm.msg = 'incorrect data check';
                                                state.mode = BAD;
                                                break;
                                            }
                                            //=== INITBITS();
                                            hold = 0;
                                            bits = 0;
                                            //===//
                                            //Tracev((stderr, "inflate:   check matches trailer\n"));
                                        }
                                        state.mode = LENGTH;
                                        /* falls through */
                                    case LENGTH:
                                        if (state.wrap && state.flags) {
                                            //=== NEEDBITS(32);
                                            while (bits < 32) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            if (hold !== (state.total & 0xffffffff)) {
                                                strm.msg = 'incorrect length check';
                                                state.mode = BAD;
                                                break;
                                            }
                                            //=== INITBITS();
                                            hold = 0;
                                            bits = 0;
                                            //===//
                                            //Tracev((stderr, "inflate:   length matches trailer\n"));
                                        }
                                        state.mode = DONE;
                                        /* falls through */
                                    case DONE:
                                        ret = Z_STREAM_END;
                                        break inf_leave;
                                    case BAD:
                                        ret = Z_DATA_ERROR;
                                        break inf_leave;
                                    case MEM:
                                        return Z_MEM_ERROR;
                                    case SYNC:
                                        /* falls through */
                                    default:
                                        return Z_STREAM_ERROR;
                                }
                            }

                        // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

                        /*
                         Return from inflate(), updating the total counts and the check value.
                         If there was no progress during the inflate() call, return a buffer
                         error.  Call updatewindow() to create and/or update the window state.
                         Note: a memory error from inflate() is non-recoverable.
                         */

                        //--- RESTORE() ---
                        strm.next_out = put;
                        strm.avail_out = left;
                        strm.next_in = next;
                        strm.avail_in = have;
                        state.hold = hold;
                        state.bits = bits;
                        //---

                        if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                                (state.mode < CHECK || flush !== Z_FINISH))) {
                            if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                                state.mode = MEM;
                                return Z_MEM_ERROR;
                            }
                        }
                        _in -= strm.avail_in;
                        _out -= strm.avail_out;
                        strm.total_in += _in;
                        strm.total_out += _out;
                        state.total += _out;
                        if (state.wrap && _out) {
                            strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
                                (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
                        }
                        strm.data_type = state.bits + (state.last ? 64 : 0) +
                            (state.mode === TYPE ? 128 : 0) +
                            (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
                        if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
                            ret = Z_BUF_ERROR;
                        }
                        return ret;
                    }

                    function inflateEnd(strm) {

                        if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
                            return Z_STREAM_ERROR;
                        }

                        var state = strm.state;
                        if (state.window) {
                            state.window = null;
                        }
                        strm.state = null;
                        return Z_OK;
                    }

                    function inflateGetHeader(strm, head) {
                        var state;

                        /* check state */
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        if ((state.wrap & 2) === 0) {
                            return Z_STREAM_ERROR;
                        }

                        /* save header structure */
                        state.head = head;
                        head.done = false;
                        return Z_OK;
                    }


                    exports.inflateReset = inflateReset;
                    exports.inflateReset2 = inflateReset2;
                    exports.inflateResetKeep = inflateResetKeep;
                    exports.inflateInit = inflateInit;
                    exports.inflateInit2 = inflateInit2;
                    exports.inflate = inflate;
                    exports.inflateEnd = inflateEnd;
                    exports.inflateGetHeader = inflateGetHeader;
                    exports.inflateInfo = 'pako inflate (from Nodeca project)';

                    /* Not implemented
                     exports.inflateCopy = inflateCopy;
                     exports.inflateGetDictionary = inflateGetDictionary;
                     exports.inflateMark = inflateMark;
                     exports.inflatePrime = inflatePrime;
                     exports.inflateSetDictionary = inflateSetDictionary;
                     exports.inflateSync = inflateSync;
                     exports.inflateSyncPoint = inflateSyncPoint;
                     exports.inflateUndermine = inflateUndermine;
                     */
                }, {
                    "../utils/common": 27,
                    "./adler32": 29,
                    "./crc32": 31,
                    "./inffast": 34,
                    "./inftrees": 36
                }],
                36: [function(_dereq_, module, exports) {
                    'use strict';


                    var utils = _dereq_('../utils/common');

                    var MAXBITS = 15;
                    var ENOUGH_LENS = 852;
                    var ENOUGH_DISTS = 592;
                    //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

                    var CODES = 0;
                    var LENS = 1;
                    var DISTS = 2;

                    var lbase = [ /* Length codes 257..285 base */
                        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
                        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
                    ];

                    var lext = [ /* Length codes 257..285 extra */
                        16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
                        19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
                    ];

                    var dbase = [ /* Distance codes 0..29 base */
                        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
                        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
                        8193, 12289, 16385, 24577, 0, 0
                    ];

                    var dext = [ /* Distance codes 0..29 extra */
                        16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
                        23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
                        28, 28, 29, 29, 64, 64
                    ];

                    module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
                        var bits = opts.bits;
                        //here = opts.here; /* table entry for duplication */

                        var len = 0;
                        /* a code's length in bits */
                        var sym = 0;
                        /* index of code symbols */
                        var min = 0,
                            max = 0;
                        /* minimum and maximum code lengths */
                        var root = 0;
                        /* number of index bits for root table */
                        var curr = 0;
                        /* number of index bits for current table */
                        var drop = 0;
                        /* code bits to drop for sub-table */
                        var left = 0;
                        /* number of prefix codes available */
                        var used = 0;
                        /* code entries in table used */
                        var huff = 0;
                        /* Huffman code */
                        var incr;
                        /* for incrementing code, index */
                        var fill;
                        /* index for replicating entries */
                        var low;
                        /* low bits for current root entry */
                        var mask;
                        /* mask for low root bits */
                        var next;
                        /* next available space in table */
                        var base = null;
                        /* base value table to use */
                        var base_index = 0;
                        //  var shoextra;    /* extra bits table to use */
                        var end;
                        /* use base and extra for symbol > end */
                        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
                        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
                        var extra = null;
                        var extra_index = 0;

                        var here_bits, here_op, here_val;

                        /*
                         Process a set of code lengths to create a canonical Huffman code.  The
                         code lengths are lens[0..codes-1].  Each length corresponds to the
                         symbols 0..codes-1.  The Huffman code is generated by first sorting the
                         symbols by length from short to long, and retaining the symbol order
                         for codes with equal lengths.  Then the code starts with all zero bits
                         for the first code of the shortest length, and the codes are integer
                         increments for the same length, and zeros are appended as the length
                         increases.  For the deflate format, these bits are stored backwards
                         from their more natural integer increment ordering, and so when the
                         decoding tables are built in the large loop below, the integer codes
                         are incremented backwards.

                         This routine assumes, but does not check, that all of the entries in
                         lens[] are in the range 0..MAXBITS.  The caller must assure this.
                         1..MAXBITS is interpreted as that code length.  zero means that that
                         symbol does not occur in this code.

                         The codes are sorted by computing a count of codes for each length,
                         creating from that a table of starting indices for each length in the
                         sorted table, and then entering the symbols in order in the sorted
                         table.  The sorted table is work[], with that space being provided by
                         the caller.

                         The length counts are used for other purposes as well, i.e. finding
                         the minimum and maximum length codes, determining if there are any
                         codes at all, checking for a valid set of lengths, and looking ahead
                         at length counts to determine sub-table sizes when building the
                         decoding tables.
                         */

                        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
                        for (len = 0; len <= MAXBITS; len++) {
                            count[len] = 0;
                        }
                        for (sym = 0; sym < codes; sym++) {
                            count[lens[lens_index + sym]]++;
                        }

                        /* bound code lengths, force root to be within code lengths */
                        root = bits;
                        for (max = MAXBITS; max >= 1; max--) {
                            if (count[max] !== 0) {
                                break;
                            }
                        }
                        if (root > max) {
                            root = max;
                        }
                        if (max === 0) { /* no symbols to code at all */
                            //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                            //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                            //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                            table[table_index++] = (1 << 24) | (64 << 16) | 0;


                            //table.op[opts.table_index] = 64;
                            //table.bits[opts.table_index] = 1;
                            //table.val[opts.table_index++] = 0;
                            table[table_index++] = (1 << 24) | (64 << 16) | 0;

                            opts.bits = 1;
                            return 0;
                            /* no symbols, but wait for decoding to report error */
                        }
                        for (min = 1; min < max; min++) {
                            if (count[min] !== 0) {
                                break;
                            }
                        }
                        if (root < min) {
                            root = min;
                        }

                        /* check for an over-subscribed or incomplete set of lengths */
                        left = 1;
                        for (len = 1; len <= MAXBITS; len++) {
                            left <<= 1;
                            left -= count[len];
                            if (left < 0) {
                                return -1;
                            }
                            /* over-subscribed */
                        }
                        if (left > 0 && (type === CODES || max !== 1)) {
                            return -1;
                            /* incomplete set */
                        }

                        /* generate offsets into symbol table for each length for sorting */
                        offs[1] = 0;
                        for (len = 1; len < MAXBITS; len++) {
                            offs[len + 1] = offs[len] + count[len];
                        }

                        /* sort symbols by length, by symbol order within each length */
                        for (sym = 0; sym < codes; sym++) {
                            if (lens[lens_index + sym] !== 0) {
                                work[offs[lens[lens_index + sym]]++] = sym;
                            }
                        }

                        /*
                         Create and fill in decoding tables.  In this loop, the table being
                         filled is at next and has curr index bits.  The code being used is huff
                         with length len.  That code is converted to an index by dropping drop
                         bits off of the bottom.  For codes where len is less than drop + curr,
                         those top drop + curr - len bits are incremented through all values to
                         fill the table with replicated entries.

                         root is the number of index bits for the root table.  When len exceeds
                         root, sub-tables are created pointed to by the root entry with an index
                         of the low root bits of huff.  This is saved in low to check for when a
                         new sub-table should be started.  drop is zero when the root table is
                         being filled, and drop is root when sub-tables are being filled.

                         When a new sub-table is needed, it is necessary to look ahead in the
                         code lengths to determine what size sub-table is needed.  The length
                         counts are used for this, and so count[] is decremented as codes are
                         entered in the tables.

                         used keeps track of how many table entries have been allocated from the
                         provided *table space.  It is checked for LENS and DIST tables against
                         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
                         the initial root table size constants.  See the comments in inftrees.h
                         for more information.

                         sym increments through all symbols, and the loop terminates when
                         all codes of length max, i.e. all codes, have been processed.  This
                         routine permits incomplete codes, so another loop after this one fills
                         in the rest of the decoding tables with invalid code markers.
                         */

                        /* set up for code type */
                        // poor man optimization - use if-else instead of switch,
                        // to avoid deopts in old v8
                        if (type === CODES) {
                            base = extra = work;
                            /* dummy value--not used */
                            end = 19;
                        } else if (type === LENS) {
                            base = lbase;
                            base_index -= 257;
                            extra = lext;
                            extra_index -= 257;
                            end = 256;
                        } else { /* DISTS */
                            base = dbase;
                            extra = dext;
                            end = -1;
                        }

                        /* initialize opts for loop */
                        huff = 0;
                        /* starting code */
                        sym = 0;
                        /* starting code symbol */
                        len = min;
                        /* starting code length */
                        next = table_index;
                        /* current table to fill in */
                        curr = root;
                        /* current table index bits */
                        drop = 0;
                        /* current bits to drop from code for index */
                        low = -1;
                        /* trigger new sub-table when len > root */
                        used = 1 << root;
                        /* use root table entries */
                        mask = used - 1;
                        /* mask for comparing low */

                        /* check available table space */
                        if ((type === LENS && used > ENOUGH_LENS) ||
                            (type === DISTS && used > ENOUGH_DISTS)) {
                            return 1;
                        }

                        var i = 0;
                        /* process all codes and make table entries */
                        for (;;) {
                            i++;
                            /* create table entry */
                            here_bits = len - drop;
                            if (work[sym] < end) {
                                here_op = 0;
                                here_val = work[sym];
                            } else if (work[sym] > end) {
                                here_op = extra[extra_index + work[sym]];
                                here_val = base[base_index + work[sym]];
                            } else {
                                here_op = 32 + 64;
                                /* end of block */
                                here_val = 0;
                            }

                            /* replicate for those indices with low len bits equal to huff */
                            incr = 1 << (len - drop);
                            fill = 1 << curr;
                            min = fill;
                            /* save offset to next table */
                            do {
                                fill -= incr;
                                table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
                            } while (fill !== 0);

                            /* backwards increment the len-bit code huff */
                            incr = 1 << (len - 1);
                            while (huff & incr) {
                                incr >>= 1;
                            }
                            if (incr !== 0) {
                                huff &= incr - 1;
                                huff += incr;
                            } else {
                                huff = 0;
                            }

                            /* go to next symbol, update count, len */
                            sym++;
                            if (--count[len] === 0) {
                                if (len === max) {
                                    break;
                                }
                                len = lens[lens_index + work[sym]];
                            }

                            /* create new sub-table if needed */
                            if (len > root && (huff & mask) !== low) {
                                /* if first time, transition to sub-tables */
                                if (drop === 0) {
                                    drop = root;
                                }

                                /* increment past last table */
                                next += min;
                                /* here min is 1 << curr */

                                /* determine length of next table */
                                curr = len - drop;
                                left = 1 << curr;
                                while (curr + drop < max) {
                                    left -= count[curr + drop];
                                    if (left <= 0) {
                                        break;
                                    }
                                    curr++;
                                    left <<= 1;
                                }

                                /* check for enough space */
                                used += 1 << curr;
                                if ((type === LENS && used > ENOUGH_LENS) ||
                                    (type === DISTS && used > ENOUGH_DISTS)) {
                                    return 1;
                                }

                                /* point entry in root table to sub-table */
                                low = huff & mask;
                                /*table.op[low] = curr;
                                 table.bits[low] = root;
                                 table.val[low] = next - opts.table_index;*/
                                table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
                            }
                        }

                        /* fill in remaining table entry if code is incomplete (guaranteed to have
                         at most one remaining entry, since if the code is incomplete, the
                         maximum code length that was allowed to get this far is one bit) */
                        if (huff !== 0) {
                            //table.op[next + huff] = 64;            /* invalid code marker */
                            //table.bits[next + huff] = len - drop;
                            //table.val[next + huff] = 0;
                            table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
                        }

                        /* set return parameters */
                        //opts.table_index += used;
                        opts.bits = root;
                        return 0;
                    };

                }, {
                    "../utils/common": 27
                }],
                37: [function(_dereq_, module, exports) {
                    'use strict';

                    module.exports = {
                        '2': 'need dictionary',
                        /* Z_NEED_DICT       2  */
                        '1': 'stream end',
                        /* Z_STREAM_END      1  */
                        '0': '',
                        /* Z_OK              0  */
                        '-1': 'file error',
                        /* Z_ERRNO         (-1) */
                        '-2': 'stream error',
                        /* Z_STREAM_ERROR  (-2) */
                        '-3': 'data error',
                        /* Z_DATA_ERROR    (-3) */
                        '-4': 'insufficient memory',
                        /* Z_MEM_ERROR     (-4) */
                        '-5': 'buffer error',
                        /* Z_BUF_ERROR     (-5) */
                        '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
                    };
                }, {}],
                38: [function(_dereq_, module, exports) {
                    'use strict';


                    var utils = _dereq_('../utils/common');

                    /* Public constants ==========================================================*/
                    /* ===========================================================================*/


                    //var Z_FILTERED          = 1;
                    //var Z_HUFFMAN_ONLY      = 2;
                    //var Z_RLE               = 3;
                    var Z_FIXED = 4;
                    //var Z_DEFAULT_STRATEGY  = 0;

                    /* Possible values of the data_type field (though see inflate()) */
                    var Z_BINARY = 0;
                    var Z_TEXT = 1;
                    //var Z_ASCII             = 1; // = Z_TEXT
                    var Z_UNKNOWN = 2;

                    /*============================================================================*/


                    function zero(buf) {
                        var len = buf.length;
                        while (--len >= 0) {
                            buf[len] = 0;
                        }
                    }

                    // From zutil.h

                    var STORED_BLOCK = 0;
                    var STATIC_TREES = 1;
                    var DYN_TREES = 2;
                    /* The three kinds of block type */

                    var MIN_MATCH = 3;
                    var MAX_MATCH = 258;
                    /* The minimum and maximum match lengths */

                    // From deflate.h
                    /* ===========================================================================
                     * Internal compression state.
                     */

                    var LENGTH_CODES = 29;
                    /* number of length codes, not counting the special END_BLOCK code */

                    var LITERALS = 256;
                    /* number of literal bytes 0..255 */

                    var L_CODES = LITERALS + 1 + LENGTH_CODES;
                    /* number of Literal or Length codes, including the END_BLOCK code */

                    var D_CODES = 30;
                    /* number of distance codes */

                    var BL_CODES = 19;
                    /* number of codes used to transfer the bit lengths */

                    var HEAP_SIZE = 2 * L_CODES + 1;
                    /* maximum heap size */

                    var MAX_BITS = 15;
                    /* All codes must not exceed MAX_BITS bits */

                    var Buf_size = 16;
                    /* size of bit buffer in bi_buf */


                    /* ===========================================================================
                     * Constants
                     */

                    var MAX_BL_BITS = 7;
                    /* Bit length codes must not exceed MAX_BL_BITS bits */

                    var END_BLOCK = 256;
                    /* end of block literal code */

                    var REP_3_6 = 16;
                    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

                    var REPZ_3_10 = 17;
                    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

                    var REPZ_11_138 = 18;
                    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

                    var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

                    var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

                    var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

                    var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                    /* The lengths of the bit length codes are sent in order of decreasing
                     * probability, to avoid transmitting the lengths for unused bit length codes.
                     */

                    /* ===========================================================================
                     * Local data. These are initialized only once.
                     */

                    // We pre-fill arrays with 0 to avoid uninitialized gaps

                    var DIST_CODE_LEN = 512;
                    /* see definition of array dist_code below */

                    // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
                    var static_ltree = new Array((L_CODES + 2) * 2);
                    zero(static_ltree);
                    /* The static literal tree. Since the bit lengths are imposed, there is no
                     * need for the L_CODES extra codes used during heap construction. However
                     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
                     * below).
                     */

                    var static_dtree = new Array(D_CODES * 2);
                    zero(static_dtree);
                    /* The static distance tree. (Actually a trivial tree since all codes use
                     * 5 bits.)
                     */

                    var _dist_code = new Array(DIST_CODE_LEN);
                    zero(_dist_code);
                    /* Distance codes. The first 256 values correspond to the distances
                     * 3 .. 258, the last 256 values correspond to the top 8 bits of
                     * the 15 bit distances.
                     */

                    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
                    zero(_length_code);
                    /* length code for each normalized match length (0 == MIN_MATCH) */

                    var base_length = new Array(LENGTH_CODES);
                    zero(base_length);
                    /* First normalized length for each code (0 = MIN_MATCH) */

                    var base_dist = new Array(D_CODES);
                    zero(base_dist);
                    /* First normalized distance for each code (0 = distance of 1) */


                    var StaticTreeDesc = function(static_tree, extra_bits, extra_base, elems, max_length) {

                        this.static_tree = static_tree;
                        /* static tree or NULL */
                        this.extra_bits = extra_bits;
                        /* extra bits for each code or NULL */
                        this.extra_base = extra_base;
                        /* base index for extra_bits */
                        this.elems = elems;
                        /* max number of elements in the tree */
                        this.max_length = max_length;
                        /* max bit length for the codes */

                        // show if `static_tree` has data or dummy - needed for monomorphic objects
                        this.has_stree = static_tree && static_tree.length;
                    };


                    var static_l_desc;
                    var static_d_desc;
                    var static_bl_desc;


                    var TreeDesc = function(dyn_tree, stat_desc) {
                        this.dyn_tree = dyn_tree;
                        /* the dynamic tree */
                        this.max_code = 0;
                        /* largest code with non zero frequency */
                        this.stat_desc = stat_desc;
                        /* the corresponding static tree */
                    };


                    function d_code(dist) {
                        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
                    }


                    /* ===========================================================================
                     * Output a short LSB first on the stream.
                     * IN assertion: there is enough room in pendingBuf.
                     */
                    function put_short(s, w) {
                        //    put_byte(s, (uch)((w) & 0xff));
                        //    put_byte(s, (uch)((ush)(w) >> 8));
                        s.pending_buf[s.pending++] = (w) & 0xff;
                        s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
                    }


                    /* ===========================================================================
                     * Send a value on a given number of bits.
                     * IN assertion: length <= 16 and value fits in length bits.
                     */
                    function send_bits(s, value, length) {
                        if (s.bi_valid > (Buf_size - length)) {
                            s.bi_buf |= (value << s.bi_valid) & 0xffff;
                            put_short(s, s.bi_buf);
                            s.bi_buf = value >> (Buf_size - s.bi_valid);
                            s.bi_valid += length - Buf_size;
                        } else {
                            s.bi_buf |= (value << s.bi_valid) & 0xffff;
                            s.bi_valid += length;
                        }
                    }


                    function send_code(s, c, tree) {
                        send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
                    }


                    /* ===========================================================================
                     * Reverse the first len bits of a code, using straightforward code (a faster
                     * method would use a table)
                     * IN assertion: 1 <= len <= 15
                     */
                    function bi_reverse(code, len) {
                        var res = 0;
                        do {
                            res |= code & 1;
                            code >>>= 1;
                            res <<= 1;
                        } while (--len > 0);
                        return res >>> 1;
                    }


                    /* ===========================================================================
                     * Flush the bit buffer, keeping at most 7 bits in it.
                     */
                    function bi_flush(s) {
                        if (s.bi_valid === 16) {
                            put_short(s, s.bi_buf);
                            s.bi_buf = 0;
                            s.bi_valid = 0;

                        } else if (s.bi_valid >= 8) {
                            s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                            s.bi_buf >>= 8;
                            s.bi_valid -= 8;
                        }
                    }


                    /* ===========================================================================
                     * Compute the optimal bit lengths for a tree and update the total bit length
                     * for the current block.
                     * IN assertion: the fields freq and dad are set, heap[heap_max] and
                     *    above are the tree nodes sorted by increasing frequency.
                     * OUT assertions: the field len is set to the optimal bit length, the
                     *     array bl_count contains the frequencies for each bit length.
                     *     The length opt_len is updated; static_len is also updated if stree is
                     *     not null.
                     */
                    function gen_bitlen(s, desc)
                        //    deflate_state *s;
                        //    tree_desc *desc;    /* the tree descriptor */
                        {
                            var tree = desc.dyn_tree;
                            var max_code = desc.max_code;
                            var stree = desc.stat_desc.static_tree;
                            var has_stree = desc.stat_desc.has_stree;
                            var extra = desc.stat_desc.extra_bits;
                            var base = desc.stat_desc.extra_base;
                            var max_length = desc.stat_desc.max_length;
                            var h;
                            /* heap index */
                            var n, m;
                            /* iterate over the tree elements */
                            var bits;
                            /* bit length */
                            var xbits;
                            /* extra bits */
                            var f;
                            /* frequency */
                            var overflow = 0;
                            /* number of elements with bit length too large */

                            for (bits = 0; bits <= MAX_BITS; bits++) {
                                s.bl_count[bits] = 0;
                            }

                            /* In a first pass, compute the optimal bit lengths (which may
                             * overflow in the case of the bit length tree).
                             */
                            tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0;
                            /* root of the heap */

                            for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                                n = s.heap[h];
                                bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
                                if (bits > max_length) {
                                    bits = max_length;
                                    overflow++;
                                }
                                tree[n * 2 + 1] /*.Len*/ = bits;
                                /* We overwrite tree[n].Dad which is no longer needed */

                                if (n > max_code) {
                                    continue;
                                }
                                /* not a leaf node */

                                s.bl_count[bits]++;
                                xbits = 0;
                                if (n >= base) {
                                    xbits = extra[n - base];
                                }
                                f = tree[n * 2] /*.Freq*/ ;
                                s.opt_len += f * (bits + xbits);
                                if (has_stree) {
                                    s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
                                }
                            }
                            if (overflow === 0) {
                                return;
                            }

                            // Trace((stderr,"\nbit length overflow\n"));
                            /* This happens for example on obj2 and pic of the Calgary corpus */

                            /* Find the first bit length which could increase: */
                            do {
                                bits = max_length - 1;
                                while (s.bl_count[bits] === 0) {
                                    bits--;
                                }
                                s.bl_count[bits]--;
                                /* move one leaf down the tree */
                                s.bl_count[bits + 1] += 2;
                                /* move one overflow item as its brother */
                                s.bl_count[max_length]--;
                                /* The brother of the overflow item also moves one step up,
                                 * but this does not affect bl_count[max_length]
                                 */
                                overflow -= 2;
                            } while (overflow > 0);

                            /* Now recompute all bit lengths, scanning in increasing frequency.
                             * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                             * lengths instead of fixing only the wrong ones. This idea is taken
                             * from 'ar' written by Haruhiko Okumura.)
                             */
                            for (bits = max_length; bits !== 0; bits--) {
                                n = s.bl_count[bits];
                                while (n !== 0) {
                                    m = s.heap[--h];
                                    if (m > max_code) {
                                        continue;
                                    }
                                    if (tree[m * 2 + 1] /*.Len*/ !== bits) {
                                        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                                        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
                                        tree[m * 2 + 1] /*.Len*/ = bits;
                                    }
                                    n--;
                                }
                            }
                        }


                    /* ===========================================================================
                     * Generate the codes for a given tree and bit counts (which need not be
                     * optimal).
                     * IN assertion: the array bl_count contains the bit length statistics for
                     * the given tree and the field len is set for all tree elements.
                     * OUT assertion: the field code is set for all tree elements of non
                     *     zero code length.
                     */
                    function gen_codes(tree, max_code, bl_count)
                        //    ct_data *tree;             /* the tree to decorate */
                        //    int max_code;              /* largest code with non zero frequency */
                        //    ushf *bl_count;            /* number of codes at each bit length */
                        {
                            var next_code = new Array(MAX_BITS + 1);
                            /* next code value for each bit length */
                            var code = 0;
                            /* running code value */
                            var bits;
                            /* bit index */
                            var n;
                            /* code index */

                            /* The distribution counts are first used to generate the code values
                             * without bit reversal.
                             */
                            for (bits = 1; bits <= MAX_BITS; bits++) {
                                next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
                            }
                            /* Check that the bit counts in bl_count are consistent. The last code
                             * must be all ones.
                             */
                            //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
                            //        "inconsistent bit counts");
                            //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

                            for (n = 0; n <= max_code; n++) {
                                var len = tree[n * 2 + 1] /*.Len*/ ;
                                if (len === 0) {
                                    continue;
                                }
                                /* Now reverse the bits */
                                tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

                                //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                                //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
                            }
                        }


                    /* ===========================================================================
                     * Initialize the various 'constant' tables.
                     */
                    function tr_static_init() {
                        var n;
                        /* iterates over tree elements */
                        var bits;
                        /* bit counter */
                        var length;
                        /* length value */
                        var code;
                        /* code value */
                        var dist;
                        /* distance index */
                        var bl_count = new Array(MAX_BITS + 1);
                        /* number of codes at each bit length for an optimal tree */

                        // do check in _tr_init()
                        //if (static_init_done) return;

                        /* For some embedded targets, global variables are not initialized: */
                        /*#ifdef NO_INIT_GLOBAL_POINTERS
                         static_l_desc.static_tree = static_ltree;
                         static_l_desc.extra_bits = extra_lbits;
                         static_d_desc.static_tree = static_dtree;
                         static_d_desc.extra_bits = extra_dbits;
                         static_bl_desc.extra_bits = extra_blbits;
                         #endif*/

                        /* Initialize the mapping length (0..255) -> length code (0..28) */
                        length = 0;
                        for (code = 0; code < LENGTH_CODES - 1; code++) {
                            base_length[code] = length;
                            for (n = 0; n < (1 << extra_lbits[code]); n++) {
                                _length_code[length++] = code;
                            }
                        }
                        //Assert (length == 256, "tr_static_init: length != 256");
                        /* Note that the length 255 (match length 258) can be represented
                         * in two different ways: code 284 + 5 bits or code 285, so we
                         * overwrite length_code[255] to use the best encoding:
                         */
                        _length_code[length - 1] = code;

                        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
                        dist = 0;
                        for (code = 0; code < 16; code++) {
                            base_dist[code] = dist;
                            for (n = 0; n < (1 << extra_dbits[code]); n++) {
                                _dist_code[dist++] = code;
                            }
                        }
                        //Assert (dist == 256, "tr_static_init: dist != 256");
                        dist >>= 7;
                        /* from now on, all distances are divided by 128 */
                        for (; code < D_CODES; code++) {
                            base_dist[code] = dist << 7;
                            for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
                                _dist_code[256 + dist++] = code;
                            }
                        }
                        //Assert (dist == 256, "tr_static_init: 256+dist != 512");

                        /* Construct the codes of the static literal tree */
                        for (bits = 0; bits <= MAX_BITS; bits++) {
                            bl_count[bits] = 0;
                        }

                        n = 0;
                        while (n <= 143) {
                            static_ltree[n * 2 + 1] /*.Len*/ = 8;
                            n++;
                            bl_count[8]++;
                        }
                        while (n <= 255) {
                            static_ltree[n * 2 + 1] /*.Len*/ = 9;
                            n++;
                            bl_count[9]++;
                        }
                        while (n <= 279) {
                            static_ltree[n * 2 + 1] /*.Len*/ = 7;
                            n++;
                            bl_count[7]++;
                        }
                        while (n <= 287) {
                            static_ltree[n * 2 + 1] /*.Len*/ = 8;
                            n++;
                            bl_count[8]++;
                        }
                        /* Codes 286 and 287 do not exist, but we must include them in the
                         * tree construction to get a canonical Huffman tree (longest code
                         * all ones)
                         */
                        gen_codes(static_ltree, L_CODES + 1, bl_count);

                        /* The static distance tree is trivial: */
                        for (n = 0; n < D_CODES; n++) {
                            static_dtree[n * 2 + 1] /*.Len*/ = 5;
                            static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
                        }

                        // Now data ready and we can init static trees
                        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
                        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
                        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

                        //static_init_done = true;
                    }


                    /* ===========================================================================
                     * Initialize a new block.
                     */
                    function init_block(s) {
                        var n;
                        /* iterates over tree elements */

                        /* Initialize the trees. */
                        for (n = 0; n < L_CODES; n++) {
                            s.dyn_ltree[n * 2] /*.Freq*/ = 0;
                        }
                        for (n = 0; n < D_CODES; n++) {
                            s.dyn_dtree[n * 2] /*.Freq*/ = 0;
                        }
                        for (n = 0; n < BL_CODES; n++) {
                            s.bl_tree[n * 2] /*.Freq*/ = 0;
                        }

                        s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
                        s.opt_len = s.static_len = 0;
                        s.last_lit = s.matches = 0;
                    }


                    /* ===========================================================================
                     * Flush the bit buffer and align the output on a byte boundary
                     */
                    function bi_windup(s) {
                        if (s.bi_valid > 8) {
                            put_short(s, s.bi_buf);
                        } else if (s.bi_valid > 0) {
                            //put_byte(s, (Byte)s->bi_buf);
                            s.pending_buf[s.pending++] = s.bi_buf;
                        }
                        s.bi_buf = 0;
                        s.bi_valid = 0;
                    }

                    /* ===========================================================================
                     * Copy a stored block, storing first the length and its
                     * one's complement if requested.
                     */
                    function copy_block(s, buf, len, header)
                        //DeflateState *s;
                        //charf    *buf;    /* the input data */
                        //unsigned len;     /* its length */
                        //int      header;  /* true if block header must be written */
                        {
                            bi_windup(s);
                            /* align on byte boundary */

                            if (header) {
                                put_short(s, len);
                                put_short(s, ~len);
                            }
                            //  while (len--) {
                            //    put_byte(s, *buf++);
                            //  }
                            utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
                            s.pending += len;
                        }

                    /* ===========================================================================
                     * Compares to subtrees, using the tree depth as tie breaker when
                     * the subtrees have equal frequency. This minimizes the worst case length.
                     */
                    function smaller(tree, n, m, depth) {
                        var _n2 = n * 2;
                        var _m2 = m * 2;
                        return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
                            (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
                    }

                    /* ===========================================================================
                     * Restore the heap property by moving down the tree starting at node k,
                     * exchanging a node with the smallest of its two sons if necessary, stopping
                     * when the heap property is re-established (each father smaller than its
                     * two sons).
                     */
                    function pqdownheap(s, tree, k)
                        //    deflate_state *s;
                        //    ct_data *tree;  /* the tree to restore */
                        //    int k;               /* node to move down */
                        {
                            var v = s.heap[k];
                            var j = k << 1;
                            /* left son of k */
                            while (j <= s.heap_len) {
                                /* Set j to the smallest of the two sons: */
                                if (j < s.heap_len &&
                                    smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                                    j++;
                                }
                                /* Exit if v is smaller than both sons */
                                if (smaller(tree, v, s.heap[j], s.depth)) {
                                    break;
                                }

                                /* Exchange v with the smallest son */
                                s.heap[k] = s.heap[j];
                                k = j;

                                /* And continue down the tree, setting j to the left son of k */
                                j <<= 1;
                            }
                            s.heap[k] = v;
                        }


                    // inlined manually
                    // var SMALLEST = 1;

                    /* ===========================================================================
                     * Send the block data compressed using the given Huffman trees
                     */
                    function compress_block(s, ltree, dtree)
                        //    deflate_state *s;
                        //    const ct_data *ltree; /* literal tree */
                        //    const ct_data *dtree; /* distance tree */
                        {
                            var dist;
                            /* distance of matched string */
                            var lc;
                            /* match length or unmatched char (if dist == 0) */
                            var lx = 0;
                            /* running index in l_buf */
                            var code;
                            /* the code to send */
                            var extra;
                            /* number of extra bits to send */

                            if (s.last_lit !== 0) {
                                do {
                                    dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
                                    lc = s.pending_buf[s.l_buf + lx];
                                    lx++;

                                    if (dist === 0) {
                                        send_code(s, lc, ltree);
                                        /* send a literal byte */
                                        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                                    } else {
                                        /* Here, lc is the match length - MIN_MATCH */
                                        code = _length_code[lc];
                                        send_code(s, code + LITERALS + 1, ltree);
                                        /* send the length code */
                                        extra = extra_lbits[code];
                                        if (extra !== 0) {
                                            lc -= base_length[code];
                                            send_bits(s, lc, extra);
                                            /* send the extra length bits */
                                        }
                                        dist--;
                                        /* dist is now the match distance - 1 */
                                        code = d_code(dist);
                                        //Assert (code < D_CODES, "bad d_code");

                                        send_code(s, code, dtree);
                                        /* send the distance code */
                                        extra = extra_dbits[code];
                                        if (extra !== 0) {
                                            dist -= base_dist[code];
                                            send_bits(s, dist, extra);
                                            /* send the extra distance bits */
                                        }
                                    }
                                    /* literal or match pair ? */

                                    /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                                    //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                                    //       "pendingBuf overflow");

                                } while (lx < s.last_lit);
                            }

                            send_code(s, END_BLOCK, ltree);
                        }


                    /* ===========================================================================
                     * Construct one Huffman tree and assigns the code bit strings and lengths.
                     * Update the total bit length for the current block.
                     * IN assertion: the field freq is set for all tree elements.
                     * OUT assertions: the fields len and code are set to the optimal bit length
                     *     and corresponding code. The length opt_len is updated; static_len is
                     *     also updated if stree is not null. The field max_code is set.
                     */
                    function build_tree(s, desc)
                        //    deflate_state *s;
                        //    tree_desc *desc; /* the tree descriptor */
                        {
                            var tree = desc.dyn_tree;
                            var stree = desc.stat_desc.static_tree;
                            var has_stree = desc.stat_desc.has_stree;
                            var elems = desc.stat_desc.elems;
                            var n, m;
                            /* iterate over heap elements */
                            var max_code = -1;
                            /* largest code with non zero frequency */
                            var node;
                            /* new node being created */

                            /* Construct the initial heap, with least frequent element in
                             * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                             * heap[0] is not used.
                             */
                            s.heap_len = 0;
                            s.heap_max = HEAP_SIZE;

                            for (n = 0; n < elems; n++) {
                                if (tree[n * 2] /*.Freq*/ !== 0) {
                                    s.heap[++s.heap_len] = max_code = n;
                                    s.depth[n] = 0;

                                } else {
                                    tree[n * 2 + 1] /*.Len*/ = 0;
                                }
                            }

                            /* The pkzip format requires that at least one distance code exists,
                             * and that at least one bit should be sent even if there is only one
                             * possible code. So to avoid special checks later on we force at least
                             * two codes of non zero frequency.
                             */
                            while (s.heap_len < 2) {
                                node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
                                tree[node * 2] /*.Freq*/ = 1;
                                s.depth[node] = 0;
                                s.opt_len--;

                                if (has_stree) {
                                    s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
                                }
                                /* node is 0 or 1 so it does not have extra bits */
                            }
                            desc.max_code = max_code;

                            /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                             * establish sub-heaps of increasing lengths:
                             */
                            for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
                                pqdownheap(s, tree, n);
                            }

                            /* Construct the Huffman tree by repeatedly combining the least two
                             * frequent nodes.
                             */
                            node = elems;
                            /* next internal node of the tree */
                            do {
                                //pqremove(s, tree, n);  /* n = node of least frequency */
                                /*** pqremove ***/
                                n = s.heap[1 /*SMALLEST*/ ];
                                s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
                                pqdownheap(s, tree, 1 /*SMALLEST*/ );
                                /***/

                                m = s.heap[1 /*SMALLEST*/ ];
                                /* m = node of next least frequency */

                                s.heap[--s.heap_max] = n;
                                /* keep the nodes sorted by frequency */
                                s.heap[--s.heap_max] = m;

                                /* Create a new node father of n and m */
                                tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
                                s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                                tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

                                /* and insert the new node in the heap */
                                s.heap[1 /*SMALLEST*/ ] = node++;
                                pqdownheap(s, tree, 1 /*SMALLEST*/ );

                            } while (s.heap_len >= 2);

                            s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

                            /* At this point, the fields freq and dad are set. We can now
                             * generate the bit lengths.
                             */
                            gen_bitlen(s, desc);

                            /* The field len is now set, we can generate the bit codes */
                            gen_codes(tree, max_code, s.bl_count);
                        }


                    /* ===========================================================================
                     * Scan a literal or distance tree to determine the frequencies of the codes
                     * in the bit length tree.
                     */
                    function scan_tree(s, tree, max_code)
                        //    deflate_state *s;
                        //    ct_data *tree;   /* the tree to be scanned */
                        //    int max_code;    /* and its largest code of non zero frequency */
                        {
                            var n;
                            /* iterates over all tree elements */
                            var prevlen = -1;
                            /* last emitted length */
                            var curlen;
                            /* length of current code */

                            var nextlen = tree[0 * 2 + 1] /*.Len*/ ;
                            /* length of next code */

                            var count = 0;
                            /* repeat count of the current code */
                            var max_count = 7;
                            /* max repeat count */
                            var min_count = 4;
                            /* min repeat count */

                            if (nextlen === 0) {
                                max_count = 138;
                                min_count = 3;
                            }
                            tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff;
                            /* guard */

                            for (n = 0; n <= max_code; n++) {
                                curlen = nextlen;
                                nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

                                if (++count < max_count && curlen === nextlen) {
                                    continue;

                                } else if (count < min_count) {
                                    s.bl_tree[curlen * 2] /*.Freq*/ += count;

                                } else if (curlen !== 0) {

                                    if (curlen !== prevlen) {
                                        s.bl_tree[curlen * 2] /*.Freq*/ ++;
                                    }
                                    s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

                                } else if (count <= 10) {
                                    s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

                                } else {
                                    s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
                                }

                                count = 0;
                                prevlen = curlen;

                                if (nextlen === 0) {
                                    max_count = 138;
                                    min_count = 3;

                                } else if (curlen === nextlen) {
                                    max_count = 6;
                                    min_count = 3;

                                } else {
                                    max_count = 7;
                                    min_count = 4;
                                }
                            }
                        }


                    /* ===========================================================================
                     * Send a literal or distance tree in compressed form, using the codes in
                     * bl_tree.
                     */
                    function send_tree(s, tree, max_code)
                        //    deflate_state *s;
                        //    ct_data *tree; /* the tree to be scanned */
                        //    int max_code;       /* and its largest code of non zero frequency */
                        {
                            var n;
                            /* iterates over all tree elements */
                            var prevlen = -1;
                            /* last emitted length */
                            var curlen;
                            /* length of current code */

                            var nextlen = tree[0 * 2 + 1] /*.Len*/ ;
                            /* length of next code */

                            var count = 0;
                            /* repeat count of the current code */
                            var max_count = 7;
                            /* max repeat count */
                            var min_count = 4;
                            /* min repeat count */

                            /* tree[max_code+1].Len = -1; */
                            /* guard already set */
                            if (nextlen === 0) {
                                max_count = 138;
                                min_count = 3;
                            }

                            for (n = 0; n <= max_code; n++) {
                                curlen = nextlen;
                                nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

                                if (++count < max_count && curlen === nextlen) {
                                    continue;

                                } else if (count < min_count) {
                                    do {
                                        send_code(s, curlen, s.bl_tree);
                                    } while (--count !== 0);

                                } else if (curlen !== 0) {
                                    if (curlen !== prevlen) {
                                        send_code(s, curlen, s.bl_tree);
                                        count--;
                                    }
                                    //Assert(count >= 3 && count <= 6, " 3_6?");
                                    send_code(s, REP_3_6, s.bl_tree);
                                    send_bits(s, count - 3, 2);

                                } else if (count <= 10) {
                                    send_code(s, REPZ_3_10, s.bl_tree);
                                    send_bits(s, count - 3, 3);

                                } else {
                                    send_code(s, REPZ_11_138, s.bl_tree);
                                    send_bits(s, count - 11, 7);
                                }

                                count = 0;
                                prevlen = curlen;
                                if (nextlen === 0) {
                                    max_count = 138;
                                    min_count = 3;

                                } else if (curlen === nextlen) {
                                    max_count = 6;
                                    min_count = 3;

                                } else {
                                    max_count = 7;
                                    min_count = 4;
                                }
                            }
                        }


                    /* ===========================================================================
                     * Construct the Huffman tree for the bit lengths and return the index in
                     * bl_order of the last bit length code to send.
                     */
                    function build_bl_tree(s) {
                        var max_blindex;
                        /* index of last bit length code of non zero freq */

                        /* Determine the bit length frequencies for literal and distance trees */
                        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

                        /* Build the bit length tree: */
                        build_tree(s, s.bl_desc);
                        /* opt_len now includes the length of the tree representations, except
                         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                         */

                        /* Determine the number of bit length codes to send. The pkzip format
                         * requires that at least 4 bit length codes be sent. (appnote.txt says
                         * 3 but the actual value used is 4.)
                         */
                        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                            if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
                                break;
                            }
                        }
                        /* Update opt_len to include the bit length tree and counts */
                        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
                        //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
                        //        s->opt_len, s->static_len));

                        return max_blindex;
                    }


                    /* ===========================================================================
                     * Send the header for a block using dynamic Huffman trees: the counts, the
                     * lengths of the bit length codes, the literal tree and the distance tree.
                     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
                     */
                    function send_all_trees(s, lcodes, dcodes, blcodes)
                        //    deflate_state *s;
                        //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
                        {
                            var rank;
                            /* index in bl_order */

                            //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
                            //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
                            //        "too many codes");
                            //Tracev((stderr, "\nbl counts: "));
                            send_bits(s, lcodes - 257, 5);
                            /* not +255 as stated in appnote.txt */
                            send_bits(s, dcodes - 1, 5);
                            send_bits(s, blcodes - 4, 4);
                            /* not -3 as stated in appnote.txt */
                            for (rank = 0; rank < blcodes; rank++) {
                                //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                                send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
                            }
                            //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

                            send_tree(s, s.dyn_ltree, lcodes - 1);
                            /* literal tree */
                            //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

                            send_tree(s, s.dyn_dtree, dcodes - 1);
                            /* distance tree */
                            //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
                        }


                    /* ===========================================================================
                     * Check if the data type is TEXT or BINARY, using the following algorithm:
                     * - TEXT if the two conditions below are satisfied:
                     *    a) There are no non-portable control characters belonging to the
                     *       "black list" (0..6, 14..25, 28..31).
                     *    b) There is at least one printable character belonging to the
                     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
                     * - BINARY otherwise.
                     * - The following partially-portable control characters form a
                     *   "gray list" that is ignored in this detection algorithm:
                     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
                     * IN assertion: the fields Freq of dyn_ltree are set.
                     */
                    function detect_data_type(s) {
                        /* black_mask is the bit mask of black-listed bytes
                         * set bits 0..6, 14..25, and 28..31
                         * 0xf3ffc07f = binary 11110011111111111100000001111111
                         */
                        var black_mask = 0xf3ffc07f;
                        var n;

                        /* Check for non-textual ("black-listed") bytes. */
                        for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                            if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
                                return Z_BINARY;
                            }
                        }

                        /* Check for textual ("white-listed") bytes. */
                        if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
                            s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
                            return Z_TEXT;
                        }
                        for (n = 32; n < LITERALS; n++) {
                            if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
                                return Z_TEXT;
                            }
                        }

                        /* There are no "black-listed" or "white-listed" bytes:
                         * this stream either is empty or has tolerated ("gray-listed") bytes only.
                         */
                        return Z_BINARY;
                    }


                    var static_init_done = false;

                    /* ===========================================================================
                     * Initialize the tree data structures for a new zlib stream.
                     */
                    function _tr_init(s) {

                        if (!static_init_done) {
                            tr_static_init();
                            static_init_done = true;
                        }

                        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
                        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
                        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

                        s.bi_buf = 0;
                        s.bi_valid = 0;

                        /* Initialize the first block of the first file: */
                        init_block(s);
                    }


                    /* ===========================================================================
                     * Send a stored block
                     */
                    function _tr_stored_block(s, buf, stored_len, last)
                        //DeflateState *s;
                        //charf *buf;       /* input block */
                        //ulg stored_len;   /* length of input block */
                        //int last;         /* one if this is the last block for a file */
                        {
                            send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
                            /* send block type */
                            copy_block(s, buf, stored_len, true);
                            /* with header */
                        }


                    /* ===========================================================================
                     * Send one empty static block to give enough lookahead for inflate.
                     * This takes 10 bits, of which 7 may remain in the bit buffer.
                     */
                    function _tr_align(s) {
                        send_bits(s, STATIC_TREES << 1, 3);
                        send_code(s, END_BLOCK, static_ltree);
                        bi_flush(s);
                    }


                    /* ===========================================================================
                     * Determine the best encoding for the current block: dynamic trees, static
                     * trees or store, and output the encoded block to the zip file.
                     */
                    function _tr_flush_block(s, buf, stored_len, last)
                        //DeflateState *s;
                        //charf *buf;       /* input block, or NULL if too old */
                        //ulg stored_len;   /* length of input block */
                        //int last;         /* one if this is the last block for a file */
                        {
                            var opt_lenb, static_lenb;
                            /* opt_len and static_len in bytes */
                            var max_blindex = 0;
                            /* index of last bit length code of non zero freq */

                            /* Build the Huffman trees unless a stored block is forced */
                            if (s.level > 0) {

                                /* Check if the file is binary or text */
                                if (s.strm.data_type === Z_UNKNOWN) {
                                    s.strm.data_type = detect_data_type(s);
                                }

                                /* Construct the literal and distance trees */
                                build_tree(s, s.l_desc);
                                // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                                //        s->static_len));

                                build_tree(s, s.d_desc);
                                // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                                //        s->static_len));
                                /* At this point, opt_len and static_len are the total bit lengths of
                                 * the compressed block data, excluding the tree representations.
                                 */

                                /* Build the bit length tree for the above two trees, and get the index
                                 * in bl_order of the last bit length code to send.
                                 */
                                max_blindex = build_bl_tree(s);

                                /* Determine the best encoding. Compute the block lengths in bytes. */
                                opt_lenb = (s.opt_len + 3 + 7) >>> 3;
                                static_lenb = (s.static_len + 3 + 7) >>> 3;

                                // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                                //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                                //        s->last_lit));

                                if (static_lenb <= opt_lenb) {
                                    opt_lenb = static_lenb;
                                }

                            } else {
                                // Assert(buf != (char*)0, "lost buf");
                                opt_lenb = static_lenb = stored_len + 5;
                                /* force a stored block */
                            }

                            if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
                                /* 4: two words for the lengths */

                                /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                                 * Otherwise we can't have processed more than WSIZE input bytes since
                                 * the last block flush, because compression would have been
                                 * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                                 * transform a block into a stored block.
                                 */
                                _tr_stored_block(s, buf, stored_len, last);

                            } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

                                send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                                compress_block(s, static_ltree, static_dtree);

                            } else {
                                send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                                send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                                compress_block(s, s.dyn_ltree, s.dyn_dtree);
                            }
                            // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
                            /* The above check is made mod 2^32, for files larger than 512 MB
                             * and uLong implemented on 32 bits.
                             */
                            init_block(s);

                            if (last) {
                                bi_windup(s);
                            }
                            // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
                            //       s->compressed_len-7*last));
                        }

                    /* ===========================================================================
                     * Save the match info and tally the frequency counts. Return true if
                     * the current block must be flushed.
                     */
                    function _tr_tally(s, dist, lc)
                        //    deflate_state *s;
                        //    unsigned dist;  /* distance of matched string */
                        //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
                        {
                            //var out_length, in_length, dcode;

                            s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
                            s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

                            s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
                            s.last_lit++;

                            if (dist === 0) {
                                /* lc is the unmatched char */
                                s.dyn_ltree[lc * 2] /*.Freq*/ ++;
                            } else {
                                s.matches++;
                                /* Here, lc is the match length - MIN_MATCH */
                                dist--;
                                /* dist = match distance - 1 */
                                //Assert((ush)dist < (ush)MAX_DIST(s) &&
                                //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                                //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                                s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/ ++;
                                s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
                            }

                            // (!) This block is disabled in zlib defailts,
                            // don't enable it for binary compatibility

                            //#ifdef TRUNCATE_BLOCK
                            //  /* Try to guess if it is profitable to stop the current block here */
                            //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
                            //    /* Compute an upper bound for the compressed length */
                            //    out_length = s.last_lit*8;
                            //    in_length = s.strstart - s.block_start;
                            //
                            //    for (dcode = 0; dcode < D_CODES; dcode++) {
                            //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
                            //    }
                            //    out_length >>>= 3;
                            //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
                            //    //       s->last_lit, in_length, out_length,
                            //    //       100L - out_length*100L/in_length));
                            //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
                            //      return true;
                            //    }
                            //  }
                            //#endif

                            return (s.last_lit === s.lit_bufsize - 1);
                            /* We avoid equality with lit_bufsize because of wraparound at 64K
                             * on 16 bit machines and because stored blocks are restricted to
                             * 64K-1 bytes.
                             */
                        }

                    exports._tr_init = _tr_init;
                    exports._tr_stored_block = _tr_stored_block;
                    exports._tr_flush_block = _tr_flush_block;
                    exports._tr_tally = _tr_tally;
                    exports._tr_align = _tr_align;
                }, {
                    "../utils/common": 27
                }],
                39: [function(_dereq_, module, exports) {
                    'use strict';


                    function ZStream() {
                        /* next input byte */
                        this.input = null; // JS specific, because we have no pointers
                        this.next_in = 0;
                        /* number of bytes available at input */
                        this.avail_in = 0;
                        /* total number of input bytes read so far */
                        this.total_in = 0;
                        /* next output byte should be put there */
                        this.output = null; // JS specific, because we have no pointers
                        this.next_out = 0;
                        /* remaining free space at output */
                        this.avail_out = 0;
                        /* total number of bytes output so far */
                        this.total_out = 0;
                        /* last error message, NULL if no error */
                        this.msg = '' /*Z_NULL*/ ;
                        /* not visible by applications */
                        this.state = null;
                        /* best guess about the data type: binary or text */
                        this.data_type = 2 /*Z_UNKNOWN*/ ;
                        /* adler32 value of the uncompressed data */
                        this.adler = 0;
                    }

                    module.exports = ZStream;
                }, {}]
            }, {}, [9])
            (9)
    });


    /**
     * Created by xiyuan on 15-12-2.
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('eventManageInterface', ['type'], factory);

        } else if (typeof define === "function" && define.cmd) {

            define('eventManageInterface', [type], function(require) {
                return factory();
            });

        } else {
            window.eventManageInterface = factory(type);
        }

    })(function(type) {
        'use strict';
        var eventManage = function() {
            this.eventStroage = {};
        };

        //监听
        eventManage.prototype.$watch = function(eventName, callback) {
            if (typeof callback !== "function") {
                return false
            }
            var eventStroage = this.eventStroage[eventName];
            this.eventStroage[eventName] = eventStroage ? eventStroage.push(callback) && eventStroage : [callback];
        };

        //触发 @eventName : 事件名称  @target : 事件对象
        eventManage.prototype.$apply = function(eventName, target) {
            var eventStroage = this.eventStroage[eventName];
            if (type.isArray(eventStroage)) {
                var len = eventStroage.length,
                    i = ~0,
                    target = target || {},
                    eventObject = {
                        target: target
                    };
                //设置事件目标事件类型
                target.type = target.type || eventName;

                //执行事件监听
                while (++i < len) {
                    eventStroage[i].call(target, eventObject);
                }
            }
        };

        //销毁
        eventManage.prototype.$destroy = function(eventName, callback) {
            var eventStroage = this.eventStroage[eventName];
            if (type.isArray(eventStroage)) {
                typeof callback === 'function' ? function() {
                    //执行事件回调匹配
                    while (i++, i < len) {
                        if (eventStroage[i].toString() === callback.toString()) {
                            eventStroage.splice(i, 1);
                            return
                        }
                    }
                }() : delete this.eventStroage[eventName];
            }
        };

        return eventManage;

    });


    /**
     * Created by xiyuan on 16-8-17.
     */

    if (typeof define === "function" && define.amd) {

        define('log', function() {
            return $log;
        });

    } else if (typeof define === "function" && define.cmd) {
        define('log', [], function(require) {
            return $log;
        });

    } else {
        window.$log = $log;
    };


    /**
     * Created by xiyuan on 16-8-29.
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('touch', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('touch', [], function(require) {
                return factory();
            });

        } else {
            window.touch = factory();
        }
    })(function() {

        // gridBodyTouch.touchAction('pan-x');
        //触摸处理
        function touchHandle(container) {
            //绑定的元素
            this.bindElement = container;

            //事件容器
            this.eventStroage = {};

            this.START_X = 0;
            this.START_Y = 0;

            //移动方向 [ up right buttom left ]
            this.direction = null;

            //requestAnimationFrame状态标识
            isRaf = false;

            //触摸元素路径(兼容火狐)
            this.touchPath = [];

            //元素转换
            this.transform = {
                translate: {
                    x: this.START_X,
                    y: this.START_Y
                },
                scale: 1,
                angle: 0,
                rx: 0,
                ry: 0,
                rz: 0
            };

            this.cssProps = {
                /**
                 * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
                 * @type {String}
                 * @default 'none'
                 */
                userSelect: 'none',

                /**
                 * Disable the Windows Phone grippers when pressing an element.
                 * @type {String}
                 * @default 'none'
                 */
                touchSelect: 'none',

                /**
                 * Disables the default callout shown when you touch and hold a touch target.
                 * On iOS, when you touch and hold a touch target such as a link, Safari displays
                 * a callout containing information about the link. This property allows you to disable that callout.
                 * @type {String}
                 * @default 'none'
                 */
                touchCallout: 'none',

                /**
                 * Specifies whether zooming is enabled. Used by IE10>
                 * @type {String}
                 * @default 'none'
                 */
                contentZooming: 'none',

                /**
                 * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
                 * @type {String}
                 * @default 'none'
                 */
                userDrag: 'none',

                /**
                 * Overrides the highlight color shown when the user taps a link or a JavaScript
                 * clickable element in iOS. This property obeys the alpha value, if specified.
                 * @type {String}
                 * @default 'rgba(0,0,0,0)'
                 */
                tapHighlightColor: 'rgba(0,0,0,0)'
            };
            //事件处理初始化
            this.init();
        }

        //requestAnimationFrame
        touchHandle.prototype.reqAnimationFrame = function(handleFn) {
            return (window[this.prefixed('requestAnimationFrame')] || function(callback) {
                window.setTimeout(callback, 1000 / 60);
            })(handleFn);
        };

        //更新元素转换
        touchHandle.prototype.updateElementTransform = function(element) {
            var isRaf = false;

            if (!isRaf) {
                this.reqAnimationFrame(function() {
                    var transform = this.transform,
                        container = element || this.bindElement,
                        value = [
                            'translate3d(' + transform.translate.x + 'px, ' + transform.translate.y + 'px, 0)',
                            // 'scale(' + transform.scale + ', ' + transform.scale + ')',
                            'rotate3d(' + transform.rx + ',' + transform.ry + ',' + transform.rz + ',' + transform.angle + 'deg)'
                        ];

                    value = value.join(" ");
                    container.style.webkitTransform = value;
                    container.style.mozTransform = value;
                    container.style.transform = value;
                    isRaf = false;

                }.bind(this));

                isRaf = true;
            }

        };

        //动作处理
        touchHandle.prototype.handle = function(translate, element) {
            //合并
            Object.keys(translate).forEach(function(key) {
                this.transform.translate[key] = translate[key];
            }.bind(this));
            this.updateElementTransform(element);
        };

        //获取属性的前缀完整属性
        touchHandle.prototype.prefixed = function(scopeElement, property) {
            scopeElement = property ? scopeElement : (property = scopeElement, window)
            var prefix, prop,
                VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'],
                camelProp = property[0].toUpperCase() + property.slice(1);

            var i = 0;
            while (i < VENDOR_PREFIXES.length) {
                prefix = VENDOR_PREFIXES[i];
                prop = (prefix) ? prefix + camelProp : property;

                if (prop in scopeElement) {
                    return prop;
                }
                i++;
            }
            return undefined;
        };

        //事件数据提取
        touchHandle.prototype.eventData = function() {

            return {
                bindElement: this.bindElement,
                nowTime: this.nowTime,
                nowPageX: this.nowPageX,
                nowPageY: this.nowPageY,
                rangeX: this.rangeX,
                rangeY: this.rangeY,
                timeGap: this.timeGap,
                nowRangeX: this.nowRangeX,
                nowRangeY: this.nowRangeY,
                eventType: this.eventType,
                direction: this.direction,
                directionV: this.directionV,
                directionH: this.directionH
            }
        };

        //触摸初始化
        touchHandle.prototype.init = function() {
            var This = this;
            Object.keys(this.cssProps).forEach(function(name) {
                var prop = this.prefixed(this.bindElement.style, name);
                prop && (this.bindElement.style[prop] = this.cssProps[name]);
            }.bind(this));

            //触摸开始
            this.touchStartFn = function(eve) {

                //当前触摸点对象
                var touchObj = eve.changedTouches[0];

                //移动事件任务
                This.moveEventTasks = [];

                //当前X轴移动距离
                This.nowRangeX = 0;
                //当前Y轴移动距离
                This.nowRangeY = 0;

                //X轴移动距离
                This.rangeX = 0;
                //Y轴移动距离
                This.rangeY = 0;

                //写入path
                This.touchPath = eve.path || function getTouchPath(target, path) {
                    (path = path || []).push(target);
                    target.parentNode && getTouchPath(target.parentNode, path);
                    return path;
                }(eve.target);

                eve.path = This.touchPath;

                //起始时间
                This.startTime = This.nowTime = This.$nowTime = Date.now();
                //X轴起点位置
                This.startPageX = This.nowPageX = touchObj.pageX;
                //Y轴起点位置
                This.startPageY = This.nowPageY = touchObj.pageY;
                //当前事件类型
                This.eventType = 'touchstart';

                //绑定触摸移动
                window.document.addEventListener('touchmove', This.touchMoveFn, false);
                //绑定触摸结束
                window.document.addEventListener('touchend', This.touchEndFn, false);
                //触发绑定事件
                This.trigger('start', eve, this);
            };

            //触摸移动
            this.touchMoveFn = function(eve) {

                var nowTime = Date.now(),
                    //当前触摸点对象
                    touchObj = eve.changedTouches[0];

                //当前X轴移动距离
                This.nowRangeX = (touchObj.pageX - This.startPageX) - This.rangeX;
                //当前Y轴移动距离
                This.nowRangeY = (touchObj.pageY - This.startPageY) - This.rangeY;

                //触摸移动的距离
                This.rangeX = touchObj.pageX - This.startPageX;
                This.rangeY = touchObj.pageY - This.startPageY;

                //时间间隙
                This.timeGap = nowTime - This.nowTime;

                //当前时间
                This.nowTime = nowTime;

                //当前事件类型
                This.eventType = 'touchmove';

                //方向计算
                if (!This.direction) {
                    //垂直方向
                    This.directionV = This.rangeY > 0 ? 'up' : 'down';
                    //水平方向
                    This.directionH = This.rangeX > 0 ? 'right' : 'left';
                    //主体方向
                    This.direction = Math.abs(This.rangeY) > Math.abs(This.rangeX) ? This.directionV : This.directionH;

                }
                eve.path = This.touchPath;

                //触发绑定事件(判断上次和本次位置是否一致)
                This.trigger('move', eve, this);
            };

            //触摸结束
            this.touchEndFn = function(eve) {
                This.flagTime = Date.now();
                //解绑触摸移动
                window.document.removeEventListener('touchmove', This.touchMoveFn, false);
                //解绑触摸结束
                window.document.removeEventListener('touchend', This.touchEndFn, false);
                //当前事件类型
                This.eventType = 'touchend';

                eve.path = This.touchPath;

                //触发绑定事件
                This.trigger('end', eve, this);
                //方向复位
                This.direction = null;
            };

            //启动触摸事件
            this.open();
        };

        //事件触发
        touchHandle.prototype.trigger = function(eventName, eveObj, scope) {
            (this.eventStroage[eventName] || []).forEach(function(eventFn) {
                eventFn.call(scope || this, eveObj, this.eventData())
            }.bind(this))
        };

        //事件绑定
        touchHandle.prototype.on = function(eventNames, fn) {
            eventNames.trim().split(/\s+/g).forEach(function(eventName) {
                (this.eventStroage[eventName] = this.eventStroage[eventName] || []).push(fn)
            }.bind(this))

        };

        //取消事件绑定
        touchHandle.prototype.off = function(eventName, fn) {
            switch (arguments.length) {
                case 1:
                    delete this.eventStroage[eventName];
                    break;
                case 2:
                    (this.eventStroage[eventName] = this.eventStroage[eventName] || []).forEach(function(evenFn, index) {
                        //检查是否同一个函数,如果是则从事件容器中移除
                        fn == evenFn && this.eventStroage[eventName].splice(index, 1);
                    });
                    break;
            }
        };

        //启动触摸事件
        touchHandle.prototype.open = function() {
            //绑定触摸移动开始
            this.bindElement.addEventListener('touchstart', this.touchStartFn, false);
        };

        //关闭触摸事件
        touchHandle.prototype.close = function() {
            //解绑移动开始
            this.bindElement.removeEventListener('touchstart', this.touchStartFn, false);

        };

        //设置触摸动作
        touchHandle.prototype.touchAction = function(value) {
            this.bindElement.style[this.prefixed(this.bindElement.style, 'touchAction')] = value || 'auto';
        };

        return touchHandle;

    });


    /**
     * Created by xiyuan on 15-11-24.
     */
    (function(factory) {
        if (typeof define === "function" && define.amd) {

            define('commFn', factory);

        } else if (typeof define === "function" && define.cmd) {

            define('commFn', [], function(require) {
                return factory();
            });

        } else {
            window.commFn = factory();
        }

    })(function() {
        var commFn = {};

        //延时方法
        commFn.sleep = function(milliSeconds) {
            var startTime = new Date().getTime();
            while (new Date().getTime() < startTime + milliSeconds);
        }

        /*id生成器*/
        commFn.makeId = function() {
            return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/x/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };

        return commFn;
    });

    var $LIB = {};
    (function(exports, inner) {

        inner.$packages(
            'type',
            'string',
            'object',
            'url',
            'path',
            'json',
            'jsonp',
            'net',
            'date',
            'IC',
            'platform',
            'deviceDrive',

            'HTMLtoDOM',
            'element',
            'safety',
            'buffer',
            'zip',
            'log',
            'touch',
            'eventManageInterface',
            'commFn',
            function(type,
                string,
                object,
                url,
                path,
                json,
                jsonp,
                net,
                date,
                IC,
                platform,
                deviceDrive,

                HTMLtoDOM,
                element,
                safety,
                buffer,
                zip,
                log,
                touch,
                eventManageInterface,
                commFn) {
                exports.$type = type;
                exports.$string = string;
                exports.$object = object;
                exports.$url = url;
                exports.$path = path;
                exports.$json = json;
                exports.$jsonp = jsonp;
                exports.$net = net;
                exports.$date = date;
                exports.$IC = IC;
                exports.$platform = platform;
                exports.$deviceDrive = deviceDrive;

                exports.$element = element;
                exports.$HTMLtoDOM = HTMLtoDOM;
                exports.$safety = safety;
                exports.$buffer = buffer;
                exports.$zip = zip;
                exports.$log = log;
                exports.$touch = touch;
                exports.$eventManageInterface = eventManageInterface;
                exports.$commFn = commFn;


            }
        )
    })($LIB, this);

    var $type = $LIB.$type,
        $object = $LIB.$object,
        $url = $LIB.$url,
        $path = $LIB.$path,
        $json = $LIB.$json,
        $jsonp = $LIB.$jsonp,
        $net = $LIB.$net,
        $date = $LIB.$date,
        $IC = $LIB.$IC,
        $platform = $LIB.$platform,
        $deviceDrive = $LIB.$deviceDrive,

        $element = $LIB.$element,
        $HTMLtoDOM = $LIB.$HTMLtoDOM,
        $safety = $LIB.$safety,
        $buffer = $LIB.$buffer,
        $zip = $LIB.$zip,
        $eventManageInterface = $LIB.$eventManageInterface,
        $commFn = $LIB.$commFn;


    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

    // requestAnimationFrame polyfill by Erik Möller
    // fixes from Paul Irish and Tino Zijdel

    ;
    (function() {
        //事件兼容
        var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined,
            transitionEndEvent = window.transitionEndEvent = window.transitionEndEventName = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend',
            lastTime = 0,
            vendors = ['ms', 'moz', 'webkit', 'o'];

        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() {
                        callback(currTime + timeToCall);
                    },
                    timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    }());


    /**
     * Created by xiyuan on 15-11-30.
     */
    /**
     * Created by xiyuan on 16-10-20.
     */
    var $dbManage = {

    };

    function getType(data) {
        var type = {}.toString.call(data).match(/object\s+(\w*)/);
        return type ? type[1] : null;
    }


    /**
     * Created by xiyuan on 16-10-20.
     */

    /**
     * 数据库类
     * @param dbName
     * @param version
     * @param description
     * @param dbSize
     */
    function $DB(dbName, version, description, dbSize) {
        if (!dbName) {
            console.warn("未选择数据库名");
            return;
        }
        this.dbName = dbName;
        //创建数据库/打开数据库
        this.db = openDatabase(dbName, version || "1.0", description || dbName + " DB", dbSize || 5 * 1024 * 1024);
    }

    /**
     * 创建表
     * @param tableName
     * @param fieldMap
     */
    $DB.prototype.create = function(tableName, fieldMap) {

        if (!tableName || !fieldMap) {
            console.warn("参数数据错误");
            return
        }

        var sqlString = '',
            fieldInfo = [],
            fieldString = [];

        //检查字段数据类型
        switch (getType(fieldMap)) {
            case 'Object':
                Object.keys(fieldMap).forEach(function(key) {
                    fieldInfo.push({
                        field: key,
                        type: fieldMap[key]
                    })
                });
                break;
            case 'Array':
                fieldMap.forEach(function(key) {
                    fieldInfo.push({
                        field: key
                    });
                });
                break;
            case 'String':
                fieldMap.split(',').forEach(function(key) {
                    fieldInfo.push({
                        field: key
                    });
                });
                break;
            default:
                console.warn("表字段数据错误");
                return;

        }

        //字段遍历处理
        fieldInfo.forEach(function(info) {
            fieldString.push(info.field + (info.type ? ' ' + info.type : ''));
        });

        //创建表的SQL语句
        sqlString = 'CREATE TABLE IF NOT EXISTS ' + tableName + '(' + fieldString.join(',') + ')';

        //创建执行
        this.db.transaction(function(tx) {
            tx.executeSql(sqlString);
        }, function(tx, e) {
            console.warn("创建数据表出现错误: ", tx);
        });

        return this;
    };

    /**
     * 数据表选择
     * @param tableName
     * @returns {$dbTable}
     */
    $DB.prototype.table = function(tableName) {
        return new $dbTable(this.db, tableName, this);
    };

    /**
     * 删除数据表
     * @param tableName
     * @param onRes
     * @returns {$DB}
     */
    $DB.prototype.dropTable = function(tableName, onRes) {

        //删除表的SQL语句
        var sqlString = 'DROP TABLE IF EXISTS ' + tableName;

        //sql语句处理
        this.db.transaction(function(tx) {
            tx.executeSql(sqlString, [], function(t, dataRows) {
                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                typeof onRes === "function" && onRes(null, t, e)
            });
        }, function(tx, e) {
            console.warn("删除数据表出现错误: ", tx, e.message);
        });

        return this;
    };

    /**
     * 删除数据库
     * @param dbName
     * @param onRes
     */
    $DB.prototype.dropDb = function(dbName, onRes) {

        return this;
    };

    /**
     * 自定义SQL语句执行
     * @param sql
     * @param pre
     * @param onRes
     * @returns {$DB}
     */
    $DB.prototype.exec = function(sql, pre, onRes) {

        //检查参数
        if (arguments.length < 3) {
            switch (getType(pre)) {
                case 'Array':
                    onRes = function() {};
                    break;
                case 'Function':
                    onRes = pre;
                    pre = [];
                    break;
            }
        }

        //sql语句处理
        this.db.transaction(function(tx) {
            tx.executeSql(sql, pre, function(t, dataRows) {
                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                console.warn("自定义SQL语句出错!", tx, e.message);
                typeof onRes === "function" && onRes(null, t, e)
            });
        });

        return this;
    };


    /**
     * Created by xiyuan on 16-10-20.
     */

    /**
     * 连接拼接数据
     * @param stroage
     * @param data
     */
    function dataConcat(stroage, data) {
        switch (getType(data)) {
            case 'String':
                data.split(',').forEach(function(val) {
                    stroage.push(val);
                });
                break;
            case 'Array':
                data.forEach(function(val) {
                    stroage.push(val);
                });
                break;
            default:
        }
    }

    /**
     * where 条件处理
     * @param condition
     * @param preVal
     * @param relations
     * @returns {*}
     */
    function whereHandle(condition, preVal, relations) {
        //检查有多少个预运算值
        var preMatch = condition.match(/\?/g),
            isPre = false;

        //检查是否存在预运算
        if (preMatch) {
            switch (getType(preVal)) {
                case 'Array':
                    preVal = preVal;
                    break;
                default:
                    preVal = [preVal]

            }
            if (preMatch.length > preVal.length) {
                console.warn("where 语句的预运算值个数不对!");
                return null;
            }
            isPre = true;
            preVal = preVal.slice(0, preMatch.length);
        }

        relations = relations || String(preVal) || 'and';

        relations = relations.toLocaleLowerCase() === 'or' ? relations : 'and';

        return {
            isPre: isPre,
            preVal: preVal,
            relations: relations,
            condition: condition
        }
    }

    /**
     * 数据新增的处理方法
     * @param data
     * @param perHandle
     */
    function addHandle(data, perHandle, tableName) {
        if (getType(data) === 'Object') {
            var preVal = [],
                sqlString,
                fieldKey = [],
                fieldVal = [];

            //组装新增的数据
            Object.keys(data).forEach(function(fieldName) {
                fieldKey.push(fieldName);
                fieldVal.push(data[fieldName]);
            });

            //预运算符号
            fieldVal.forEach(function() {
                preVal.push('?');
            });
            preVal = preVal.join(',');

            //sql语句拼接
            sqlString = 'INSERT INTO ' + tableName + '(' + fieldKey.join(',') + ') VALUES (' + preVal + ')';

            perHandle.push({
                sql: sqlString,
                preVal: fieldVal
            })
        }
    }

    /**
     * 数据库表
     * @param DB 数据库
     * @param tableName 数据库名称
     */
    function $dbTable(DB, tableName, DBInstance) {
        //数据库
        this.$DB = DB;
        //数据库实例
        this.DBInstance = DBInstance;
        //数据库名称
        var dbName = this.dbName = DBInstance.dbName;
        //表名称
        this.$tableName = tableName;
        //数据初始化
        this.init();

        DB.transaction(function(tx) {
            tx.executeSql('select * from ' + tableName + ' limit 1', [], function() {}, function(t, e) {
                console.warn('数据库"' + dbName + '"中数据表"' + tableName + '"不存在! ');
            });
        });
    }

    /**
     * 初始化当前的查询数据
     */
    $dbTable.prototype.init = function() {
        //预备数据
        this.prep = {
            //重复标识
            distinct: '',
            //字段
            Field: [],
            //包含
            In: [],
            //条件
            Where: [],
            //与查询值
            WherePreValue: [],
            //排序
            Order: 'asc',
            //排序字段
            OrderField: [],
            //数据限制
            Limit: ''
        }
    };

    /**
     * 除去查询中的重复数据
     */
    $dbTable.prototype.distinct = function() {
        this.prep.distinct = ' DISTINCT ';
        return this;
    };

    /**
     * 需要的字段
     * @param field
     * @returns {$dbTable}
     */
    $dbTable.prototype.field = function(field) {
        dataConcat(this.prep.Field, field);
        return this;
    };

    /**
     * 操作条件
     * @param condition 条件
     * @param preVal 预运算值
     * @param relations 关系 [and | or ]
     * @returns {$dbTable}
     */
    $dbTable.prototype.where = function(condition, preVal, relations) {
        var whereSql,
            whereInfo,
            prep = this.prep;

        //检查是否多条where条件
        switch (getType(condition)) {
            case 'Array':
                whereSql = '(';
                var preVals = [],
                    wheres = [];
                condition.forEach(function(info) {
                    //条件处理
                    if (whereInfo = whereHandle.apply(this, info)) {

                        //检查是否第一个条件
                        whereSql += wheres.length ? whereInfo.relations + ' ' : ' ';

                        //检查是否存在预运算
                        whereInfo.isPre && (preVals = preVals.concat(whereInfo.preVal));

                        whereSql += whereInfo.condition;

                        wheres.push(whereSql);
                    }
                });

                whereSql += ')';

                //与查询数据存储
                preVals.length && (prep.WherePreValue = prep.WherePreValue.concat(preVals));

                //where语句存储
                prep.Where.push(whereSql);

                break;
            case 'String':
                //条件处理
                if (whereInfo = whereHandle.apply(this, arguments)) {

                    //检查是否第一个条件
                    whereSql = prep.Where.length ? whereInfo.relations + ' ' : ' ';

                    //检查是否存在预运算
                    whereInfo.isPre && (prep.WherePreValue = prep.WherePreValue.concat(whereInfo.preVal));

                    whereSql += whereInfo.condition;

                    prep.Where.push(whereSql);
                }

        }
        return this;
    };

    /**
     * 条数限制
     * @param start
     * @param end
     * @returns {$dbTable}
     */
    $dbTable.prototype.limit = function(start, end) {
        if (arguments.length > 0) {
            if (arguments.length === 1) {
                this.prep.Limit = start;
            } else {
                this.prep.Limit = start + ',' + end;
            }
        }
        return this;
    };

    /**
     * 正序或降序
     * @param order
     * @returns {$dbTable}
     */
    $dbTable.prototype.order = function(fieldName, order) {
        this.prep.OrderField = getType(fieldName) === 'Array' ? fieldName : fieldName.split(',');
        order.toLocaleLowerCase() === 'desc' && (this.prep.Order = 'desc');
        return this;
    };

    /**
     * 数据新增
     * @param data
     * @param onRes
     */
    $dbTable.prototype.add = function(data, onRes) {
        var tableName = this.$tableName,
            perHandle = [];
        switch (getType(data)) {
            case 'Object':
                addHandle(data, perHandle, tableName);
                break;
            case 'Array':
                data.forEach(function(val) {
                    addHandle(val, perHandle, tableName);
                });
                break;
        }

        //数据新增入表中(原生写法)
        this.$DB.transaction(function(t) {
            perHandle.forEach(function(handleInfo) {
                t.executeSql(handleInfo.sql, handleInfo.preVal);
            });
        }, function(t, e) {
            typeof onRes === 'function' && onRes(null, t, e);
            console.warn("数据新增出现错误: ", t, e);
        }, function(t) {
            typeof onRes === 'function' && onRes(true, t);
        });
        //数据初始化
        this.init();

        return this;
    };

    /**
     * 数据读取
     * @param onRes
     */
    $dbTable.prototype.read = function(onRes) {
        var fieldStr,
            whereStr,
            limitStr,
            orderStr,
            prep = this.prep,
            tableName = this.$tableName,
            WherePreValue = prep.WherePreValue;

        //获取字段字符
        fieldStr = prep.Field.length ? prep.Field.join(',') : '*';

        //获取条件字符
        whereStr = prep.Where.length ? 'where ' + prep.Where.join(' ') : '';

        //限制条数的字符
        limitStr = prep.Limit ? 'limit ' + prep.Limit : '';

        //数据排序
        orderStr = prep.OrderField.length ? 'order by ' + prep.OrderField.join(' ' + prep.Order + ',') + ' ' + prep.Order : '';

        //sql语句拼接
        var sqlString = 'SELECT ' + prep.distinct + fieldStr + ' FROM ' + tableName + ' ' + whereStr + ' ' + orderStr + ' ' + limitStr;

        //sql语句执行
        this.$DB.readTransaction(function(t) {
            t.executeSql(sqlString, WherePreValue, function(t, dataRows) {
                var rows = dataRows.rows,
                    i = ~0;
                dataRows = [];

                while (++i < rows.length) {
                    dataRows.push(rows.item(i))
                }

                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                typeof onRes === "function" && onRes(null, t, e)
            });
        });

        //数据初始化
        this.init();

        return this;
    };

    /**
     * 获取数据总条数
     * @param field
     * @param onRes
     */
    $dbTable.prototype.count = function(field, onRes) {

        var fieldStr,
            whereStr,
            limitStr,
            prep = this.prep,
            tableName = this.$tableName,
            WherePreValue = prep.WherePreValue,
            callback = typeof(onRes || field) === "function" ? onRes || field : function() {};

        //获取字段字符
        fieldStr = 'COUNT(' + (typeof field === 'string' ? field : '*') + ') as count';

        //获取条件字符
        whereStr = prep.Where.length ? ' where ' + prep.Where.join(' ') : '';

        //限制条数的字符
        limitStr = prep.Limit ? 'limit ' + prep.Limit : '';

        //sql语句拼接
        var sqlString = 'SELECT ' + fieldStr + ' FROM ' + tableName + ' ' + whereStr + limitStr;

        //sql语句执行
        this.$DB.readTransaction(function(t) {
            t.executeSql(sqlString, WherePreValue, function(t, dataRows) {
                callback(dataRows.rows[0] ? dataRows.rows[0].count : 0, t)
            }, function(t, e) {
                callback(null, t, e)
            });
        });

        //数据初始化
        this.init();

        return this;
    };

    /**
     * 数据更新
     * @param data
     * @param onRes
     */
    $dbTable.prototype.update = function(data, onRes) {

        //检查数据格式
        if (getType(data) !== 'Object') {
            console.warn("需要更新的数据格式错误!");
            return;
        }

        var sqlString,
            updatePre = [],
            updateStr = [],
            prep = this.prep,
            tableName = this.$tableName,
            WherePreValue = prep.WherePreValue,
            //获取条件字符
            whereStr = prep.Where.length ? ' where ' + prep.Where.join(' ') : '';

        //遍历需要更新的数据
        Object.keys(data).forEach(function(fieldName) {
            updatePre.push(data[fieldName]);
            updateStr.push(fieldName + '=? ');
        });

        //预运算数据对接
        WherePreValue = updatePre.concat(WherePreValue);

        //sql语句拼接
        sqlString = 'UPDATE ' + tableName + ' SET ' + updateStr.join(',') + ' ' + whereStr;

        //sql语句执行
        this.$DB.transaction(function(t) {
            t.executeSql(sqlString, WherePreValue, function(t, dataRows) {
                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                typeof onRes === "function" && onRes(null, t, e)
            });
        });

        //数据初始化
        this.init();

        return this;

    };

    /**
     * 数据删除
     * @param onRes
     */
    $dbTable.prototype.delete = function(onRes) {

        var sqlString,
            prep = this.prep,
            tableName = this.$tableName,
            WherePreValue = prep.WherePreValue,
            //获取条件字符
            whereStr = prep.Where.length ? ' where ' + prep.Where.join(' ') : '';

        //sql语句拼接
        sqlString = 'DELETE FROM ' + tableName + whereStr;

        //sql语句执行
        this.$DB.transaction(function(t) {
            t.executeSql(sqlString, WherePreValue, function(t, dataRows) {
                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                typeof onRes === "function" && onRes(null, t, e)
            });
        });

        //数据初始化
        this.init();

        return this;
    };

    /**
     * 自定义SQL语句执行
     * @param sql
     * @param pre
     * @param onRes
     * @returns {$DB}
     */
    $dbTable.prototype.exec = function() {
        this.DBInstance.exec.apply(this.DBInstance, arguments);
        return this;
    };

    /**
     * 清除数据表内容
     * @param onRes
     */
    $dbTable.prototype.clean = function(onRes) {
        var tableName = this.$tableName;
        //sql语句执行
        this.$DB.transaction(function(t) {
            t.executeSql('DELETE FROM ' + tableName, [], function(t, dataRows) {
                typeof onRes === "function" && onRes(dataRows, t)
            }, function(t, e) {
                typeof onRes === "function" && onRes(null, t, e)
            });
        });
    };


    /**
     * Created by xiyuan on 16-12-7.
     */

    window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;
    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction || {};
    var dbVersion = 1;

    //indexedDB ORM 任务处理器
    function noSqlProcessor(noSqlInstance) {
        var taskInfo = noSqlInstance.taskQueue.taskStroage[0];
        taskInfo && noSqlTaskExec(taskInfo, noSqlInstance, function() {
            noSqlInstance.taskQueue.shift();
            noSqlProcessor(noSqlInstance);
        });
    }

    //任务执行器
    function noSqlTaskExec(taskInfo, noSqlInstance, callback) {
        switch (taskInfo.type) {
            case 'open':
                taskInfo.action(callback);
                break;
            case 'create':
            case 'table':
                taskInfo.action(callback, noSqlInstance.requestDB, noSqlInstance.transactionType);
                break;
            case 'dropTable':
            case 'exec':
                taskInfo.action(noSqlInstance.requestDB);
                break;
            case 'where':
                taskInfo.action(callback, noSqlInstance.objectStore);
                break;
            case 'read':
                taskInfo.action(noSqlInstance.objectStore, noSqlInstance.result);
                break;
            case 'add':
            case 'update':
            case 'delete':
                taskInfo.action(noSqlInstance.objectStore);
                break;

        }
    }

    //任务队列类
    function noSqlTaskQueue(noSqlInstance) {
        this.taskStroage = [];
        this.noSqlInstance = noSqlInstance;
    }

    noSqlTaskQueue.prototype = {
        push: function(taskInfo) {
            if (this.taskStroage.length) {
                this.taskStroage.push(taskInfo)
            } else {
                this.taskStroage.push(taskInfo);
                noSqlProcessor(this.noSqlInstance);
            }
        },
        shift: function() {
            return this.taskStroage.shift();
        }
    };

    //打开indexedDB
    function noSql(dbName, version) {
        //任务队列
        this.taskQueue = new noSqlTaskQueue(this);
        this.dbName = dbName;
        this.requestDB = null;
        this.objectStore = null;
        this.init();
        this.taskQueue.push({
            type: 'open',
            action: function(callback) {
                var load = false;
                indexedDB.open(dbName, version || dbVersion).onupgradeneeded = function() {
                    load = true;
                    this.requestDB = event.target.result;
                    typeof callback === "function" && callback(this.requestDB);
                }.bind(this);

                indexedDB.open(dbName, version || dbVersion).onsuccess = function(event) {
                    if (load) return;
                    this.requestDB = event.target.result;
                    typeof callback === "function" && callback(this.requestDB);
                }.bind(this);

            }.bind(this)
        });
    }

    noSql.prototype.init = function() {
        this.result = null;
        this.transactionType = IDBTransaction.READ_WRITE || "readwrite";
    };


    //创建一个对象存储空间
    noSql.prototype.create = function(tableName, fieldMap) {

        this.taskQueue.push({
            type: 'create',
            action: function(callback, requestDB) {
                if (!tableName || !fieldMap) {
                    console.warn("参数数据错误");
                    return
                }

                if (!requestDB.objectStoreNames.contains(tableName)) {
                    var idKey,
                        keyPath,
                        indexInfo,
                        fieldInfo = [];

                    //检查字段数据类型
                    switch (getType(fieldMap)) {
                        case 'Object':
                            Object.keys(fieldMap).forEach(function(key) {
                                fieldInfo.push({
                                    field: key,
                                    type: (fieldMap[key] || '').toLowerCase()
                                });
                                key === 'id' && (idKey = key);
                                fieldMap[key].indexOf('key') !== -1 && (keyPath = key)
                            });
                            break;
                        case 'Array':
                            fieldMap.forEach(function(key) {
                                fieldInfo.push({
                                    field: key,
                                    type: ''
                                });
                                key === 'id' && (idKey = key);
                            });
                            break;
                        case 'String':
                            fieldMap.split(',').forEach(function(key) {
                                fieldInfo.push({
                                    field: key,
                                    type: ''
                                });
                                key === 'id' && (idKey = key);
                            });
                            break;
                        default:
                            console.warn("表字段数据错误");
                            return;

                    }

                    // 创建一个对象存储空间来存储相关数据信息。
                    // 我们将使用 keyPath 作为我们的 key path 因为它保证是唯一的。
                    var objectStore = requestDB.createObjectStore(tableName, {
                        keyPath: keyPath = keyPath || idKey || fieldInfo[0].field
                    });

                    //字段遍历创建索引
                    fieldInfo.forEach(function(info) {
                        if (indexInfo = info.type.indexOf('index') !== -1 ? (info.type.indexOf('unique') ? {
                                unique: true
                            } : {
                                unique: false
                            }) : null) {
                            objectStore.createIndex(info.field, info.field, indexInfo);
                        }
                    });

                    this.objectStore = objectStore;
                } else {
                    this.objectStore = requestDB.transaction([tableName], this.transactionType || IDBTransaction.READ_WRITE || "readwrite").objectStore(tableName);
                }

                typeof callback === "function" && callback();

            }.bind(this)
        });
        return this;
    };

    //数据表选择
    noSql.prototype.table = function(tableName) {

        this.taskQueue.push({
            type: 'table',
            action: function(callback, requestDB, actionType) {
                this.objectStore = requestDB.transaction([tableName], actionType || IDBTransaction.READ_WRITE || "readwrite").objectStore(tableName);
                typeof callback === "function" && callback();
            }.bind(this)
        });

        return this;
    };

    //数据表的删除
    noSql.prototype.dropTable = function(tableName) {
        this.taskQueue.push({
            type: 'dropTable',
            action: function(requestDB) {
                requestDB.deleteObjectStore(tableName);
            }
        });
    };

    //自定义执行
    noSql.prototype.exec = function(execFn) {
        this.taskQueue.push({
            type: 'exec',
            action: function(requestDB) {
                execFn(requestDB);
            }
        });
    };
    /**
     * Created by xiyuan on 16-12-8.
     */

    //数据新增
    noSql.prototype.add = function(data, onRes) {
        this.transactionType = IDBTransaction.READ_WRITE || "readwrite";

        this.taskQueue.push({
            type: 'add',
            action: function(objectStore) {
                switch (getType(data)) {
                    case 'Object':
                        objectStore.add(data);
                        break;
                    case 'Array':
                        data.forEach(function(val) {
                            objectStore.add(val);
                        });
                        break;
                }

                this.init();

            }.bind(this)
        });

    };

    //数据删除
    noSql.prototype.delete = function(onRes) {
        this.transactionType = IDBTransaction.READ_WRITE || "readwrite";

        this.taskQueue.push({
            type: 'delete',
            action: function(objectStore) {
                this.result && objectStore.delete(this.result[objectStore.keyPath]);
                this.init();
            }.bind(this)
        });
    };

    //数据修改
    noSql.prototype.update = function(newData, onRes) {
        this.transactionType = IDBTransaction.READ_WRITE || "readwrite";
        this.taskQueue.push({
            type: 'update',
            action: function(objectStore) {
                objectStore.put(newData)
                this.init();
            }.bind(this)
        });
    };

    //数据读取
    noSql.prototype.read = function(onRes) {
        this.transactionType = IDBTransaction.READ_ONLY || "readonly";
        this.taskQueue.push({
            type: 'read',
            action: function(objectStore, result) {
                typeof onRes === 'function' && onRes(result);
                this.init();
            }.bind(this)
        });
    };

    //查询条件
    noSql.prototype.where = function(fieldName, searchVal) {
        this.taskQueue.push({
            type: 'where',
            action: function(callback, objectStore) {
                switch ((objectStore.keyPath === fieldName && 'keyPath') || (objectStore.indexNames.contains(fieldName) && 'index')) {
                    case 'keyPath':
                        objectStore.get(searchVal).onsuccess = function(event) {
                            this.result = event.target.result;
                            typeof callback === "function" && callback()
                        }.bind(this);
                        break;
                    case 'index':
                        objectStore.index(fieldName).get(searchVal).onsuccess = function(event) {
                            this.result = event.target.result;
                            typeof callback === "function" && callback()
                        }.bind(this);
                        break;
                    default:
                }

            }.bind(this)
        });
        return this;
    };


    /**
     * Created by xiyuan on 16-5-18.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */

    var $listen = (function() {

        //监听器对象
        var listen = function() {
            this.data = {};
            this.handleFns = [];
            this.receiveFns = [];
        };

        //监听器初始化方法(主要初始化内部数据)
        listen.prototype.init = function(fn) {

            var $appConfigFn = function() {
                var arg = arguments;
                switch (arg.length) {
                    case 1:
                        if (typeof arg[0] === 'object') {
                            $object.extends($appConfigFn, arg[0]);
                        } else {
                            $log.warning('[主配置文件]配置设置参数有误!')
                        }
                        break;
                    case 2:
                        if (typeof arg[0] !== 'string') {
                            $log.warning('[主配置文件]配置设置参数有误!')
                        } else {
                            $appConfigFn[arg[0]] = arg[1];
                        }
                        break;
                }
            };

            fn($appConfigFn);

            var _$appConfigFn = {};
            for (var key in $appConfigFn) {
                _$appConfigFn[key] = $appConfigFn[key]
            }

            $object.extends(this.data, _$appConfigFn);
            return this;

        };

        //监听器触发
        listen.prototype.trigger = function() {
            var handleFns = this.handleFns,
                receiveFns = this.receiveFns,
                i = ~0,
                l = handleFns.length,
                $i, $l = receiveFns.length,
                resData,
                dataObject = this.data || {
                    data: this.data
                };
            //遍历执行数据处理
            while (++i < l) {
                //检查处理器反馈的数据
                if (resData = handleFns[i].apply(dataObject, arguments)) {
                    $i = ~0;
                    while (++$i < $l) {
                        //触法数据接收回调
                        receiveFns[$i].call(dataObject, resData);
                    }
                }
            }
            return this;
        };

        //监听器处理器
        listen.prototype.handle = function(fn) {
            this.handleFns.push(fn);
            return this;
        };

        //数据接收器
        listen.prototype.receive = function(fn) {
            this.receiveFns.push(fn);
            return this;
        };

        //对外提供数据接口
        return function() {
            return new listen();
        }

    })();


    function hasOwnPrototype(obj, name) {
        return !obj.hasOwnProperty(name) && (name in obj);
    }


    /**
     * Created by xiyuan on 15-12-3.
     */

    var $eventManage = this.$eventManage = new $eventManageInterface();
    (function(exports) {
        'use strict';

        /*监听配置初始化开始*/
        $eventManage.$watch('config:init', function() {
            //console.log(arguments,this,'config:init')
        });

        /*监听配置加载*/
        $eventManage.$watch('config:load', function(event) {

        });

        /*监听配置初始化完毕*/
        $eventManage.$watch('config:end', function(event) {
            //检查是否初次加载配置
            if (this.__$$ID$$__ === 1) {

            }
        });

        /*页面渲染事件*/
        $eventManage.$watch('page:render', function(event) {
            //代理框架外部页面渲染事件
            $FRAME.$event.$apply('page:render', this)
        });

    })(this);


    /**
     * Created by xiyuan on 16-1-19.
     */
    var $pathManage = {
        pathParse: pathParse,
        zipPathParse: zipPathParse
    };


    /**
     * Created by xiyuan on 16-1-19.
     */

    //路径解析
    function pathParse(url, type) {
        url = url.replace(/^\/*/, '');
        var index, afterUrl, slice, module, modulePath, afterPath, moduleUrl,
            isZip = false,
            zipAfterUrl,
            pathResource = [],
            zipRegexp = /@zip\{\s*([^\}\s]+)\s*\}/;
        if (modulePath = url.match(/\@(?!zip)/)) {
            modulePath = url.substr(0, modulePath.index);
        }

        //格式化路径
        if (url.match(zipRegexp)) {
            isZip = true;
            $pathManage.zipPathParse(url, pathResource);
            url = pathResource.pop().value;
        }

        //检查当前模式
        switch (type) {
            case 'controller':
            case 'view':
            case 'model':
                //检查是否应用模块引用
                if ((index = url.match('@')) && (index = index.index)) {
                    afterPath = afterUrl = url.slice(index + 1);
                    moduleUrl = url = url.substr(0, index);
                    //分离
                    afterUrl = afterUrl.replace(/([\w-]+):([\w-]+)/, function(str, $1, $2) {
                        //获取配置中的文件后缀配置
                        type = _systemConfig.fileSuffix[type];
                        slice = $2;
                        return $1 + (type ? '.' + type : '');
                    });

                    //添加到文件路径中
                    afterUrl && (module = {
                        type: 'url',
                        value: (type + '/' + afterUrl).replace(/[\/\\]+/g, '/')
                    });
                } else {
                    //分离
                    /*if((slice=url.match(/([\w-]+):([\w-]+)/)) && (url=slice[1],slice=slice[2])){
                        //获取配置中的文件后缀配置
                        type=_systemConfig.fileSuffix[type];
                        url=url+(type?'.'+type:'');

                        console.log(url)
                    }*/
                    afterUrl = true;
                }
                break;
        }

        if (!isZip) {
            var pathList = $configStroage.pathList,
                pMaps = pathList.maps,
                pPaths = pathList.paths,
                $i, $l, $v, $$i, $$l, $$v,
                zPath, targetPath;

            //第一步 path替换
            var pSort = pPaths.sort,
                pList = pPaths.list;

            $i = ~0;
            $l = pSort.length;

            pathLoop:
                while (++$i < $l) {
                    $v = pList[pSort[$i]];
                    $$i = ~0;
                    $$l = $v.length;
                    while (++$$i < $$l) {
                        $$v = $v[$$i];
                        //匹配path
                        if (url.match($$v.regexp)) {
                            //替换path
                            pathResource = $$v.source.concat([]);
                            targetPath = pathResource.pop();
                            if ($$v.innerZip) {
                                url = url.replace($$v.regexp, '');
                                pathResource = pathResource.concat([targetPath]);

                                //去掉空路径
                                url && pathResource.push({
                                    type: "url",
                                    value: url.replace($$v.regexp, '')
                                });

                            } else {
                                pathResource.push({
                                    type: "url",
                                    value: targetPath.value.replace(/\/+$/, '') + '/' + url.replace($$v.regexp, '').replace(/^\/+/, '')
                                });
                            }

                            break pathLoop;
                        }
                    }


                }

            //防止path没匹配到
            pathResource.length || pathResource.push({
                type: 'url',
                value: url
            });

            //第二步 zip替换与提取(目前不需要)

            //第三步 map映射替换

            pSort = pMaps.sort;
            pList = pMaps.list;
            $i = ~0;
            $l = pSort.length;

            if ((targetPath = pathResource[0]) && targetPath.type === 'url' && (zPath = targetPath.value)) {
                mapLoop: while (++$i < $l) {
                    $v = pList[pSort[$i]];
                    $$i = ~0;
                    $$l = $v.length;
                    while (++$$i < $$l) {
                        $$v = $v[$$i];

                        //匹配map
                        if (zPath.match($$v.regexp) && ((zPath = zPath.replace($$v.regexp, '')) === '' || zPath.match(/^\//))) {
                            pathResource.shift();
                            if (zPath !== '/' && zPath !== '') {
                                pathResource = $$v.source.concat([{
                                    type: "url",
                                    value: zPath
                                }], pathResource);
                            } else {
                                pathResource = $$v.source.concat(pathResource);
                            }

                            break mapLoop;

                        }

                    }
                }
            }

            //解析路径中

            //合并类型后缀
            if (!module && afterUrl) {
                url = pathResource.pop().value;
                //分离
                if ((slice = url.match(/([\s\S]+):([\w-]+)/)) && (url = slice[1], slice = slice[2])) {
                    //获取配置中的文件后缀配置
                    type = _systemConfig.fileSuffix[type];
                    url = url + (type ? '.' + type : '');
                }
                module = {
                    type: 'url',
                    value: url
                }
            }
        } else {
            pathResource.push({
                type: 'url',
                value: url
            });
        }
        module && pathResource.push(module);

        return {
            slice: slice,
            source: pathResource,
            afterPath: afterPath,
            modulePath: modulePath,
            moduleUrl: moduleUrl
        };
    };


    /**
     * Created by xiyuan on 16-3-11.
     */

    //zip路径解析 例如：http://test.com/html5_frame-v2/test/home/app/fsdjsonp/@zip{jsonp}/index'
    function zipPathParse(path, PathSource) {
        var pathSource = PathSource || [],
            res = path.match(/(?:^|\/)@zip\{([\w]+)\}\//);
        if (res) {
            var index = res.index,
                name = res[1],
                beforeUrl = path.slice(0, index + 1);
            if (index) {
                pathSource.push({
                    type: 'url',
                    value: beforeUrl
                })
            }
            pathSource.push({
                isFirst: true,
                type: 'zip',
                value: name
            });
            zipPathParse(path.slice(index + res[0].length), pathSource);
        } else {
            path && pathSource.push({
                type: 'url',
                value: path
            })
        }
        return pathSource;
    };



    var $sourceManage = {
        sourceGet: sourceGet,
        getViewSource: getViewSource,
        getLayoutSource: getLayoutSource,
        getModelSource: getModelSource,
        getControllerSource: getControllerSource
    };


    function sourcePathNormal(modelPath, __info__) {
        var afterPath = __info__.afterPath,
            modulePath = __info__.modulePath;



        if ((modelPath.indexOf('@') === 0 || !modelPath.match(/[\/\\]/)) && modulePath) {


            if (modelPath.indexOf(':') === 0) {
                modelPath = afterPath.replace(/:[^:]*$/, '') + modelPath;
            } else if (modelPath.indexOf('@') === -1) {
                modelPath = afterPath.replace(/[\\\/]*[^\/\\]+[\\\/]*$/, '') + '/' + modelPath;
            }

            if (modelPath.indexOf('@') <= 0) {
                modelPath = modulePath + '@' + modelPath.replace(/^[\\\/]+/, '').replace('@', '/');
            }
        }

        return modelPath;
    }





    /*资源获取*/
    function sourceGet(pathSource, option, callbackFn) {
        new findPathSource(pathSource, option, callbackFn);
    };

    /*资源存储容器*/
    var __sourceStorage__ = {};

    //存储当前请求的资源信息
    var sourceTask = {};

    /*路径资源查找*/
    function findPathSource() {
        this._init_.apply(this, arguments);
    };

    function nofindFile(This) {
        //执行资源回调
        This.callbackFn(undefined, This.sourceType);
    }

    findPathSource.prototype._init_ = function(pathSource, option, callbackFn) {
        var defaultSlice = 'index',
            callbackName = option.callbackName,
            fileSuffix = option.fileSuffix,
            pathSlice = option.slice || defaultSlice,
            parameter = option.parameter || {},
            sourceType = option.sourceType;

        this.findPath = '';
        this.nowPath = '';
        this.finalPath = '';
        this.zipFlag = false;
        this.end = false;
        this.nowZipSource = null;
        this.rootZipName = '';
        this.sourceName = option.sourceName || '自定义';
        this.pathSource = pathSource;
        this.callbackName = callbackName;
        this.fileSuffix = fileSuffix;
        this.pathSlice = pathSlice;
        this.parameter = parameter;
        this.sourceType = sourceType;
        this.tplSuffix = option.tplSuffix;
        this.getType = option.getType;
        this.callbackFn = callbackFn || function() {};

        //获取资源
        this.getSource();

    };

    //资源处理
    findPathSource.prototype.__handle__ = function() {
        var This = this,
            nowZipSource = this.nowZipSource,
            callbackName = this.callbackName,
            fileSuffix = this.fileSuffix,
            sourceType = this.sourceType,
            filePath = $path.normalize(this.findPath),
            sourcePath = filePath,
            tplSuffix = this.tplSuffix || '',
            getType = this.getType,
            fileSource,
            fileCode,
            _tmpCallback,
            $res = {},
            sourceTypeName;


        switch (sourceType) {
            case 'view':
                sourceTypeName = '视图模板';
                break;
            case 'controller':
                sourceTypeName = '控制器';
                break;
            case 'model':
                sourceTypeName = '数据模型';
                break;
            case 'custom':
                sourceTypeName = this.sourceName;
                break;
            case 'define':
                sourceTypeName = '工具包';
                break;
        }
        this.sourceName = sourceTypeName;

        //检测资源是zip否压缩包
        if (nowZipSource) {

            //用来收集Jsonp数据
            var many,
                viewTypeJsonp = true,
                jsonpStorage,
                jsonpHandle = function() {
                    //用来处理一个请求里有多个回调
                    if (jsonpStorage) {
                        !many && (jsonpStorage = [jsonpStorage], many = true)
                        jsonpStorage.push(arguments)
                    } else {
                        jsonpStorage = arguments;
                    }
                };

            //代码运行沙箱
            switch (sourceType) {
                case 'view':
                    sourcePath = sourcePath.replace(/\/+$/, '/' + $configStroage.defaultView);
                    if (getType !== 'jsonp') {
                        viewTypeJsonp = false;
                        sourcePath = sourcePath.replace(new RegExp('\\.' + tplSuffix + '$'), '') + '.' + tplSuffix;
                    }
                case 'custom':
                    if (getType !== 'jsonp' && viewTypeJsonp) {
                        viewTypeJsonp = false;
                    }
                case 'controller':
                case 'define':
                case 'model':
                    if (viewTypeJsonp) {
                        sourcePath = sourcePath.replace(new RegExp((fileSuffix ? ('\\.' + fileSuffix) : '') + '(\\.js)?$'), '') + (fileSuffix ? '.' + fileSuffix : '') + '.js';
                    }
                    fileSource = nowZipSource.file(sourcePath);
                    if (!fileSource) {
                        $log.warning('压缩包:' + $path.resolve(this.nowPath).replace(/\/$/, '') + ' 中缺失资源【' + sourcePath.replace(/^\/?\w+\//, '') + '】');
                        nofindFile(This);
                        return;
                    }
                    fileCode = fileSource.asText();

                    //针对view的ajax类型请求
                    if (!viewTypeJsonp) {
                        //执行资源回调
                        This.callbackFn(fileCode, sourceType);
                        break;
                    }

                    //jsonp代码沙箱执行
                    eval(
                        '_tmpCallback=' + callbackName +
                        ';var ' + callbackName + '=jsonpHandle;' +
                        fileCode + ';' +
                        callbackName + '=_tmpCallback'
                    );

                    //jsonp数据转换提取
                    (function(res) {
                        var i = ~0,
                            l = arguments.length,
                            v;
                        //检查是否有多个回调
                        if (many) {
                            if (sourceType !== 'view') {
                                while (++i < l) {
                                    v = arguments[i];
                                    //检查当前参数是否只有一个
                                    if (v.length === 1) {
                                        $res[i] = v;
                                    } else {
                                        $res[v[0]] = v;
                                    }
                                }
                            } else {
                                $res = arguments[0];
                            }

                        } else {
                            if (sourceType !== 'view') {
                                $res[arguments.length === 1 ? 0 : arguments[0]] = arguments;
                            } else {
                                $res = res;
                            }
                        }
                        //执行资源回调
                        This.callbackFn($res, sourceType);

                    }).apply(this, jsonpStorage);

            }
            This.realPath = $path.normalize(This.nowPath + sourcePath.replace(/^[^\/\\]*[\/\/]+/, ''));
        } else {

            var _filePath, tplText;

            //资源获取[通过ajax或jsonp方式获取资源]
            switch (sourceType) {
                case 'view':
                    filePath = filePath.replace(/\/+$/, '/' + $configStroage.defaultView);
                    if (getType !== 'jsonp') {
                        _filePath = filePath.replace(new RegExp('\\.' + tplSuffix + '?$'), '') + '.' + tplSuffix;
                        if (tplText = this.getCache(_filePath)) {
                            //执行资源回调
                            this.callbackFn(tplText, sourceType);
                        } else {
                            //通过ajax获取视图模板
                            $net.ajax({
                                type: 'GET',
                                url: _filePath,
                                dataType: 'html',
                                data: this.parameter,
                                success: function(tplText) {
                                    This.pushCache(_filePath, tplText);
                                    //执行资源回调
                                    This.callbackFn(tplText, sourceType);
                                },
                                error: function() {
                                    //执行查找资源失败回调
                                    nofindFile(This);
                                    $log.warning(sourceTypeName + '文件【' + _filePath + '】不存在!')
                                }
                            });
                        }

                        break;
                    }
                case 'custom':
                    if (getType !== 'jsonp') {
                        _filePath = tplSuffix ? filePath.replace(new RegExp('\\.' + tplSuffix + '?$'), '') + '.' + tplSuffix : filePath;
                        if (tplText = this.getCache(_filePath)) {
                            //执行资源回调
                            this.callbackFn(tplText, sourceType);
                        } else {
                            //通过ajax获取视图模板
                            $net.ajax({
                                type: 'GET',
                                url: _filePath,
                                dataType: 'html',
                                data: this.parameter,
                                success: function(tplText) {
                                    This.pushCache(_filePath, tplText);
                                    //执行资源回调
                                    This.callbackFn(tplText, sourceType);
                                },
                                error: function() {
                                    //执行查找资源失败回调
                                    nofindFile(This);
                                    $log.warning(sourceTypeName + '文件【' + _filePath + '】不存在!')
                                }
                            });
                        }

                        break;
                    }
                case 'controller':
                case 'define':
                case 'model':
                    _filePath = filePath.replace(/\/+$/, '').replace(new RegExp((fileSuffix ? ('\\.' + fileSuffix) : '') + '(\\.js)?$'), '') + (fileSuffix ? '.' + fileSuffix : '') + '.js';
                    if ($res = this.getCache(_filePath)) {
                        //执行资源回调
                        this.callbackFn($res, sourceType);
                    } else {
                        $res = {};
                        //记录请求资源任务(避免多次调用)
                        sourceTask[_filePath] = sourceTask[_filePath] || [];
                        sourceTask[_filePath].push(This);

                        //同时多次同样资源合成
                        if (sourceTask[_filePath].length > 1) break;

                        $jsonp({
                            url: _filePath,
                            type: 'js',
                            element: false,
                            //jsonpParameter:false,
                            jsonpCallback: callbackName,
                            success: function(res) {
                                var i = ~0,
                                    l = arguments.length,
                                    v;
                                //检查是否有多个回调
                                if (this.many) {
                                    if (sourceType !== 'view') {
                                        while (++i < l) {
                                            v = arguments[i];
                                            //检查当前参数是否只有一个
                                            if (v.length === 1) {
                                                //$res[i] = v;
                                                $res['index'] = v;
                                            } else {
                                                $res[v[0]] = v;
                                            }
                                        }
                                    } else {
                                        $res = arguments[0];
                                    }
                                } else {
                                    if (sourceType !== 'view') {
                                        $res[arguments.length === 1 ? 0 : arguments[0]] = arguments;
                                    } else {
                                        $res = res;
                                    }
                                }
                                This.pushCache(_filePath, $res);

                                //执行资源回调
                                if (v = sourceTask[_filePath]) {
                                    i = ~0;
                                    l = v.length;
                                    while (++i < l) {
                                        v[i].callbackFn($res, sourceType);
                                    }
                                    delete sourceTask[_filePath];
                                }

                            },
                            error: function() {
                                $log.warning(sourceTypeName + '文件【' + _filePath + '】不存在!');

                                var v, i, l;
                                //执行查找资源失败回调//执行资源回调
                                if (v = sourceTask[_filePath]) {
                                    i = ~0;
                                    l = v.length;
                                    while (++i < l) {
                                        nofindFile(v[i]);
                                    }
                                    delete sourceTask[_filePath];
                                }
                            }

                        });
                    }
            }
            This.realPath = _filePath;
        }
    };

    //缓存资源如zip和单独的文件等
    findPathSource.prototype.pushCache = function(pathKey, source) {
        __sourceStorage__[pathKey] = {
            source: source,
            count: 1
        };
    };

    //取出缓存资源
    findPathSource.prototype.getCache = function(pathKey) {
        var source = __sourceStorage__[pathKey];
        if (source) {
            source.count += 1;
            source = source.source;
        }
        return source;
    };

    //获取路径资源
    findPathSource.prototype.getSource = function(index) {
        index = index || 0;

        if (this.pathSource.length <= index) {
            this.end || this.__handle__();
            return;
        }
        var This = this,
            pathSource = this.pathSource,
            v = pathSource[index++],
            pathType = v.type,
            vPath = v.value,
            zipFlag = this.zipFlag,
            asynchronous = false,
            zipPath,
            nowZip = this.nowPath.replace(/[\\\/]*$/, ''),
            zipSource;

        //用作转换地址为绝对地址
        if (index === 1) {
            vPath = $path.resolve(vPath, $path.cwd);
        }

        this.findPath += (this.findPath ? '/' : '') + vPath;
        zipPath = pathType === 'zip' ? $path.normalize(this.findPath.replace(/(?:\.zip\/?$|\/*$)/i, '.zip')) : '';

        if (zipFlag) {
            switch (pathType) {
                case 'url':
                    if (this.pathSource.length <= index) {
                        vPath = $path.normalize(this.rootZipName + '/' + vPath);
                    } else {
                        this.nowPath += zipPath + '/';
                    }
                    break;
                case 'zip':
                    this.nowPath += zipPath + '/';
                    zipPath = $path.normalize(this.rootZipName + '/' + zipPath);
                    zipSource = this.nowZipSource.file(zipPath);

                    if (!zipSource) {
                        var zipName = zipPath.replace(/^\/?\w+\//, '');
                        $log.warning('压缩包:' + $path.resolve(nowZip).replace(new RegExp('\/' + zipName + '\/$'), '') +
                            ' 中未找到【' + zipPath + '】压缩包');
                        //执行查找资源失败回调
                        nofindFile(This);
                        return;
                    }
                    this.rootZipName = vPath;
                    This.nowZipSource = $zip(zipSource.asArrayBuffer());

                    break;
            }

        } else {
            switch (pathType) {
                case 'url':
                    this.nowPath += vPath + '/';
                    break;
                case 'zip':
                    asynchronous = true;

                    this.findPath = vPath;
                    this.zipFlag = true;
                    this.rootZipName = vPath;
                    this.nowPath = zipPath + '/';
                    if (zipSource = This.getCache(zipPath)) {
                        This.nowZipSource = zipSource;
                        This.getSource(index);
                    } else {
                        $zip.load(zipPath, function(state, source, c) {
                            if (!state) {
                                $log.warning('请求的 ' + zipPath + ' 压缩包不存在!');
                                //执行查找资源失败回调
                                nofindFile(This);
                                return;
                            }

                            This.nowZipSource = source;
                            This.pushCache(zipPath, source);
                            This.getSource(index);

                        });
                    }
                    break;
            }
        }

        //检查是否异步
        asynchronous || this.getSource(index);
    };


    /*
     *
     $zip.load('http://project.com/base.zip',function(state,source,c){
     var sourceData=source.file('controller/home.controller.js');
     console.log(sourceData.asText())
     })
     $zip.load('http://project.com/base.zip',function(state,source,c){
     var sourceData=source.file('test/ngx.zip');
     console.log($zip(sourceData.asArrayBuffer()))
     })

     $zip.load('http://project.com/base.zip',function(state,source,c){
     var sourceData=source.file('test/ngx.zip');
     console.log($zip(sourceData.asArrayBuffer()).file('ngx-fancyindex/header.html').asText())
     })
     */

    ;


    /**
     * Created by xiyuan on 16-5-17.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */

    function getViewSource(view, callbackFn, parameter, _tplSuffix) {
        parameter = parameter || {};

        var fileSuffixs = _systemConfig.fileSuffix,
            callbackNames = _systemConfig.callbackName,
            tplSuffix = _tplSuffix || $configStroage.tplSuffix,
            viewRequire = $configStroage.viewRequire,
            tplParameter;

        switch ($type.getType(view)) {
            case 'function':
                view = view(function(option) {
                    tplSuffix = option.tplSuffix || option.suffix || tplSuffix;
                    viewRequire = option.viewRequire || option.requireType || viewRequire;
                    tplParameter = option.parameter || option.tplParameter;
                }, parameter);
            case 'string':
                //view=view.replace(/@:([\w-]+)$/,'@$1');
                //路径解析

                var pathSourceInfo = $pathManage.pathParse(view, 'view'),
                    pathSource = pathSourceInfo.source,
                    pathSlice = pathSourceInfo.slice;

                //视图文件获取模式纠正文件路径
                if (viewRequire === 'ajax') {
                    var pathValue = pathSource[pathSource.length - 1].value;
                    if (pathSlice) {
                        pathValue = pathValue.replace('.' + _systemConfig.fileSuffix['view'], '');
                    }
                    pathSource[pathSource.length - 1].value = pathValue + '/' + (pathSlice || $configStroage.defaultView)
                }

                sourceGet(pathSource, {
                    callbackName: callbackNames.view,
                    fileSuffix: fileSuffixs.view,
                    slice: pathSlice || $configStroage.defaultView,
                    sourceType: 'view',
                    tplSuffix: tplSuffix.replace(/^\.+/, ''),
                    getType: viewRequire,
                    parameter: tplParameter && typeof tplParameter === 'object' ? tplParameter : {}
                }, function(source, sourceType) {
                    typeof callbackFn === 'function' && callbackFn.apply(this, arguments);
                });

                break;
        }


    };


    /**
     * Created by xiyuan on 16-5-17.
     */

    var _layoutSource = {};

    function getLayoutSource(url, requestType, callbackFn) {
        //页面布局资源获取
        $sourceManage.sourceGet($pathManage.zipPathParse(url), {
            callbackName: 'layout',
            sourceType: 'custom',
            getType: requestType,
            sourceName: '页面布局'
        }, function(res) {
            typeof callbackFn === 'function' && callbackFn(res);
        })
    };


    /**
     * Created by xiyuan on 16-5-18.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */
    function getControllerSource(controller, callbackFn, parameter) {
        parameter = parameter || {};
        switch ($type.getType(controller)) {
            case 'function':
                controller = controller(parameter);
            case 'string':
                controller = controller.replace(/@:([\w-]+)$/, '@$1');
                //路径解析并提取资源
                var pathSourceInfo = $pathManage.pathParse(controller, 'controller'),
                    pathSource = pathSourceInfo.source,
                    pathSlice = pathSourceInfo.slice,
                    afterPath = pathSourceInfo.afterPath,
                    modulePath = pathSourceInfo.modulePath,
                    fileSuffixs = _systemConfig.fileSuffix,
                    callbackNames = _systemConfig.callbackName;

                sourceGet(pathSource, {
                    callbackName: callbackNames.controller,
                    fileSuffix: fileSuffixs.controller,
                    slice: pathSlice,
                    sourceType: 'controller'
                }, function(source, sourceType) {
                    //添加 模块路径
                    this.afterPath = afterPath;
                    this.modulePath = modulePath;
                    typeof callbackFn === 'function' && callbackFn.apply(this, arguments);
                });

                break;
        }
    }


    ;


    /**
     * Created by xiyuan on 16-5-18.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */
    function getModelSource(model, callbackFn) {

        model = model.replace(/@:([\w-]+)$/, '@$1');
        //路径解析并提取资源
        var pathSourceInfo = $pathManage.pathParse(model, 'model'),
            pathSource = pathSourceInfo.source,
            pathSlice = pathSourceInfo.slice,
            afterPath = pathSourceInfo.afterPath,
            modulePath = pathSourceInfo.modulePath,
            fileSuffixs = _systemConfig.fileSuffix,
            callbackNames = _systemConfig.callbackName;

        sourceGet(pathSource, {
            callbackName: callbackNames.model,
            fileSuffix: fileSuffixs.model,
            slice: pathSlice,
            sourceType: 'model'
        }, function(source, sourceType) {
            //添加 模块路径
            this.modulePath = modulePath;
            this.afterPath = afterPath;
            typeof callbackFn === 'function' && callbackFn.apply(this, arguments);
        });
    }


    ;


    /**
     * Created by xiyuan on 15-12-2.
     */
    var $configManage = {
            __reload__: [],
            reload: function(fn) {
                $configManage.__reload__.push(fn);
            }
        },


        $configStroage = {

            systemConfig: {
                callbackName: {
                    model: 'model',
                    view: 'view',
                    controller: 'controller'
                },
                fileSuffix: {
                    view: 'view',
                    controller: 'controller',
                    model: 'model'
                }
            },

            routeModel: 'hash',

            routeSuffix: '',

            tplSuffix: 'html',

            viewRequire: 'ajax',

            defaultView: 'index',

            defaultController: 'index',

            defaultRoute: 'index',

            autoRoute: {},

            routeList: [],

            pathList: {
                src: {
                    paths: {},
                    maps: {}
                },
                paths: {
                    sort: [],
                    list: {

                    }
                },
                maps: {
                    sort: [],
                    list: {

                    }
                }
            },
            zipPath: {

            },

            customConfigs: {

            },

            loadConfig: [],

            customConfig: {},


            layoutRegister: {},


            pageToggleRegister: {
                defualt: {
                    layout: '',
                    animate: {
                        defualt: {
                            back: function(page) {
                                window.document.body.innerHTML = '';
                                window.document.body.appendChild(page);
                            },
                            make: function(page) {
                                window.document.body.innerHTML = '';
                                window.document.body.appendChild(page);
                            }
                        }
                    }
                }
            },


            selectPageToggle: 'defualt',


            pageToggle: {},


            $filter: {},


            interceptor: {},


            bootstrapFns: [],


            serverRegisterStroage: {},


            defaultDB: null,


            defaultDBName: null
        },
        _systemConfig = $configStroage.systemConfig;


    /**
     * Created by xiyuan on 15-12-3.
     */
    (function(exports) {
        'use strict';

        $configManage.configInit = function(callback) {
            //检查应用是否配置
            $configManage.configCheck(callback);
            $configManage.rewrite = true;

        };

    })(this);


    /**
     * Created by xiyuan on 15-12-2.
     */

    ~ function(exports) {
        'use strict';

        $configManage.configCheck = function(callback) {
            //检测应用是否配置
            if (!$configManage.rewrite) {

                var configUrl = document.querySelector('[app-config]').getAttribute('app-config');
                if (!configUrl) {
                    $log.warning('应用配置未设置，启用默认配置!');
                } else {
                    $jsonp({
                        url: configUrl,
                        jsonpCallback: 'config',
                        complete: function() {
                            var arg = arguments,
                                len = arg.length,
                                i = 0;

                            //检查是否成功
                            if (len) {

                                //返回的数据处理(检查是否有多个回调)
                                if (this.many) {


                                } else {
                                    //请求完毕后处理配置解析
                                    $configManage.configParse(arg[i], function(info) {
                                        typeof callback === "function" && callback();
                                    });
                                }
                            }

                        }
                    });

                }
            }

        };

    }(this);


    /**
     * Created by xiyuan on 15-12-2.
     */
    (function(exports) {
        'use strict';
        var $appConfigFn = function() {
            var arg = arguments;
            switch (arg.length) {
                case 1:
                    if (typeof arg[0] === 'object') {
                        $object.extends($appConfigFn, arg[0]);
                    } else {
                        $log.warning('[主配置文件]配置设置参数有误!')
                    }
                    break;
                case 2:
                    if (typeof arg[0] !== 'string') {
                        $log.warning('[主配置文件]配置设置参数有误!')
                    } else {
                        $appConfigFn[arg[0]] = arg[1];
                    }
                    break;
            }
        };


        $configManage.configParse = function(configFn, callback, parentInterface) {
            var isMasterInterface = parentInterface ? false : true;
            if (!parentInterface) {
                parentInterface = new configIniterface();
                var id = parentInterface.__$$ID$$__;
                configMap[id] = {
                    fileLength: 0,
                    object: parentInterface,
                    callback: typeof callback === 'function' ? callback : function() {}
                };
            }


            try {

                configFn(parentInterface, isMasterInterface ? $appConfigFn : $object.clone($appConfigFn));


                if (isMasterInterface) {
                    var _$appConfigFn = {};
                    for (var key in $appConfigFn) {
                        if (!$appConfigFn.hasOwnProperty(key)) continue;
                        _$appConfigFn[key] = $appConfigFn[key]
                    }
                    $appConfigFn = _$appConfigFn;
                }

            } catch (e) {
                $log.error('应用配置错误', e);
            }
        };


        var configMap = {},
            configId = 0;


        function getConfig(configUrl, parentInterface, jsonpCallback) {
            configUrl = $path.resolve(configUrl);
            $jsonp({
                url: configUrl,
                element: false,
                jsonpCallback: jsonpCallback || 'config',
                complete: function() {
                    var arg = arguments,
                        len = arg.length,
                        i = 0;

                    if (len) {

                        $configManage.configParse(arg[i], null, parentInterface);
                    } else {
                        $log.warning('【配置文件】 ' + this.option.url + ' 加载失败，请检查！');
                    }


                    $eventManage.$apply('config:load', this);


                    configCheckLoad(parentInterface);
                }
            });
        };


        function configCheckLoad(parentInterface) {
            var info = configMap[parentInterface.__$$ID$$__];

            if (--info.fileLength <= 0) {

                info.callback(parentInterface);

                $eventManage.$apply('config:end', info);
            }
        };


        function configIniterface() {

            this.__$$ID$$__ = ++configId;
        };


        configIniterface.prototype.systemConfig = function(config) {
            var systemConfig = $configStroage.systemConfig,
                _callbackName = systemConfig.callbackName,
                _fileSuffix = systemConfig.fileSuffix,
                callbackName,
                fileSuffix;

            if (typeof config === 'object') {

                if (typeof(callbackName = config.callbackName) === 'object') {
                    typeof callbackName.model === 'string' && (_callbackName.model = callbackName.model);
                    typeof callbackName.view === 'string' && (_callbackName.view = callbackName.view);
                    typeof callbackName.controller === 'string' && (_callbackName.controller = callbackName.controller);
                }

                if (typeof(fileSuffix = config.fileSuffix) === 'object') {
                    typeof fileSuffix.model === 'string' && (_fileSuffix.model = fileSuffix.model);
                    typeof fileSuffix.view === 'string' && (_fileSuffix.view = fileSuffix.view);
                    typeof fileSuffix.controller === 'string' && (_fileSuffix.controller = fileSuffix.controller);
                }

            }
        };


        configIniterface.prototype.module = function(config) {

        };


        configIniterface.prototype.path = function(config) {
            var paths = config.paths,
                map = config.maps,
                $value,
                pathSource,
                _regexp,
                zipRegexp = /@zip\{\s*([^\}\s]+)\s*\}/,
                key, stringSize,
                pathList = $configStroage.pathList,
                $MAPS = pathList.src.maps,
                $PATHS = pathList.src.paths,

                _maps = pathList.maps.list,
                _sort = pathList.maps.sort;


            function zipQuery(path, pathSource, isFirst) {
                var index, url = '',
                    name;
                if (_regexp = path.match(zipRegexp)) {
                    name = _regexp[1];
                    index = _regexp.index;

                    url = path.slice(0, index);


                    isFirst && (pathSource.zip = {
                        name: name,
                        path: url
                    }) && url && pathSource.source.push({
                        type: 'url',
                        value: url
                    });


                    pathSource.source.push({
                        type: 'zip',
                        isFirst: isFirst || false,
                        value: name
                    });


                    pathSource = zipQuery(path.slice(index + _regexp[0].length), pathSource);

                } else {
                    path && pathSource.source.push({
                        type: 'url',
                        value: path
                    });
                }

                return pathSource;
            };


            if (typeof map === 'object') {

                for (key in map) {
                    if (!map.hasOwnProperty(key)) continue;
                    $value = map[key];
                    stringSize = key.length;
                    $MAPS[key] = $value;

                    if (!_maps[stringSize]) {
                        _maps[stringSize] = [];
                        _sort.push(stringSize);
                    }
                    pathSource = zipQuery($value, {
                        zip: false,
                        source: []
                    }, true);
                    _maps[stringSize].push({
                        path: key,
                        value: $value,
                        innerZip: pathSource.zip,
                        regexp: new RegExp('^' + key),

                        source: pathSource.source
                    });

                }


                pathList.maps.sort = _sort = _sort.sort(function(a, b) {
                    return b - a;
                });
            }


            if (typeof paths === 'object') {

                _maps = pathList.paths.list;
                _sort = pathList.paths.sort;
                for (key in paths) {
                    if (!paths.hasOwnProperty(key)) continue;
                    $value = paths[key];
                    stringSize = key.length;
                    $PATHS[key] = $value;

                    if (!_maps[stringSize]) {
                        _maps[stringSize] = [];
                        _sort.push(stringSize);
                    }
                    pathSource = zipQuery($value, {
                        zip: false,
                        source: []
                    }, true);
                    _maps[stringSize].push({
                        path: key,
                        value: $value,
                        innerZip: pathSource.zip,
                        regexp: new RegExp('^' + key),

                        source: pathSource.source
                    });

                }


                pathList.paths.sort = _sort.sort(function(a, b) {
                    return b - a;
                });

            }

        };


        configIniterface.prototype.zipPath = function(config) {
            if (typeof config === 'object') {
                for (var key in config) {
                    if (!config.hasOwnProperty(key)) continue;
                    $configStroage.zipPath[key] = config[key];
                }
            } else {
                $log.warning('zipPath配置数据类型错误！');
            }
        };


        configIniterface.prototype.routeModel = function(config) {
            $configStroage.routeModel = config;
        };


        configIniterface.prototype.routeSuffix = function(config) {
            $configStroage.routeSuffix = config;
        };


        configIniterface.prototype.tplSuffix = function(config) {
            $configStroage.tplSuffix = config.replace(/^\.+/, '');
        };


        configIniterface.prototype.viewRequire = function(config) {
            $configStroage.viewRequire = config;
        };


        /**
         * Created by xiyuan on 15-12-7.
         */
        function routeParse() {

            var args = arguments,
                l = args.length,
                i = ~0,
                arg,

                //自身路由对象
                selfRoute = new routeParent(this),

                //路由器信息存储
                routeInfo = selfRoute.__info__,

                //子路由
                childrenRoute = routeInfo.childrenRoute = [],

                //拦截器
                interceptors = routeInfo.interceptors = [],

                //路由路径
                path = routeInfo.path = [],

                //路由指向配置（如指定视图、控制器或视图模板）
                routeConfig,

                //自身路由处理器
                selfRouteFn,

                //用作参数路由分析
                argi, argl, argv, argList,
                stringMatch, si, sl, sv, sp, sf, $sp, _$sp, $src,
                mi, ml, mv, mp, mps, fns,
                ns, rs, ra,
                __i, __l, __v, _i, _l, _v, $i, $l, $v,
                $count, _$count;

            //路径字典
            var pathMap = routeInfo.pathMap = {
                //常规路由
                normalRoute: [],

                //正则路由
                regexpRoute: [],

                //参数路由
                parameterRoute: []
            };

            //路由path类型(默认常规路由 a, 参数 b, 正则 c)
            routeInfo.__type__ = 'a';

            while (++i < l) {
                arg = args[i];
                switch ($type.getType(arg)) {
                    //路由器配置（视图、控制器）
                    case 'object':
                        routeConfig = routeInfo.routeConfig = arg;
                        break;
                        //内置路由器
                    case 'function':
                        selfRouteFn = arg;
                        break;
                        //路由器路径
                    case 'array':

                        //检查当前数组只能有两种数据【路径|路径参数】
                        argi = ~0, argl = arg.length, argList = null;
                        //初始化ns,rs（常规/正则 参数路由存储器）
                        ns = [], rs = [];

                        while (++argi < argl) {
                            argv = arg[argi];
                            switch ($type.getType(argv)) {
                                case 'string':
                                    ns.push(argv);
                                    break;
                                case 'regexp':
                                    rs.push(argv);
                                    break;
                                case 'object':
                                    //合并继承的参数回调处理
                                    argList = $object.extend(argList || {}, argv);
                                    break;
                            }
                        }

                        //判断当前路由是否是参数路由
                        if (argList) {
                            //分析出回调类型参数
                            fns = [];

                            Object.keys(argList).forEach(function($v) {
                                typeof $v === 'function' && fns.push({
                                    key: $i,
                                    fn: $v
                                });
                            });

                            var parameterMap = [];

                            //解析常规的参数路由
                            si = ~0, sl = ns.length;
                            while (++si < sl) {
                                //参数路径
                                $src = sp = $sp = ns[si];
                                //分解参数路由中的参数标识
                                if (stringMatch = sp.match(/\{[\w$-]+\}/g)) {
                                    //检查参数标识是否存在回调中
                                    mi = ~0, ml = stringMatch.length, sf = false, mps = [], ra = [];
                                    while (++mi < ml) {
                                        mv = stringMatch[mi];
                                        mp = mv.slice(1);
                                        mp = mp.slice(0, -1);
                                        if (sv = argList[mp]) {
                                            switch ($type.getType(sv)) {
                                                case 'regexp':
                                                    //重构正则路径
                                                    sv = sv.source;
                                                case 'string':
                                                    //重构正则路径
                                                    $sp = $sp.replace(mv, sv);
                                                    $src = $src.replace(mv, '(' + sv.replace(/([\(\)])/g, '\\$1') + ')');
                                                    //预备匹配路由时候提取具体参数
                                                    mps.push({
                                                        key: mp,
                                                        regexp: sv
                                                    });

                                                    break;
                                                case 'array':
                                                    if ($l = sv.length) {
                                                        $i = ~0, $v = [];
                                                        while (++$i < $l) {
                                                            $v.push({
                                                                regexp: sv[$i],
                                                                key: mp,
                                                                mv: mv
                                                            })
                                                        }
                                                        ra.push($v);
                                                    }
                                                    break;
                                                default:
                                                    $log.warning('【路由配置】参数路由的参数映射值类型非法，请修改为regexp、string、function这三种类型之一')
                                            }
                                            sf || (sf = true)
                                        }
                                    }

                                    //如果当前参数标识不存在回调中，重置为path中
                                    if (sf) {
                                        //检查是否有复合参数映射
                                        if (_l = ra.length) {
                                            _i = ~0, $count = [];
                                            while (++_i < _l) {
                                                _v = ra[_i];
                                                __i = ~0, __l = _v.length;
                                                //检查是否是第一次第一层循环
                                                if ($l = $count.length) {
                                                    //解析第二层数据
                                                    _$count = [].concat($count);
                                                    $count = [];
                                                    while (++__i < __l) {
                                                        __v = _v[__i];
                                                        $i = ~0;
                                                        while (++$i < $l) {
                                                            $v = _$count[$i];
                                                            $count.push($v.concat(__v));
                                                        }
                                                    }

                                                } else {
                                                    while (++__i < __l) {
                                                        __v = _v[__i];
                                                        $count.push([__v]);
                                                    }
                                                }
                                            }

                                            $i = ~0, $l = $count.length;
                                            while (++$i < $l) {
                                                $v = $count[$i], _i = ~0, _l = $v.length;
                                                _$count = [].concat(mps);
                                                _$sp = $sp;
                                                $src = $sp;
                                                while (++_i < _l) {
                                                    _v = $v[_i];
                                                    mv = _v.mv, mp = _v.key, _v = _v.regexp;
                                                    switch ($type.getType(_v)) {
                                                        case 'regexp':
                                                            //重构正则路径
                                                            _v = _v.source;
                                                        case 'string':
                                                            _$sp = _$sp.replace(mv, _v);
                                                            $src = $src.replace(mv, '(' + _v.replace(/([\(\)])/g, '\\$1') + ')');
                                                            //预备匹配路由时候提取具体参数
                                                            _$count.push({
                                                                key: mp,
                                                                regexp: _v
                                                            });
                                                            break;

                                                    }
                                                }

                                                //复合参数路由信息存储
                                                parameterMap.push({
                                                    regexps: _$count,
                                                    fns: fns,
                                                    path: _$sp,
                                                    src: $src
                                                })

                                            }


                                        } else {
                                            //单个参数路由信息存储
                                            parameterMap.push({
                                                regexps: mps,
                                                fns: fns,
                                                path: $sp,
                                                src: $src
                                            })
                                        }

                                    } else {
                                        //非参数路由存储
                                        path.push(sp);
                                    }

                                } else {
                                    //添加进正常字符串路由
                                    path.push(sp);
                                }
                            }


                            //解析正则的参数路由
                            if (fns.length) {
                                si = ~0, sl = rs.length;
                                while (++si < sl) {
                                    //单个参数路由信息存储
                                    parameterMap.push({
                                        regexps: [],
                                        fns: fns,
                                        path: rs[si].source
                                    })
                                }
                            } else {
                                //在正则状态路由中没有回调方法
                                routeInfo.path = path.concat(rs);
                            }

                            //数据插入参数路由
                            pathMap.parameterRoute = pathMap.parameterRoute.concat(parameterMap);
                            routeInfo.path = routeInfo.path.concat(parameterMap);

                        } else {
                            //非参数路由
                            routeInfo.path = path.concat(arg);
                        }

                        break;
                        //路由器路径
                    case 'string':
                    case 'regexp':
                        path.push(arg);
                        break;

                }
            }

            //路由类型分类
            routeTypeSwitch(this, selfRoute);

            //执行路由处理器（子路由回调）
            selfRouteFn && selfRouteFn(selfRoute);

            return this;
        };

        //路由类型分析并分类
        function routeTypeSwitch(routeRoot, selfRoute) {
            var routeInfo = selfRoute.__info__,
                paths = routeInfo.path,
                pl = paths.length,
                i = ~0,
                path,
                _type,
                type = routeInfo.__type__,
                //路径字典
                pathMap = routeInfo.pathMap;

            //检测路由path类型(默认常规路由 a, 参数 b, 正则 c)
            while (++i < pl) {
                path = paths[i];
                switch ($type.getType(path)) {
                    case 'string':
                        _type = 'a';
                        pathMap.normalRoute.push(path);
                        break;
                    case 'regexp':
                        pathMap.regexpRoute.push(path);
                        _type = 'c';
                        break;
                    default:
                        continue;
                }

                //类型修正
                type = type.replace(_type, '') + _type;
            }

            //路由类型
            routeInfo.__type__ = type;

            //检查当前路由是否是顶级路由
            if (routeRoot.__routeRoot__) {
                //往上级路由添加子路由
                routeRoot.__info__.childrenRoute.push(selfRoute);
                return;
            }

            //添加路由到顶级\根 配置中
            $configStroage.routeList.push(selfRoute);

        };

        //路由对象实例接口
        function routeParent(routeRoot) {
            //传递上级路由
            this.__routeRoot__ = routeRoot;
            //路由信息
            this.__info__ = {};

        };

        //路由规则配置
        routeParent.prototype.when = routeParse;

        //当找不到路由,重定向
        routeParent.prototype.other = function() {
            return this;
        };

        //自动路由
        routeParent.prototype.autoRoute = function(option) {
            this.__info__.autoRoute = option;
            return this;
        };

        //路由拦截器
        routeParent.prototype.interceptor = function() {
            return this;
        };

        //路由路径后缀
        routeParent.prototype.suffix = function(suffix) {
            typeof suffix === 'string' && (this.__info__.suffix = suffix);
            return this;
        };

        /*应用路由配置处理器*/
        configIniterface.prototype.route = routeParse;

        /**
         * 默认路由路径
         * @param routePath
         */
        configIniterface.prototype.defaultRoute = function(routePath) {
            $configStroage.defaultRoute = routePath;
        };


        configIniterface.prototype.autoRoute = function(config) {

        };


        configIniterface.prototype.on = function(eventName, callback) {
            $eventManage.$watch(eventName, callback);
        };


        configIniterface.prototype.log = function(config) {

        };


        configIniterface.prototype.alias = function(config) {

        };


        configIniterface.prototype.interceptor = function(config) {
            if (typeof config === "object" && config !== null) {
                Object.keys(config).forEach(function(key) {
                    ($configStroage.interceptor[key] = $configStroage.interceptor[key] || []).push(config[key])
                })
            }
        };


        configIniterface.prototype.extendConfig = function(config) {
            var id = this.__$$ID$$__,
                info = configMap[id];
            switch ($type.getType(config)) {
                case 'array':
                    var len = config.length,
                        i = ~0;
                    while (++i < len) {
                        info.fileLength++;
                        getConfig(config[i], this);
                    }
                    break;
                case 'object':
                    for (var key in config) {
                        if (!config.hasOwnProperty(key)) continue;
                        info.fileLength++;
                        getConfig(config[key], this, key);
                    }
                    break;

            }
        };


        configIniterface.prototype.loadConfig = function(mode, mode2, mode3) {
            var arg = arguments,
                l = arg.length,
                i = ~0,
                v;
            while (++i < l) {
                if (typeof(v = arg[i]) === 'string') {
                    $configStroage.loadConfig.push(v);
                }
            }
        };


        configIniterface.prototype.customConfig = function(mode, value) {
            if (typeof mode !== 'string') {
                $log.warning('[自定义配置]customConfig第一个模式参数错误,应为字符类型');
                return;
            }
            $configStroage.customConfigs[mode] = value;
        };


        $configManage.reloadCoustomConfig = function() {
            $configStroage.customConfig = {};
            var d = $configStroage.loadConfig,
                ds = $configStroage.customConfigs,
                i = ~0,
                l = d.length;

            $packages('object', function(obj) {
                while (++i < l) {
                    obj.extends($configStroage.customConfig, obj.clone(ds[d[i]]));
                }
            });
        };


        $configManage.getSystemConfig = function() {

        };


        $configManage.getConfig = function(key, mode) {
            if (!key) return $configStroage.customConfig;
            var res;
            $packages('object', function(obj) {
                res = obj.clone(obj.parseStringData(key, mode ? $configStroage.customConfigs[mode] || {} : $configStroage.customConfig));
            });
            return res;
        };


        $configManage.setConfig = function(key, value, mode) {
            var res;
            $packages('object', function(obj) {
                res = obj.clone(obj.setStringData(key, mode ? $configStroage.customConfigs[mode] || ($configStroage.customConfigs[mode] = {}) : $configStroage.customConfig, value));
            });
            return res;
        };


        function requestSource(name, url, requestType, mode) {
            $sourceManage.getLayoutSource(url, requestType, function(layoutSource) {
                $configStroage[mode][name] = layoutSource;
            });
        };


        configIniterface.prototype.layoutRegister = function() {
            var arg = arguments,
                arg1 = arg[0],
                arg2 = arg[1],
                arg3 = arg[2],
                i = ~0,
                l = arg.length;

            switch (typeof arg1) {

                case 'string':
                    if (typeof arg2 === 'string') {
                        requestSource(arg1, arg2, arg3 === 'jsonp' ? arg3 : 'ajax', 'layoutRegister');
                    } else {
                        $log.warning('[配置文件]注册页面"' + arg[0] + '"布局配置第二个参数应为字符类型!');
                        return;
                    }
                    break;


                case 'object':
                    for (i in arg1) {
                        if (!arg1.hasOwnProperty(i)) continue;
                        requestSource(i, arg1[i], arg2 === 'jsonp' ? arg2 : 'ajax', 'layoutRegister');
                    }

            }
        };


        configIniterface.prototype.pageToggleRegister = function() {

            var ptrName,
                ptrValue,
                arg = arguments,
                arg1 = arg[0],
                arg2 = arg[1],
                errFlag = false;

            switch (typeof arg1) {

                case 'string':
                    ptrName = arg1;
                    ptrValue = arg2;
                    break;

                case 'object':
                    ptrValue = arg1;
                    ptrName = arg1.name;
            }


            if (typeof ptrName !== 'string') {
                errFlag = true;
                $log.warning('[配置文件]页面切换注册配置 注册名参数异常!');
            }

            if (typeof ptrValue !== 'object') {
                errFlag = true;
                $log.warning('[配置文件]页面切换注册配置 注册配置参数异常!');
            } else {
                if (typeof ptrValue.layout !== 'string') {
                    errFlag = true;
                    $log.warning('[配置文件]页面切换注册配置 注册配置layout参数异常!');
                }
                if (typeof ptrValue.animate !== 'object') {
                    errFlag = true;
                    $log.warning('[配置文件]页面切换注册配置 注册配置animate参数异常!');
                }
            }

            if (errFlag) {
                return;
            }

            return $configStroage.pageToggleRegister[ptrName] = ptrValue;
        };


        configIniterface.prototype.pageToggle = function() {

            var arg = arguments,
                arg1 = arg[0];

            if (arg.length > 1) {
                if (!this.pageToggleRegister.apply(this, arg)) return;
            }

            if (typeof arg1 === 'object') {
                arg1.name = arg1.name ? arg1.name : 'default';
                if (!this.pageToggleRegister.apply(this, arg)) return;
                $configStroage.selectPageToggle = arg1.name;
            }

            if (typeof arg1 === 'string') {
                $configStroage.selectPageToggle = arg1;
            }
        };


        configIniterface.prototype.bootstrap = function(fn) {
            if (typeof fn !== "function") {
                $log.warning('[配置文件]应用引导 参数应为function类型!');
                return;
            }
            $configStroage.bootstrapFns.push(fn);
        };


        configIniterface.prototype.directiveRegister = function(name, conf) {
            $directiveManage.register(name, conf);
        };


        configIniterface.prototype.componentRegister = function(name, conf) {
            $directiveManage.register(name, conf, true);
        };


        configIniterface.prototype.filterRegister = function(name, filterFn) {
            typeof filterFn === 'function' && ($configStroage.$filter[name] = filterFn);
        };


        configIniterface.prototype.serverRegister = function(serverName, serverHandle) {
            $configStroage.serverRegisterStroage[serverName] = serverHandle;
        };


        configIniterface.prototype.DB = function(dbName, handle) {
            return handle(function(tableName, struct) {
                return new $DB(dbName).create(tableName, struct);
            });
        };


        configIniterface.prototype.defaultDB = function(dbName) {
            $configStroage.defaultDBName = dbName;
            $configStroage.defaultDB = new $DB(dbName);
        };


        configIniterface.prototype.noSql = function(dbName, handle) {
            return handle(function(tableName, struct) {
                return new noSql(dbName).create(tableName, struct);
            });
        };


        configIniterface.prototype.defaultNoSql = function(dbName) {
            $configStroage.defaultNoSqlName = dbName;
            $configStroage.defaultNoSql = new noSql(dbName);
        };


    })(this);


    /**
     * Created by xiyuan on 15-12-4.
     */
    var $routeManage = {};


    /**
     * Created by xiyuan on 15-12-4.
     */
    $rootElement = $element(window.document);

    //根路径
    $routeManage.rootPath = $path.cwd;

    //根文件
    $routeManage.rootFile = $path.file(window.location.href);

    //根文件名
    $routeManage.rootFileName = $path.fileName(window.location.href);

    //项目根路径
    $routeManage.rootProjectPath = $path.cwd + ($routeManage.rootFile ? $routeManage.rootFile + '/' : '');

    //根路径与项目路径间隔
    $routeManage.rootIntervalPath = $routeManage.rootProjectPath.replace($routeManage.rootPath, '');

    //路由HASH监听开关
    $routeManage.hashListener = true;

    //路由记录
    $routeManage.history = {
        prev: {
            url: ''
        },
        now: {
            url: ''
        },
        isBack: null
    };

    var prevInfo = $routeManage.history.prev;
    var nowInfo = $routeManage.history.now;

    /*路径处理*/
    function getPathNormalize(type) {
        var href;
        switch (type) {
            case 'html5':
                href = decodeURI(window.location.href.replace($routeManage.rootPath, ''));
                break;
            case 'hash':
                href = decodeURI(window.location.hash.replace(/\#\!\/*/, ''));
                break;
        }
        return href;
    };

    /*路由监视 （需要在配置加载完毕后执行）*/
    $routeManage.routeWatch = function() {

        //检查当前路由模式
        switch ($configStroage.routeModel) {
            case '/':
            case '//':
            case '\\':
            case 'html5':
                $configStroage.html5Mode = {};
                /*监听当窗口历史记录改变。（html5模式的地址）*/
                window.addEventListener('popstate', function(event) {
                    //此处做了兼容,避免项目路径与根路径不一样
                    $routeManage.assign(getPathNormalize($configStroage.routeModel).replace($routeManage.rootIntervalPath, ''));
                }, false);
                break;
            default:
                $configStroage.routeModel = 'hash';
                /*监听当前文档hash改变。（当前hash模式的地址）*/
                window.addEventListener('hashchange', function(e) {
                    //检查是否是点击跳转页面的
                    if ($routeManage.hashListener) {
                        $routeManage.assign(getPathNormalize($configStroage.routeModel));
                    } else {
                        $routeManage.hashListener = true;
                    }
                }, false);

        }
    };

    /**
     * 返回上一页
     */
    $routeManage.back = function() {
        $routeManage.history.isBack = true;
        window.history.back();
    };

    /**
     * 页面刷新
     */
    $routeManage.refresh = function(url) {
        url = url || getPathNormalize($configStroage.routeModel);
        //检查当前路由模式
        switch ($configStroage.routeModel) {
            case '/':
            case '//':
            case '\\':
            case 'html5':
                url = getPathNormalize($configStroage.routeModel).replace($routeManage.rootIntervalPath, '')
                break;
        }
        $routeManage.redirect(url, {}, true, true);
    };

    /**
     * 页面重定向
     * @param pagePath
     * @param arg
     */
    $routeManage.redirect = function(pagePath, arg, isBack, refresh) {
        pagePath = pagePath.replace(/^\//, '');
        var routeInfo,
            argIndex = 0,
            postArg,
            argValue,
            argLen = arguments.length;

        while (++argIndex < argLen && argIndex < 3) {
            argValue = arguments[argIndex];
            switch (typeof argValue) {
                case 'object':
                    postArg = argValue;
                    break;
                default:
                    isBack = !!argValue;
                    break;
            }
        }

        $routeManage.history.isBack = isBack;

        //路由DNS获取匹配到的路由信息
        $routeManage.assign(pagePath, function(routeInfo) {

            //并检查是否和上一次路径重复
            if (!routeInfo && !refresh) return;

            pagePath = routeInfo.path;

            //检查当前模式
            if (!$configStroage.html5Mode) {
                //通知hash监听器当前跳转不需要做处理
                $routeManage.hashListener = false;
                $url.hash('!/' + pagePath);

            } else {
                var pageUrl = $path.resolve(pagePath, $routeManage.rootProjectPath);
                //添加新的历史记录
                window.history.pushState({
                    "target": pagePath
                }, null, pageUrl);
            }

        }, refresh)

    };

    /*监听点击事件（主要用来监控当前点击的节点是否a标签 页面跳转）*/
    window.document.addEventListener('click', function(event) {
        var element = $element(event.target),
            nowInfoUrl = nowInfo.url,
            routeInfo;

        //检查当前点击是否在a标签范围内(主要作用获取a元素)
        while (element.nodeName() !== 'a') {
            if (element[0] === $rootElement[0] || !(element = $element(element.parent())) || !element[0]) return;
        }

        if (element.attr('target')) return

        //检查是否空href,并且包含isBack 则返回上一页
        if (!element.attr('href')) {
            element.attr('isBack') !== null && window.history.back();
            $routeManage.history.isBack = true;
            return
        }

        //检查是否需要进行重定向
        if (element.attr('rewrite')) return;

        //检查属性标识是否回退
        $routeManage.history.isBack = element.attr('isBack') === null ? false : true;

        //阻止默认的a标签跳转事件
        event.preventDefault();

        //获取跳转的地址
        var href = decodeURI($path.normalize(element.attr('href')).replace(/^\.?[\/\\]/, '')) /*.replace($configStroage.routeSuffix,'')*/ ;

        //页面重定向
        $routeManage.redirect(href, $routeManage.history.isBack);

    }, false);


    /**
     * Created by xiyuan on 15-12-7.
     */
    /*路由解析*/
    $routeManage.routeParse = function() {

    };


    /**
     * Created by xiyuan on 15-12-4.
     */
    /**
     * 路由拦截器
     * @param routeResult
     * @param requestUrlInfo
     * @returns {boolean}
     */
    function routeInterceptor(routeResult, requestUrlInfo) {
        //路由拦截器检查
        var interceptor = routeResult.routeConfig;
        if (interceptor && typeof(interceptor = interceptor.interceptor) === 'function') {
            if (interceptor(requestUrlInfo) !== false) {
                return true;
            }
        } else {
            return true;
        }
        return false
    }


    /*路由查询*/
    $routeManage.routeDns = function(nowInfo) {

        var requestUrlInfo = $object.clone(nowInfo),
            autoRoutesLength,
            autoRoutes = [], //自动路由存储
            routeData = routeHandle($configStroage.routeList, nowInfo, autoRoutes, requestUrlInfo); //查找对应的路由

        //初始路由参数
        nowInfo.parameter = requestUrlInfo.parameter = nowInfo.parameter || {};

        //检查路由配置是否能匹配
        if (!routeData && (autoRoutesLength = autoRoutes.length)) {
            var i = ~0,
                v, _routes = {},
                size, type, _sortArray = [];
            while (++i < autoRoutesLength) {
                v = autoRoutes[i];
                type = v.type;
                size = v.info.lowerUrl.length;
                _routes[size] = _routes[size] || {};
                _routes[size][type] = _routes[size][type] || v;
                _sortArray.push(size);
            }
            //找出匹路径最多的自动路由
            _routes = _routes[_sortArray.sort(function(a, b) {
                return a - b;
            })[0]];

            //找出适合的路由
            routeData = _routes.a || _routes.b || _routes.c;
        }

        //写入当前路由地址
        routeData && (routeData.path = nowInfo.path);

        return routeData;
    };

    //去掉路径前根符号正则
    var pathRootRegexp = /^[\/\\]*/;

    //用来递归处理常规路由和正则路由
    function routeHandle(routeList, nowInfo, autoRoutes, requestUrlInfo) {
        var routeDnsResult = queryRoute(routeList, nowInfo, null, autoRoutes, requestUrlInfo),
            routeResult = routeDnsResult.routeResult,
            i = ~0,
            l, routeMap, slice;

        //检查常规路由是否匹配到路径
        if (routeResult) return routeResult;

        //检查正则路由中是 否匹配到路径
        routeDnsResult = complexQueryRout(routeDnsResult.routeStroage, autoRoutes, requestUrlInfo);

        if (routeResult = routeDnsResult.routeResult) {
            return routeResult;
        }

        //重新解析
        routeMap = routeDnsResult.routeMap;
        l = routeMap.length;
        while (++i < l) {
            slice = routeMap[i];
            routeResult = routeHandle(slice.routeList, slice.nowInfo, autoRoutes, requestUrlInfo);
            if (routeResult) {
                return routeResult;
            }
        }
    };

    /*查询路由【主要用解析常规路由和查找正则和参数路由器到缓存容器中，提供后续正则、参数DNS路由器解析】*/
    function queryRoute(routeList, nowInfo, routeStroage, autoRoutes, requestUrlInfo) {

        //路由记录缓存容器（提供后续匹配正则）
        routeStroage = routeStroage || {
            regexp: [],
            parameter: []
        };

        //配置中的路由信息
        var rl = routeList.length,
            ri = ~0,
            //路径
            url = nowInfo.url.replace(pathRootRegexp, ''),
            //下级URL
            lowerUrl,
            //路由信息
            routeInfo,
            //路径集合
            path,
            //自动路由
            autoRoute,
            //路由类型
            __type__,
            //路由后缀
            suffix = nowInfo.suffix,
            //匹配到的字符个数
            matchSize = nowInfo.matchSize || 0,
            //路径字典
            pathMap,
            //子路由
            childrenRoute,
            //匹配到的路径
            matePath,
            //路由配置
            routeConfig,
            //路由返回的结果
            routeResult,
            //用来遍历常规路径
            mi, ml, mv, normalRoute,
            //正则路由路径需要的变量
            gl, regexpRoute, regexpStroage = routeStroage.regexp,
            //参数路由需要的变量
            pl, parameterRoute, parameterStroage = routeStroage.parameter;

        //遍历配置中的路由节点
        while (++ri < rl) {
            routeInfo = routeList[ri].__info__;
            path = routeInfo.path;
            suffix = typeof routeInfo.suffix !== 'undefined' ? routeInfo.suffix : nowInfo.suffix;
            routeConfig = routeInfo.routeConfig;
            pathMap = routeInfo.pathMap;
            __type__ = routeInfo.__type__;
            childrenRoute = routeInfo.childrenRoute;
            matePath = '';

            //检查是否有路径、并检查是否有常规路由
            if (path.length) {
                //处理各种类型路由
                normalRoute = pathMap.normalRoute;
                regexpRoute = pathMap.regexpRoute;
                parameterRoute = pathMap.parameterRoute;

                //添加正则路由到缓存容器中
                if (gl = regexpRoute.length) {
                    regexpStroage.push({
                        url: url,
                        suffix: suffix,
                        parameter: nowInfo.parameter,
                        matchSize: matchSize,
                        routeInfo: routeInfo
                    })
                }

                //添加参数路由到缓存容器中
                if (pl = parameterRoute.length) {
                    parameterStroage.push({
                        url: url,
                        parameter: nowInfo.parameter,
                        suffix: suffix,
                        matchSize: matchSize,
                        routeInfo: routeInfo
                    })
                }

                //遍历常规路由中的路径进行匹配
                mi = ~0;
                ml = normalRoute.length;
                while (++mi < ml) {
                    mv = normalRoute[mi].replace(pathRootRegexp, '');
                    //检查路由是否匹配到路径中的前部份
                    if (url.indexOf(mv) === 0) {
                        lowerUrl = url.replace(mv, '');
                        //检查当前路径匹配是否是最终状态
                        if (!lowerUrl || lowerUrl === suffix) {
                            //检查是否有路由配置【控制器、视图】
                            if (routeConfig) {
                                routeResult = {
                                    suffix: suffix,
                                    routeConfig: routeConfig
                                };
                                //路由拦截
                                if (routeInterceptor(routeResult, requestUrlInfo)) {
                                    break
                                } else {
                                    routeResult = null;
                                }

                            } else {
                                //没有对应的路由配置
                                $log.warning('没有对应的路由配置');
                            }

                            //检查剩余的路径是否是已/开头（确认之前匹配的是否是目录）
                        } else if (/^[\\\/]/.test(lowerUrl)) {
                            //继续下级路由查找
                            matePath = {
                                url: lowerUrl,
                                parameter: nowInfo.parameter, //需要匹配的路径
                                matchSize: matchSize + mv.length, //匹配到的字符
                                suffix: suffix //当前路由后缀
                            };

                            //查找下级路由的匹配项
                            routeResult = queryRoute(childrenRoute, matePath, routeStroage, autoRoutes, requestUrlInfo).routeResult;

                            if (routeResult) {
                                break;
                            }

                        }

                        //检测是否存在自动路由
                        if ((autoRoute = routeInfo.autoRoute) && mi + 1 === ml) {
                            autoRoutes.push({
                                data: autoRoute,
                                type: 'a',
                                info: {
                                    suffix: suffix,
                                    lowerUrl: lowerUrl,
                                    parameter: nowInfo.parameter
                                }
                            });
                        }

                    }
                }
                if (routeResult) {
                    break
                }

            } else {
                //自动路由
                (autoRoute = routeInfo.autoRoute) && autoRoutes.push({
                    data: autoRoute,
                    type: 'a',
                    info: {
                        suffix: suffix,
                        lowerUrl: url,
                        parameter: nowInfo.parameter
                    }
                });

                //路由信息
                matePath = {
                    url: url, //需要匹配的路径
                    matchSize: matchSize, //匹配到的字符
                    parameter: nowInfo.parameter,
                    suffix: suffix //当前路由后缀
                };

                //查找下级路由的匹配项
                routeResult = queryRoute(childrenRoute, matePath, routeStroage, autoRoutes, requestUrlInfo).routeResult;
                if (routeResult) {
                    break;
                }
            }
        }

        return {
            routeResult: routeResult,
            routeStroage: routeStroage
        };

    };

    /*复杂（正则/参数）路由匹配查询*/
    function complexQueryRout(routeStroage, autoRoutes, requestUrlInfo) {
        //参数路由匹配处理
        var parameter = routeStroage.parameter,
            routeResult,
            routeMap = [],
            parameterMap = {},
            parameterOrder = [],
            key = ~0,
            len = parameter.length,
            slices,
            slice,
            url,
            _res,
            pathSize;

        //计算参数正则路径的长度
        while (++key < len) {
            slice = parameter[key];
            url = slice.url;
            pathSize = url.length;
            slices = parameterMap[pathSize];
            if (!slices) {
                parameterMap[pathSize] = [];
                parameterOrder.push(pathSize);
            }
            parameterMap[pathSize].push(slice);
        }

        //进行参数正则路由匹配
        if (len = parameterOrder.length) {
            //排序正则匹配顺序
            parameterOrder = parameterOrder.sort(function(a, b) {
                return a - b;
            });
            key = ~0;
            //遍历排序好的正则路由
            while (++key < len) {
                slices = parameterMap[parameterOrder[key]];
                _res = parameterMateRoute(slices, autoRoutes);
                if (routeResult = _res.routeResult) {
                    res = _res;
                    break
                }

                routeMap = routeMap.concat(_res.routeMap);
            }

        }

        if (!routeResult) {
            //正则路由匹配处理
            var regexp = routeStroage.regexp,
                regexpMap = {},
                regexpOrder = [],
                key = ~0,
                len = regexp.length;

            //计算正则路径的长度
            while (++key < len) {
                slice = regexp[key];
                url = slice.url;
                pathSize = url.length;
                slices = regexpMap[pathSize];
                if (!slices) {
                    regexpMap[pathSize] = [];
                    regexpOrder.push(pathSize);
                }
                regexpMap[pathSize].push(slice);
            }

            //进行正则路由匹配
            if (len = regexpOrder.length) {
                //排序正则匹配顺序
                regexpOrder = regexpOrder.sort(function(a, b) {
                    return a - b;
                });
                key = ~0;
                //遍历排序好的正则路由
                while (++key < len) {
                    slices = regexpMap[regexpOrder[key]];
                    _res = regexpMateRoute(slices, autoRoutes);
                    if (routeResult = _res.routeResult) {
                        res = _res;
                        break
                    }

                    routeMap = routeMap.concat(_res.routeMap);
                }

            }
        }
        return {
            routeMap: routeMap,
            routeResult: routeResult
        }
    };

    /*提取路由参数*/
    function getParameter(info, src, parameter) {
        parameter = parameter || {};
        //提取正则映射的值
        var path = info.path,
            regexps = info.regexps,
            fns = info.fns,
            $src = info.src,
            i = ~0,
            l = regexps.length,
            v;

        //检查是否有参数字符映射
        if ($src && ($src = src.match(new RegExp($src)))) {
            while (++i < l) {
                v = regexps[i];
                parameter[v.key] = $src[i + 1];
            }
        }

        //提取回调函数映射的值
        i = ~0;
        l = fns.length;
        while (++i < l) {
            v = fns[i];
            parameter[v.key] = v.fn.call(src.match(new RegExp(path)));
        }
    };

    /*参数路由匹配*/
    function parameterMateRoute(slices, autoRoutes) {
        var sliceIndex = ~0,
            sliceLength = slices.length,
            slice, parameter, src,
            url, suffix, matchSize, routeInfo, parameterRoutes, pathMap,
            routeResult, routeConfig, path,
            pi, pl, pv, parameterPath, lowerUrl,
            routeMap = [],
            autoRoute;

        innerloop:
            //遍历当前路由节点
            while (++sliceIndex < sliceLength) {
                slice = slices[sliceIndex];
                url = slice.url;
                suffix = slice.suffix;
                matchSize = slice.matchSize;
                routeInfo = slice.routeInfo;
                pathMap = routeInfo.pathMap;
                routeConfig = routeInfo.routeConfig;
                parameterRoutes = pathMap.parameterRoute;

                //路由参数复制
                slice.parameter = $object.clone(slice.parameter);

                //遍历路由参数路径
                pi = ~0;
                pl = parameterRoutes.length;
                while (++pi < pl) {
                    pv = parameterRoutes[pi];
                    path = pv.path;
                    //重新构建正则
                    parameterPath = new RegExp('^' + path);
                    //检查是否匹配
                    if (parameterPath.test(url)) {
                        lowerUrl = url.replace(parameterPath, function(output) {
                            src = output;
                            return '';
                        });
                        //检查当前路径匹配是否是最终状态
                        if (!lowerUrl || lowerUrl === suffix) {
                            //检查是否有路由配置【控制器、视图】
                            if (routeConfig) {
                                //提取当前路由参数
                                getParameter(pv, src, slice.parameter);

                                routeResult = {
                                    url: url,
                                    suffix: suffix,
                                    parameter: slice.parameter,
                                    routeConfig: routeConfig
                                };
                                break innerloop;
                            }

                            //检查剩余的路径是否是已/开头（确认之前匹配的是否是目录）
                        } else if (/^[\\\/]/.test(lowerUrl)) {
                            //提取当前路由参数
                            getParameter(pv, src, slice.parameter);

                            //继续下级路由查找
                            routeMap.push({
                                routeList: routeInfo.childrenRoute,
                                nowInfo: {
                                    url: lowerUrl,
                                    suffix: suffix,
                                    parameter: slice.parameter,
                                    matchSize: matchSize + url.length - lowerUrl.length,
                                }
                            });

                        }

                        //检测是否存在自动路由
                        if ((autoRoute = routeInfo.autoRoute) && pi + 1 === pl) {
                            autoRoutes.push({
                                data: autoRoute,
                                type: 'b',
                                info: {
                                    suffix: suffix,
                                    lowerUrl: lowerUrl,
                                    parameter: slice.parameter
                                }
                            });
                        }
                    }
                }
            }

        return {
            routeMap: routeMap,
            routeResult: routeResult
        };
    };

    /*正则路由匹配*/
    function regexpMateRoute(slices, autoRoutes) {
        var sliceIndex = ~0,
            sliceLength = slices.length,
            slice,
            url, suffix, matchSize, routeInfo, regexpRoutes, pathMap,
            routeResult, routeConfig,
            pi, pl, regexpPath, lowerUrl,
            routeMap = [],
            autoRoute;
        innerloop:
            //遍历当前路由节点
            while (++sliceIndex < sliceLength) {
                slice = slices[sliceIndex];
                url = slice.url;
                suffix = slice.suffix;
                matchSize = slice.matchSize;
                routeInfo = slice.routeInfo;
                pathMap = routeInfo.pathMap;
                routeConfig = routeInfo.routeConfig;
                regexpRoutes = pathMap.regexpRoute;

                slice.parameter = $object.clone(slice.parameter || {});

                //遍历路由正则路径
                pi = ~0;
                pl = regexpRoutes.length;
                while (++pi < pl) {
                    regexpPath = regexpRoutes[pi];
                    //重新构建正则（主要给正则添加必须开头^）
                    regexpPath = new RegExp('^' + regexpPath.source.replace(/^\^(?:\\\/)*/, ''), regexpPath.ignoreCase ? "i" : "");
                    //检查是否匹配
                    if (regexpPath.test(url)) {
                        lowerUrl = url.replace(regexpPath, '');
                        //检查当前路径匹配是否是最终状态
                        if (!lowerUrl || lowerUrl === suffix) {
                            //检查是否有路由配置【控制器、视图】
                            if (routeConfig) {
                                routeResult = {
                                    url: url,
                                    parameter: slice.parameter,
                                    suffix: suffix,
                                    routeConfig: routeConfig
                                };
                                break innerloop;
                            }

                            //检查剩余的路径是否是已/开头（确认之前匹配的是否是目录）
                        } else if (/^[\\\/]/.test(lowerUrl)) {
                            //继续下级路由查找
                            routeMap.push({
                                routeList: routeInfo.childrenRoute,
                                nowInfo: {
                                    url: lowerUrl,
                                    suffix: suffix,
                                    parameter: slice.parameter,
                                    matchSize: matchSize + url.length - lowerUrl.length,
                                }
                            })

                        }

                        //检测是否存在自动路由
                        if ((autoRoute = routeInfo.autoRoute) && pi + 1 === pl) {
                            autoRoutes.push({
                                data: autoRoute,
                                type: 'c',
                                info: {
                                    suffix: suffix,
                                    lowerUrl: lowerUrl,
                                    parameter: slice.parameter
                                }
                            });
                        }
                    }
                }
            }

        return {
            routeMap: routeMap,
            routeResult: routeResult
        };
    };


    /**
     * Created by xiyuan on 16-1-11.
     */
    var errorMsgs = {
        notPage: '404 Not Found【找不到对应的页面】',
        errTmpl: '错误页面模板修改错误【缺失对应的模板或控制器】',
        notOption: '没有找到对应的[错误]模板页面或控制器'
    };
    /**
     * 路由分配
     * @param requestUrl
     * @returns {boolean}
     */
    $routeManage.assign = function(requestUrl, successCallback, refresh) {

        //提取GET类型参数
        var urlGetParameter = $url.urlToObject(requestUrl),
            urlGetString = '',
            nowInfoUrl = nowInfo.url,
            routeErrorFlag = false,
            //标识路由是否停止
            isStop = false,
            //提取GET参数字符
            href = requestUrl.replace(/\?[\w\W]*/, function(str) {
                urlGetString = str;
                return '';
            }).replace(/[\/\\]*$/, '');

        //路由开始事件触发
        $eventManage.$apply('route:start', {
            //请求的无参数url
            url: href,
            //请求的url
            requestUrl: requestUrl,
            //请求的参数
            parameter: urlGetParameter,
            //当前的url
            nowUrl: nowInfoUrl,
            //路由停止
            stop: function() {
                isStop = true;
            }
        });
        $configManage.routeState = 'start';

        //检查路由停止标识
        if (isStop) return;

        //页面地址
        nowInfo.url = href;
        //路径
        nowInfo.path = href;
        //真实地址
        nowInfo.realPath = requestUrl;
        //路径中的参数
        nowInfo.parameter = urlGetParameter;
        //页面后缀
        nowInfo.suffix = $configStroage.routeSuffix;


        //查询路由是否存在
        var routeInfo = $routeManage.routeDns(nowInfo),
            autoRouteData;

        if (!routeInfo) {
            routeErrorFlag = true;
            //路由错误事件触发
            $eventManage.$apply('route:error', {
                requestUrl: requestUrl
            });
            $configManage.routeState = 'error';

            var href = 'error/msg:' + errorMsgs.notPage;
            nowInfo.path = href;
            nowInfo.url = href;
            //调用错误页面路由
            if (!(routeInfo = $routeManage.routeDns(nowInfo))) {
                $log.warning(errorMsgs.errTmpl);
                routeInfo = {
                    path: nowInfo.path,
                    suffix: nowInfo.suffix,
                    routeConfig: {}
                }
            } else {
                $log.warning(errorMsgs.notOption);
            }
        }
        //检查是匹配的资源是否自动路由
        if (autoRouteData = routeInfo.data) {
            //解析自动路由参数
            var viewUrl,
                controllerUrl,
                viewConfig,
                $info = routeInfo.info,
                lowerUrl = $info.lowerUrl.replace($info.suffix, '').replace(/^[\/\\]*/, ''),
                // isModule = autoRouteData.indexOf('@') > -1;
                isModule = autoRouteData.match(/\@(?!zip)/);
            switch (typeof autoRouteData) {
                case 'string':
                    viewUrl = autoRouteData + (isModule ? '/' : '@') + lowerUrl;
                    viewUrl = viewUrl.replace(/\/([\w-]+)$/, ':$1');
                    controllerUrl = viewUrl;
                    break;
                case 'function':
                    autoRouteData = autoRouteData(lowerUrl, $info.parameter);
                case 'object':
                    viewUrl = autoRouteData.view || (autoRouteData.viewDir ? autoRouteData.viewDir + '/' + lowerUrl : '');
                    controllerUrl = autoRouteData.controller || (autoRouteData.controllerDir ? $path.normalize(autoRouteData.controllerDir + '/' + lowerUrl).replace(/\/([\w-]+)$/, ':$1') : '');
                    if (viewConfig = autoRouteData.viewConfig) {
                        //组装视图配置回调参数
                        viewUrl = function(suffix, requireType, url) {
                            return function($view) {
                                $view({
                                    suffix: suffix,
                                    requireType: requireType
                                });
                                return url;
                            }
                        }(viewConfig.suffix, viewConfig.requireType, viewUrl)
                    }
                    break;
            }

            routeInfo = {
                path: routeInfo.path,
                suffix: $info.suffix,
                parameter: $info.parameter,
                routeConfig: {
                    view: viewUrl,
                    controller: controllerUrl
                }
            }

        }

        //生成最终URL路径
        href = routeInfo.path.replace(routeInfo.suffix, '') + routeInfo.suffix + urlGetString;
        routeInfo.path = href;

        //检查当前跳转路径和上页面是否同一个路径
        if (nowInfoUrl === href && !refresh) return false;

        //路由开始事件触发
        $eventManage.$apply('route:change', {
            //请求的无参数url
            url: href,
            //请求的url
            requestUrl: requestUrl,
            //请求的参数
            parameter: urlGetParameter,
            //当前的url
            nowUrl: nowInfoUrl,
            //路由停止
            stop: function() {
                isStop = true;
            }
        });

        //检查路由停止标识
        if (isStop) return;

        //检测是否返回
        $routeManage.history.isBack = $routeManage.history.isBack === null ? href === prevInfo.url : $routeManage.history.isBack;

        //路径历史更新
        nowInfo.url = href;
        prevInfo.url = nowInfoUrl;

        //回调处理
        typeof successCallback === 'function' && successCallback(routeInfo);

        //路由成功事件触发
        if (!routeErrorFlag) {

            $eventManage.$apply('route:success', {
                requestUrl: requestUrl,
                routeInfo: routeInfo
            });
            $configManage.routeState = 'success';

            //获取url中的参数
            window.$_GET = $LIB.$url.urlToObject(window.location.href, true);
        }

        //页面渲染引擎调用
        $Engine(routeInfo);

        return routeInfo;
    };


    /**
     * Created by xiyuan on 16-6-14.
     */
    var $directiveManage = {

        register: function(name, conf, type) {
            var __directiveTypes__ = this.__directiveTypes__,
                instance = new directiveInterface(name, conf),
                confData = instance.confData,
                cid = instance.cid;

            this.__Storage__[type ? 'ele' : 'attr'][instance.name] = instance;
        },

        __Storage__: {
            ele: {

            },
            attr: {

            }
        }
    };


    function directiveInterface(name, conf) {

        this.$name = name;


        this.name = name.replace(/^[A-Z]/, function(s) {
            return s.toLowerCase();
        }).replace(/[A-Z]/g, function(s) {
            return '-' + s.toLowerCase();
        });


        this.cid = $commFn.makeId();


        this.confData = this.confInit(name, conf);

        return this;
    };


    directiveInterface.prototype.confInit = function(name, conf) {

        if (conf) {
            var confData;
            switch ($type.getType(conf)) {
                case 'object':
                    confData = conf;
                case 'function':
                    confData || ((confData = {}).update = conf);
                    typeof confData.priority === "undefined" && (confData.priority = 1);
                    return confData;

            }
        }

        $log.warning('[指令] ' + name + ' 注册配置错误！');
        return {
            priority: 1
        };
    };


    directiveInterface.prototype.drawing = function(element, attrs) {

    };


    /**
     * Created by xiyuan on 16-5-17.
     */
    /**
     * Created by xiyuan on 16-6-21.
     */
    //读取配置
    $FRAME.getConfig = $configManage.getConfig;

    //设置配置
    $FRAME.setConfig = $configManage.setConfig;


    /**
     * Created by xiyuan on 16-8-18.
     */

    var nowTime = Date.now(),
        secretKey = $safety.MD5(nowTime),
        errorFlag = 'state:fail (timeFlag:' + nowTime + ')',
        //缓存容器
        __cacheStroage__ = {},
        __localStroage__ = {},
        __sessionStroage__ = {},
        //框架缓存关键字
        keyWords = ['__$frameCache__', '__$stroageCache__'];

    //分解并获取key
    function getKey(nowKey) {
        var nextKey;
        //提取key字符中对象所属的第一个属性
        nowKey = nowKey.replace(/^\[([^.\]]+[^\]]+?)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
            //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
            nextKey = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
            return '';
        });

        return {
            nowKey: nextKey,
            nextKey: nowKey
        }
    }

    //根据key的读取与设置
    function handleVal(stroageData, nowKey, value, nextKey, isDelete) {
        //检查是否需要删除
        if (arguments.length === 3 && value === null) {
            isDelete = true;
        }

        value = arguments.length > 2 ? value : null;

        //提取key字符中对象所属的第一个属性
        nowKey = nowKey.replace(/^\[([^.\]]+[^\]]+?)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
            //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
            nextKey = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
            return '';
        });

        if (!nowKey) {
            if (isDelete) {
                delete stroageData[nextKey];
            } else if (value !== null) {
                stroageData[nextKey] = value;
            }
            return stroageData[nextKey];
        } else {
            //检查下级是否存在,如果不是 则赋予对象
            if (typeof stroageData[nextKey] === "undefined") {
                isDelete || (stroageData[nextKey] = {});
            } else if (typeof stroageData[nextKey] !== 'object' || stroageData[nextKey] === null) {
                return errorFlag;
            }
            return handleVal(stroageData[nextKey], nowKey, value, nextKey, isDelete)
        }
    }


    //读取与设置缓存
    $FRAME.cache = function(key, value) {
        var res;
        switch (arguments.length) {
            case 0:
                return __cacheStroage__;
            case 1:
                res = handleVal(__cacheStroage__, key);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查缓存中的:' + key);
                }
                return res;
            default:
                res = handleVal(__cacheStroage__, key, value);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查key:' + key);
                }
                return res;
        }
    };

    //读取与设置localStorage
    $FRAME.localStorage = function(key, value) {
        var res;
        __localStroage__ = localStorage.getItem('__$stroageCache__');
        switch (arguments.length) {
            case 0:
                return __localStroage__;
            case 1:
                res = handleVal(__localStroage__, key);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查缓存中的:' + key);
                }
                return res;
            default:
                res = handleVal(__localStroage__, key, value);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查key:' + key);
                }
                localStorage.setItem('__$stroageCache__', __localStroage__);
                return res;
        }
    };

    //删除location缓存
    $FRAME.localStorageRemove = function(key) {
        if (!key) return;
        handleVal(__localStroage__, key, null);
        return localStorage.setItem('__$stroageCache__', __localStroage__);
    };

    //读取与设置sessionStorage
    $FRAME.sessionStorage = function(key, value) {
        var res;
        __sessionStroage__ = sessionStorage.getItem('__$stroageCache__');
        switch (arguments.length) {
            case 0:
                return __sessionStroage__;
            case 1:
                res = handleVal(__sessionStroage__, key);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查缓存中的:' + key);
                }
                return res;
            default:
                res = handleVal(__sessionStroage__, key, value);
                if (res === errorFlag) {
                    $log.warning('[cache]读取cache失败请检查key:' + key);
                }
                sessionStorage.setItem('__$stroageCache__', __sessionStroage__);
                return res;
        }
    };

    //删除session缓存
    $FRAME.sessionStorageRemove = function(key) {
        if (!key) return;
        handleVal(__localStroage__, key, null);
        return localStorage.setItem('__$stroageCache__', __localStroage__);
    };

    var StorageGetItem = Storage.prototype.getItem,
        StorageSetItem = Storage.prototype.setItem,
        StorageClear = Storage.prototype.clear,
        StorageRemoveItem = Storage.prototype.removeItem;


    //获取缓存
    Storage.prototype.getItem = Storage.prototype.get = function() {
        var key = arguments[0],
            __cacheData__;
        if (key) {
            var keyInfo = getKey(key);
            //检查是否获取框架缓存
            if (keyWords.in(keyInfo.nowKey) !== -1) {
                //检查是否有框架缓存,否则初始化
                if (!(__cacheData__ = StorageGetItem.call(this, keyInfo.nowKey))) {
                    StorageSetItem.call(this, keyInfo.nowKey, '{}');
                    return keyInfo.nextKey ? undefined : {};
                }

                //获取框架缓存数据
                try {
                    __cacheData__ = JSON.parse(__cacheData__);
                    return keyInfo.nextKey ? handleVal(__cacheData__, keyInfo.nextKey) : __cacheData__;
                } catch (e) {
                    StorageSetItem.call(this, keyInfo.nowKey, '{}');
                    return keyInfo.nextKey ? undefined : {};
                }
            }
        }

        return key ? StorageGetItem.call(this, key) : this;
    };

    //写入缓存
    Storage.prototype.setItem = Storage.prototype.set = function() {
        var key = arguments[0],
            value = arguments[1] || '',
            error = false,
            __cacheData__;
        if (key) {
            var keyInfo = getKey(key);
            //检查是否获取框架缓存
            if (keyWords.in(keyInfo.nowKey) !== -1) {
                //检查是否有框架缓存,否则初始化
                if (!(__cacheData__ = StorageGetItem.call(this, keyInfo.nowKey))) {
                    __cacheData__ = {};
                } else {
                    //获取框架缓存数据
                    try {
                        __cacheData__ = JSON.parse(__cacheData__);
                    } catch (e) {
                        __cacheData__ = {};
                    }
                }

                if (keyInfo.nextKey) {
                    if (error = (handleVal(__cacheData__, keyInfo.nextKey, value) === errorFlag)) {
                        $log.warning('[cache]设置cache失败!请检查缓存数据', __cacheData__);
                    }

                    StorageSetItem.call(this, keyInfo.nowKey, JSON.stringify(__cacheData__));
                } else {
                    StorageSetItem.call(this, keyInfo.nowKey, typeof value === 'object' ? JSON.stringify(value) : value);
                }
                return error ? null : value;
            }
            StorageSetItem.apply(this, arguments);
            return value;
        }

        return null;
    };

    //清空缓存
    Storage.prototype.clear = function() {
        Object.keys(this).forEach(function(key) {
            //除框架缓存其他缓存一律清除
            if (keyWords.in(key) !== -1) return;
            StorageRemoveItem.call(this, key);
        }.bind(this));
        return true;
    };

    //删除缓存
    Storage.prototype.removeItem = Storage.prototype.remove = function() {
        if (keyWords.in(arguments[0]) !== -1) {
            $log.warning('你没有权限删除框架缓存！');
            return false;
        }
        return StorageRemoveItem.apply(this, arguments);
    };

    //缓存key关键词预定 (兼容火狐以防报错)
    try {

        keyWords.forEach(function(key) {

            localStorage[key] = localStorage[key] || '{}';
            sessionStorage[key] = sessionStorage[key] || '{}';

            Object.defineProperty(window.localStorage, key, {
                set: function() {
                    $log.warning('不可改写框架缓存！');
                },
                get: function() {
                    return localStorage.getItem(key);
                }
            });

            Object.defineProperty(window.sessionStorage, key, {
                set: function() {
                    $log.warning('不可改写框架缓存！');
                },
                get: function() {
                    return sessionStorage.getItem(key);
                }
            });

        });
    } catch (e) {};


    /**
     * Created by xiyuan on 16-8-18.
     */

    //数据model
    $FRAME.$model = $FRAME.model = $MODEL;

    //页面重定向
    $FRAME.redirect = $routeManage.redirect;

    //返回上一页
    $FRAME.goBack = $routeManage.back;

    //刷新当前页面
    $FRAME.refresh = $routeManage.refresh;

    //视图渲染
    $FRAME.viewVM = function() {
        return directiveRegisterInterface.prototype.viewVM.apply(this, arguments);
    };

    //检查是否数据模型
    $FRAME.isVM = function() {
        return directiveRegisterInterface.prototype.isVM.apply(this, arguments);
    };

    //语法解析
    $FRAME.syntax = function() {
        return directiveRegisterInterface.prototype.syntax.apply({
            $pageModel: $FRAME.$pageAssign,
            $pageFilter: $FRAME.$pageFilter
        }, arguments);
    };

    //model双向数据解除销毁
    $FRAME.destroyVM = function(data) {
        //检查是否监听数据
        if (typeof data === 'object' && data.__dep__) {

        }
    };


    /**
     * Created by xiyuan on 16-10-16.
     */
    //外部事件处理器
    $FRAME.$event = new $eventManageInterface();


    $FRAME.lib = $LIB;


    $FRAME.DB = function(dbName, version, description, dbSize) {
        return new $DB(dbName, version, description, dbSize);
    };


    $FRAME.noSql = function(dbName, version) {
        return new noSql(dbName, version);
    };


    /**
     * Created by xiyuan on 16-5-17.
     */
    var $pageModel = {},
        layoutCache = {};


    function $Engine(routeInfo) {
        new engineInterface(routeInfo)
    };


    function engineInterface(routeInfo) {

        var engineObj = this,


            routeConfig = routeInfo.routeConfig,
            controller = routeConfig.controller,
            view = routeConfig.view,
            parameter = routeInfo.parameter,
            viewTemplate = routeConfig.viewTemplate,


            promise = $listen();

        promise.init(function(handleObjAttr) {
            var viewEnabled = view ? true : false,
                controllerEnabled = controller ? true : false;


            handleObjAttr({
                view: viewEnabled,
                controller: controllerEnabled,
                passView: false,
                passController: false,
                viewData: null,
                controllerData: null,
                counter: (controller ? 1 : 0) + (view ? 1 : 0)
            });

        });


        promise.handle(function(source, sourceType, info) {
            var passName;
            switch (sourceType) {
                case 'controller':
                case 'view':
                    passName = 'pass' + sourceType.replace(/^[\w]/, function(s) {
                        return s.toUpperCase()
                    });
                    if (!this[passName]) {
                        this[passName] = true;
                        this[sourceType + 'Data'] = {
                            info: info,
                            source: source
                        };
                        this.counter = this.counter - 1;
                    }
                    break;
            }


            if (!this.counter) {
                return this;
            }

        });


        promise.receive(function(data) {

            engineObj.init(data);
        });

        if (controller) {

            $sourceManage.getControllerSource(controller, function(source, sourceType) {

                promise.trigger(source, sourceType, this);
            }, parameter);
        }


        if (view) {
            $sourceManage.getViewSource(view, function(source, sourceType) {

                promise.trigger(source, sourceType, this);
            }, parameter);
        }


        if (viewTemplate) {

        }

    }


    engineInterface.prototype.init = function(data) {

        var controllerData = data.controllerData,
            viewData = data.viewData,
            controllerSource,
            viewSource,
            controllerInfo,
            viewInfo,
            controllerAction,
            controllerActionFn;


        if (controllerData) {
            controllerInfo = controllerData.info;
            controllerAction = controllerInfo.pathSlice;

            if (controllerSource = controllerData.source) {

                if (!((controllerActionFn = controllerSource[controllerAction]) && (controllerActionFn = controllerActionFn[1]))) {
                    controllerActionFn = null;
                    $log.warning('[控制器]未找到对应的' + controllerAction + '操作');
                }
            }
        }


        if (viewData || controllerActionFn) {
            this.rendering({
                source: controllerSource,
                actionName: controllerAction,
                actionFn: controllerActionFn,
                info: controllerInfo
            }, viewData);
        }

    };




    engineInterface.prototype.rendering = function(controllerData, viewData) {
        var viewSource = viewData ? viewData.source : viewData,
            layoutSource = null,
            isRunController = false,
            eleStorage = null;

        function layoutRender(layoutSource) {
            var layoutView,
                cacheEleContainer = [],
                cacheBlockContainer = [],
                cacheMainContainer = [],
                cacheMainCleans = [],
                tmpContainer = document.createDocumentFragment(),
                placeholder = document.createTextNode(''),
                parentNode = eleStorage.tpls[0].parentNode,
                layoutDom,
                tmpEle;


            if (layoutCache.layoutSource === layoutSource) {
                layoutDom = layoutCache.layoutView.DOM;


                layoutCache.cacheEleContainer.forEach(function(ele) {
                    layoutDom.appendChild(ele);
                });


                layoutCache.cacheMainContainer.forEach(function(info) {
                    info.innerEles.forEach(function(el) {
                        info.real.appendChild(el);
                    });

                    var parentNode = info.double.parentNode;
                    parentNode.innerHTML = '';
                    parentNode.appendChild(info.real);
                    info.real.parentNode.insertBefore(info.double, info.real);
                });


                layoutCache.cacheBlockContainer.forEach(function(info) {
                    while (info.startNode.nextSibling !== info.endNode) {
                        info.real.appendChild(info.startNode.nextSibling);
                    }
                    info.startNode.parentNode.replaceChild(info.real, info.startNode);
                    info.real.parentNode.insertBefore(info.startNode, info.real);
                });


                layoutCache.cacheMainCleans.forEach(function(ele) {
                    ele.parentNode && ele.parentNode.removeChild(ele);
                });
            } else {

                layoutCache.layoutView = layoutView = viewVm(layoutSource, {
                    $pageModel: $FRAME.$pageAssign,
                    $pageFilter: $FRAME.$pageFilter
                });
                layoutDom = layoutView.DOM;


                layoutDom.childNodes.forEach(function(ele) {
                    cacheEleContainer.push(ele);
                });


                layoutDom.querySelectorAll('layout-block').forEach(function(ele) {
                    var startNode = document.createTextNode(''),
                        endNode = document.createTextNode('');

                    ele.parentNode.insertBefore(startNode, ele);
                    ele.nextSibling ?
                        ele.nextSibling.parentNode.insertBefore(endNode, ele.nextSibling) :
                        ele.parentNode.appendChild(endNode);

                    cacheBlockContainer.push({
                        real: ele,
                        startNode: startNode,
                        endNode: endNode
                    });
                    startNode = endNode = null;
                });


                layoutDom.querySelectorAll('layout-main').forEach(function(ele) {
                    var innerEles = [],
                        tmpNode = document.createTextNode('');
                    ele.parentNode.insertBefore(tmpNode, ele);

                    ele.childNodes.forEach(function(el) {
                        innerEles.push(el)
                    });

                    cacheMainContainer.push({
                        double: tmpNode,
                        real: ele,
                        innerEles: innerEles
                    });
                    tmpNode = innerEles = null;
                });

                layoutCache.cacheEleContainer = cacheEleContainer;
                layoutCache.cacheMainContainer = cacheMainContainer;
                layoutCache.cacheBlockContainer = cacheBlockContainer;
            }

            layoutCache.layoutSource = layoutSource;


            parentNode.appendChild(placeholder);


            eleStorage.tpls.forEach(function(ele) {
                parentNode.removeChild(ele);
            });


            layoutDom.querySelectorAll('layout-block').forEach(function(ele) {
                var viewBlock = eleStorage.blocks[ele.getAttribute('location')];
                (function(ele) {
                    while (ele.firstChild) {
                        tmpContainer.appendChild(ele.firstChild)
                    }
                })(viewBlock || ele);

                ele.parentNode.replaceChild(tmpContainer, ele);
            });


            layoutDom.querySelectorAll('layout-main').forEach(function(ele) {
                while (tmpEle = eleStorage.tpls.shift()) {
                    tmpContainer.appendChild(tmpEle)
                }

                tmpContainer.childNodes.forEach(function(ele) {
                    cacheMainCleans.push(ele);
                });
                layoutCache.cacheMainCleans = cacheMainCleans;

                ele.parentNode.replaceChild(tmpContainer, ele);
            });

            parentNode.replaceChild(layoutDom, placeholder);


            layoutView, cacheEleContainer, cacheBlockContainer, cacheMainContainer, cacheMainCleans, tmpContainer, placeholder, parentNode, layoutDom, tmpEle = null;
        }


        function displayFn(__storage__) {
            var controllerAssign = __storage__.assign;
            var controllerFilter = __storage__.filter;
            if (viewSource) {


                var $pageModel = $FRAME.$pageAssign = (controllerAssign || {}).extend($configStroage.pathList.src.paths),

                    $pageFilter = $FRAME.$pageFilter = $object.concat($configStroage.$filter, controllerFilter);


                var viewObje = viewVm(viewSource, {
                        $pageModel: $pageModel,
                        $pageFilter: $pageFilter
                    }),
                    pageElement = viewObje.DOM,
                    animate = $configStroage.pageToggle.animate,
                    animateType = 'default',
                    placeholder = document.createTextNode(''),
                    toggleAction = $routeManage.history.isBack ? 'back' : 'make';


                if (__storage__.layout) {
                    eleStorage = __storage__.eleStorage;
                    pageElement.querySelectorAll('layout-block').forEach(function(ele) {
                        eleStorage.blocks[ele.getAttribute('location')] = ele;
                        pageElement.removeChild(ele)
                    });

                    pageElement.childNodes.length || pageElement.appendChild(placeholder);
                    pageElement.childNodes.forEach(function(ele) {
                        eleStorage.tpls.push(ele);
                    });

                    if (layoutSource) {
                        layoutRender(layoutSource)
                    } else {
                        isRunController = true
                    }
                }


                $routeManage.history.isBack = null;


                $eventManage.$apply('page:render', {
                    now: pageElement,
                    old: window.document.body
                });


                animate = animate[animateType];
                switch (typeof animate) {
                    case 'function':
                        animate = animate(pageElement);
                    case 'object':
                        animate[toggleAction](pageElement);
                        break;
                }


                new $extend.FastClick(document.body);
            }
        }


        if (controllerData.actionFn) {


            controllerData.info.layoutRender = function(__storage__, _layoutSource) {
                layoutSource = _layoutSource;
                isRunController && layoutRender(layoutSource)
            };


            controllerData.info.displayFn = function(__storage__) {
                displayFn(__storage__);
            };


            controllerData = controllerVm(controllerData.actionFn, {}, controllerData.info);

        } else {
            displayFn({});
        }

    };



    /**
     * Created by xiyuan on 16-5-17.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */

    /**
     * 数据模型接口
     * @param modelPath
     * @param $referer
     * @returns {$modelInterface}
     */
    function $modelInterface(modelPath, $referer) {

        //引用的资源
        def(this, '__$referer__');
        this.__$referer__ = $referer;

        //数据模型方法,用于存储需要调用的方法
        def(this, '__allTaskModel__');
        this.__allTaskModel__ = [];

        //数据模型监听相关操作,用于存储需要调用的监听相关操作
        def(this, '__allWatchTask__');
        this.__allWatchTask__ = [];

        //存储$model数据初次载入完毕回调
        def(this, '__loadData__');
        this.__loadData__ = [];

        //model实例对象
        def(this, 'model');
        this.model = null;

        //$model数据
        def(this, '$model');
        this.$model = null;

        //调用数据模型
        var MV = modelVm(modelPath, $referer);

        MV.init(function(modelObj, modelInfo) {

            //执行任务 (方法与数据监控)
            this.__allWatchTask__.forEach(function(task) {
                switch (task.type) {
                    case 'watch':
                        modelObj.watch.apply(modelObj, task.parameter);
                        break;
                        //删除数据监听
                    case 'removeWatch':
                        modelObj.removeWatch.apply(modelObj, task.parameter);
                        break;
                        //启动数据监听
                    case 'startWatch':
                        modelObj.startWatch.apply(modelObj, task.parameter);
                        break;
                        //停止数据监听
                    case 'stopWatch':
                        modelObj.stopWatch.apply(modelObj, task.parameter);
                        break;

                }
            });

        }.bind(this));

        MV.load(function(modelObj, modelInfo) {
            this.model = modelObj;
            modelVmInit.bind(this)(modelObj, modelInfo);
        }.bind(this));

        return this;
    };

    /**
     * 控制器中调用数据模型方法接口
     * @param methodName
     * @returns {*}
     */
    $modelInterface.prototype.method = function(methodName) {
        var arg = arguments,
            i = 0,
            l = arg.length,
            v, newArg = [];
        if (l === 2) {
            v = arg[1];
            newArg = $type.isArray(v) ? v : [v];
        } else {
            while (++i < l) {
                newArg.push(arg[i]);
            }
        }
        try {
            //检查当前model是否初始化
            if (this.model) return this.model.__storage__.methods[methodName].apply(this.model, newArg);

            //存储到方法存储器中
            this.__allTaskModel__.push({
                methodName: methodName,
                parameter: newArg,
                type: 'method'
            });
        } catch (e) {
            $log.warning('[数据模型] 外部自定义模型的' + methodName + '方法未定义或方法内部错误!');
        }

        return this;

    };

    /**
     * 数据模型监测
     * @param key
     * @param fn
     */
    $modelInterface.prototype.watch = function(key, fn, isRead) {

        switch (arguments.length) {
            case 0:
                return;
            case 1:
                fn = key;
                key = '';
                break;
        }

        //存储到方法存储器中
        this.__allWatchTask__.push({
            parameter: [key, fn.bind(this.__$referer__), isRead],
            type: 'watch'
        });
        //检测是否$model数据载入完毕
        if (this.model) {
            this.model.watch.apply(this.model, [key, fn, isRead]);
        }
        return this;
    };

    /**
     * 删除数据模型监测
     * @param key
     * @param fn
     */
    $modelInterface.prototype.removeWatch = function(key, fn) {
        //存储到方法存储器中
        this.__allWatchTask__.push({
            parameter: [key, fn],
            type: 'removeWatch'
        });
        //检测是否$model数据载入完毕
        if (this.model) {
            this.model.removeWatch.apply(this.model, [key, fn]);
        }
        return this;
    };

    /**
     * 启动数据监听
     * @param key
     */
    $modelInterface.prototype.startWatch = function(key) {
        //存储到方法存储器中
        this.__allWatchTask__.push({
            parameter: [key],
            type: 'startWatch'
        });
        //检测是否$model数据载入完毕
        if (this.model) {
            this.model.startWatch.apply(this.model, [key]);
        }
        return this;
    };

    /**
     * 关闭数据监听
     * @param key
     */
    $modelInterface.prototype.stopWatch = function(key) {
        //存储到方法存储器中
        this.__allWatchTask__.push({
            parameter: [key],
            type: 'stopWatch'
        });
        //检测是否$model数据载入完毕
        if (this.model) {
            this.model.stopWatch.apply(this.model, [key]);
        }
        return this;
    };

    /**
     * $model数据加载后回调
     * @param fn
     */
    $modelInterface.prototype.readData = function(fn) {
        //改变函数的作用域
        // fn=fn.bind(this.__$referer__);
        //存储到方法存储器中
        this.__loadData__.push({
            parameter: [fn],
            type: 'loadData'
        });

        //检测是否$model数据载入完毕
        if (this.model) {
            if (!this.model.__storage__.watchOn) {
                fn.bind(this)(this.model.$model);
            } else {
                this.model.readData(function() {
                    fn.apply(this, arguments);
                }.bind(this));
            }
        }
        return this;
    };

    /**
     * model数据写入
     * @param key
     * @param data
     */
    $modelInterface.prototype.write = function(key, data) {
        modelImage.prototype.write.apply(this, arguments)
        return this;
    };

    /**
     * model数据获取
     * @param key
     */
    $modelInterface.prototype.get = function(key) {
        return modelImage.prototype.get.apply(this, arguments);
    };

    /**
     * 获取源数据
     * @param key
     */
    $modelInterface.prototype.getSource = function(key) {
        return $FRAME.lib.$object.clone(modelImage.prototype.get.apply(this, arguments));
    };

    /**
     * model类型
     */
    $modelInterface.prototype.__isModel__ = true;

    /**
     * model实例化后的初始化
     * @param modelObj
     * @param modelInfo
     */
    function modelVmInit(modelObj, modelInfo) {

        //model数据源映射到model接口对象上
        function mappedModel($model) {

            if (!$model || typeof $model !== 'object') return false;

            //模型数据与模型对象进行绑定
            var propertyNames = Object.keys($model);
            propertyNames.forEach(function(key) {
                //数据映射
                key in this || Object.defineProperty(this, key, {
                    enumerable: true,
                    configurable: true,
                    set: function(nv) {
                        $model[key] = nv;
                    }.bind(this),
                    get: function() {
                        return $model[key];
                    }
                });
            }.bind(this));
        }

        //model数据加载完后进行数据映射
        modelObj.readData(mappedModel.bind(this));

        //数据绑定
        Object.defineProperty(this, '$model', {
            enumerable: false,
            configurable: true,
            set: function(newVal) {
                modelObj.$model = newVal;
                //模型数据与模型对象进行绑定
                mappedModel.bind(this)(newVal);
            }.bind(this),
            get: function() {
                return modelObj.$model;
            }
        });

        //执行任务 (方法与数据监控)
        var modelMethod,
            modelMethods = modelObj.__storage__.methods;

        this.__allTaskModel__.forEach(function(task) {
            modelMethod = modelMethods[task.methodName];
            if (!modelMethod) {
                $log.warning('[数据模型] ' + modelInfo.realPath + '文件中' + modelInfo.pathSlice + ' 模型的' + task.methodName + '方法未定义!');
                return;
            }
            //调用对应的model方法
            modelMethod.apply(modelObj, task.parameter);
        });

        //数据挂载
        this.__loadData__.forEach(function(task) {
            modelObj.readData.apply(modelObj, task.parameter);
        });

    }



    ;


    /**
     * Created by xiyuan on 16-5-17.
     */

    /**
     * 控制器镜像(控制器的实现)
     * @param parameter
     * @param info
     */
    function controllerImage(parameter, info) {

        //视图渲染数据存储
        def(this, '__storage__');
        this.__storage__ = {
            //存储视图分配的数据
            assign: {},
            filter: {},
            layout: null,
            animate: null,
            viewPath: null,
            display: true,
            layoutSource: null,
            eleStorage: {
                tpls: [],
                blocks: {}
            },
            displayFn: function(__storage__) {
                info.displayFn(__storage__);
            },
            __info__: info
        };

    }

    /**
     * 页面标题设置
     * @param title
     * @returns {String}
     */
    controllerImage.prototype.title = function(title) {
        if (title) {
            this.__storage__.title = title;
            window.document.title = title;
        }
        return this;
    };

    /**
     * 视图数据分配
     * @param varName
     * @param varData
     * @returns {modelData}
     */
    controllerImage.prototype.assign = function(varName, varData) {
        //检查是否model(为数据创建绑定)
        this.__storage__.assign[varName] instanceof $modelInterface ?
            this.__storage__.assign[varName].$model = varData : //(varData instanceof $modelInterface?varData.$model:varData ):
            this.__storage__.assign[varName] = varData;

        return this;
    };

    /**
     * 过滤器
     * @param filterName
     * @param fn
     * @returns {*}
     */
    controllerImage.prototype.filter = function(filterName, fn) {
        this.__storage__.filter[filterName] = fn;
        return this;
    };

    /**
     * 控制器继承 第一个参数是控制器路径  之后参数都是需要传递的参数
     * @param controller
     * @returns {controllerImage}
     */
    controllerImage.prototype.extend = function(controller) {
        var args = arguments,
            i = 0,
            l = args.length,
            parameter = [];

        while (++i < l) {
            parameter.push(args[i]);
        }

        //控制器资源获取
        $sourceManage.getControllerSource(controller, function() {

        });

        return this;
    };

    /**
     * 页面布局
     * @param layoutPath
     * @returns {controllerImage}
     */
    controllerImage.prototype.layout = function(layoutPath, layoutController, layoutSuffix) {
        if (!layoutPath || typeof layoutPath !== 'string') return this;
        this.__storage__.layout = layoutPath = sourcePathNormal(layoutPath, this.__storage__.__info__);

        layoutSuffix = typeof layoutController === 'string' && layoutController;

        $sourceManage.getViewSource(layoutPath, function(source, sourceType) {
            this.__storage__.__info__.layoutRender(this.__storage__, this.__storage__.layoutSource = source);
        }.bind(this), {}, layoutSuffix);
        return this;
    };

    /**
     * 页面跳换动画模式
     * @param animate
     * @returns {controllerImage}
     */
    controllerImage.prototype.animate = function(animate) {
        this.__storage__.animate = animate;
        return this;
    };

    /**
     * 页面展示
     * @param viewPath
     * @returns {controllerImage}
     */
    controllerImage.prototype.display = function(viewPath) {
        if (viewPath === false) {
            this.__storage__.display = false;
        } else {
            this.__storage__.viewPath = viewPath || null;
        }
        //调用展示回调
        this.__storage__.displayFn(this.__storage__);
        return this;
    };

    /**
     * 页面重定向
     * @param pagePath
     * @returns {controllerImage}
     */
    controllerImage.prototype.redirect = $routeManage.redirect;

    /**
     * 数据模型调用
     * @param modelPath
     * @returns {$modelInterface}
     */
    var $MODEL = $FRAME.$model = $FRAME.model = controllerImage.prototype.model = function(modelPath) {

        if (modelPath instanceof $modelInterface) {
            return modelPath;
        }
        var args = arguments,
            i = ~0,
            arg,
            l = args.length,
            modelCode,
            $modelData,
            modelUrl,
            includeModel = [];

        while (++i < l) {
            switch (getType(arg = args[i])) {
                case 'Function':
                    modelCode = arg;
                    break;
                case 'Array':
                    $modelData = arg;
                    includeModel = includeModel.concat(arg);
                    break;
                case 'String':
                    modelUrl = arg;
                    includeModel.push(arg);
                    break;
                default:
                    $modelData = arg;
            }
        }

        if (!l) {
            modelPath = {
                modelCode: function() {},
                includeModel: includeModel
            };
        }
        //检查是否内建model
        else if (modelCode) {
            modelPath = {
                modelCode: modelCode,
                includeModel: includeModel
            };

            //检查是否引入外部model
        } else if (modelUrl) {
            modelPath = modelUrl;

            //检查当前环境是内部还是外部
            if (this instanceof controllerImage || this instanceof modelImage) {
                modelPath = sourcePathNormal(modelPath, this.__storage__.__info__);
            }

            //纯数据模型
        } else {
            modelPath = {
                data: $modelData
            }
        }

        return new $modelInterface(modelPath, this instanceof controllerImage || this instanceof modelImage ? this : undefined);
    };


    /**
     * Created by xiyuan on 16-5-17.
     */
    function controllerVm(controllerSource, parameter, info) {
        var controllerObj = new controllerImage(parameter, info);

        controllerSource.apply(controllerObj, parameter || []);
        return controllerObj;
    };



    ;


    /**
     * Created by xiyuan on 16-6-13.
     */


    /**
     * 视图镜像(视图的实现)
     * @param viewSource
     * @returns {viewImage}
     */
    function viewImage(viewSource, pageAssign) {
        //视图渲染数据存储
        this._stroage = {
            //存储视图分配的数据

        };
        this.$pageAssign = pageAssign;
        //解析视图
        this.DOM = this.parser(viewSource);
        //手动销毁对象
        viewSource = pageAssign = null;
    }

    /**
     * 视图解析
     * @param viewSource
     * @returns {*}
     */

    viewImage.prototype.parser = function(viewSource) {
        var newDoc = $type.isElement(viewSource) ? viewSource : $HTMLtoDOM(viewSource);
        this.extract(newDoc);
        //手动销毁对象
        viewSource = null;
        return newDoc;
    };

    /**
     * 视图中组件提取
     * @param doc
     */
    viewImage.prototype.extract = function(doc) {
        //文档解析
        docParser(doc, this.$pageAssign);
        //手动销毁对象
        doc = null;
    };


    /**
     * Created by xiyuan on 16-6-13.
     */
    function viewVm(viewSource, pageAssign) {
        var viewObj = new viewImage(viewSource, pageAssign);
        viewSource = pageAssign = null;
        return viewObj;
    };


    /**
     * Created by xiyuan on 16-7-4.
     */
    ;


    /**
     * Created by xiyuan on 16-7-6.
     */
    /**
     * Created by xiyuan on 16-7-6.
     */

    /**
     * 文档解析
     * @param doc
     */
    function docParser(doc, $pageAssign) {
        var directiveStorage = $directiveManage.__Storage__,
            instance,
            $elements = directiveStorage.ele,
            $attrs = directiveStorage.attr,
            directiveRecord = [];

        //指令提取
        (function contrast(doc) {
            var nodes = doc.childNodes,
                node,
                newNode,
                newNodeLen,
                nodeName,
                attr,
                attrName,
                attrs,
                allAttr,
                priority,
                directiveName,
                decorateName,
                expression,
                attrInfo,
                directiveAll,
                i = ~0,
                l = nodes.length,
                x = ~0,
                n,
                directives,
                elementContainer,
                isDirective = false;

            //遍历所有元素
            while (++i < l) {
                node = nodes[i];
                isDirective = false;
                switch (node.nodeType) {
                    //元素节点
                    case 1:
                        nodeName = node.nodeName.toLowerCase();
                        attrs = node.attributes;
                        x = ~0;
                        n = attrs.length;
                        directives = {};
                        allAttr = {};
                        directiveAll = {};

                        //匹配标签名称(提取元素名称标识组件)
                        if (nodeName in $elements) {
                            //对应指令插件
                            instance = $elements[nodeName];

                            //标识此元素所属指令
                            isDirective = true;

                            //指令优先级
                            priority = instance.confData.priority;

                            //记录当前元素的指令
                            (directives[priority] = directives[priority] || []).push({
                                //指令实例
                                instance: instance,
                                //指令名称
                                directiveName: nodeName
                            });
                        }

                        //对比属性(提取属性标识组件)
                        while (++x < n) {
                            //元素属性集
                            attr = attrs[x];
                            //属性名称
                            attrName = attr.name;
                            //提取属性信息
                            attrInfo = attrName.match(/([^\s]+?)(?:$|:([^\s]*))/);
                            //指令名称
                            directiveName = attrInfo[1];
                            //修饰
                            decorateName = attrInfo[2] || '';
                            //属性值的表达式
                            expression = attr.value;
                            //所有属性
                            allAttr[attrName] = attr.value;

                            //对比组件名称与标签名称
                            if (directiveName in $attrs) {
                                isDirective = true;
                                instance = $attrs[directiveName];

                                //指令优先级
                                priority = instance.confData.priority;

                                //记录当前元素的指令
                                (directives[priority] = directives[priority] || []).push(directiveAll[directiveName] = {
                                    //指令实例
                                    instance: instance,
                                    //指令名称
                                    directiveName: directiveName,
                                    //属性信息
                                    attrInfo: {
                                        //当前指令完整的属性名称
                                        attrName: attrName,
                                        //修饰指令
                                        decorateName: decorateName,
                                        //指令值表达式
                                        expression: expression
                                    }
                                });

                            }

                        }

                        //记录视图组件
                        if (isDirective !== false) {
                            //指令元素容器
                            elementContainer = node.cloneNode();
                            //转移实际元素中的元素到容器中
                            while (node.firstChild) {
                                elementContainer.appendChild(node.firstChild);
                            }

                            //添加到指令记录中
                            directiveRecord.push({
                                parentNode: node.parentNode,
                                element: node,
                                attrs: allAttr,
                                directives: directives,
                                directiveAll: directiveAll,
                                innerElement: elementContainer
                            })
                        } else {
                            //非组件,则继续往下提取
                            contrast(node);
                        }

                        break;
                        //文本节点
                    case 3:
                        newNode = textParser(node.cloneNode(), $pageAssign);
                        newNodeLen = newNode.childNodes.length;

                        //补全元素个数(新元素容器中可能有多个新的文本节点)
                        i += newNodeLen - 1;
                        l += newNodeLen - 1;

                        //文本解析,并替换
                        node.parentNode.replaceChild(newNode, node);
                        break;
                }
            }
            //手动对象销毁
            doc = nodes = node = newNode = newNodeLen = nodeName = attr = attrName = attrs = allAttr = priority = directiveName = decorateName = expression = attrInfo = directiveAll = i = l = x = n = directives = elementContainer = isDirective = null;
        })(doc);

        //指令渲染
        directiveRendering(directiveRecord, $pageAssign);

        //手动销毁对象
        doc = $pageAssign = directiveStorage = instance = $elements = $attrs = directiveRecord = null;
    };


    /**
     * Created by xiyuan on 16-7-25.
     */
    /**
     * Created by xiyuan on 16-7-25.
     */

    /**
     * 渲染处理
     * @param element 指令绑定的元素
     * @param instance 指令实例
     * @param directiveName 指令名称
     * @param innerElement 指令内部元素
     * @param attrInfo 属性类型指令相关信息
     * @returns {boolean} 是否需要停止此元素上的后续指令渲染
     */
    function handle(element, instance, directiveName, innerElement, attrInfo, directiveAll, elementInfo) {
        var confData = instance.confData,
            $tools,
            terminal,
            arg = Array.prototype.slice.call(arguments, 0);

        //获取工具
        if (confData.tools) {
            $FRAME.$packages(confData.tools, function() {
                $tools = Array.prototype.slice.call(arguments, 0);
                arg.push($tools);
                handleInit.apply(this, arg);
            }.bind(this));
        } else {
            handleInit.apply(this, arg);
        }

        terminal = confData.terminal ? false : true;
        //手动销毁对象
        $tools = confData = element = instance = directiveName = innerElement = attrInfo = directiveAll = elementInfo = null;
        //检查是否后续渲染
        return terminal;
    }

    /**
     * 初始化处理
     * @param element
     * @param instance
     * @param directiveName
     * @param innerElement
     * @param attrInfo
     * @param tools
     * @returns {boolean}
     */
    function handleInit(element, instance, directiveName, innerElement, attrInfo, directiveAll, elementInfo, tools) {

        //获取指令的注册配置
        var confData = instance.confData,
            //指令模板数据
            template = confData.template,
            //视图文档
            viewDoc,
            //指令作用域
            $scope = {},
            //指令分配的值
            $pageAssign = this.$pageAssign,
            //表达式解析实例
            expressionInstance,
            //指令引用的工具
            $tools = tools || [],
            //数据模型检测
            isModelInterface = false,
            //创建文档片段
            elementContainer = document.createDocumentFragment(),
            //指令注册接口(提供给注册配置内部相关函数)
            directiveRegisterApi = new directiveRegisterInterface(element, instance, directiveName, innerElement, attrInfo, $pageAssign);

        //当前元素所有指令
        directiveRegisterApi.directiveAll = directiveAll;

        //当前元素的所有属性
        directiveRegisterApi.attrs = elementInfo.attrs;

        //处理是否显示指令表达式 (移除指令元素上的指令属性)
        if (!confData.directiveShow && attrInfo) {
            element.removeAttribute(attrInfo.attrName);
        }

        //处理初始绑定
        if (typeof confData.handle === 'function') {
            confData.handle.apply(directiveRegisterApi, $tools);
        }

        //元素转移
        while (innerElement.firstChild) {
            elementContainer.appendChild(innerElement.firstChild);
        }

        //检查是否取清除内部html(不进行渲染)
        if (!confData.cleanHtml) {
            //检查是否自己生成HTML
            if (directiveRegisterApi.outHTML) {
                viewDoc = viewVm(directiveRegisterApi.outHTML, $pageAssign).DOM;
                //把渲染好的内容放入原来的位置
                element.parentNode.replaceChild(viewDoc, element);
            } else {
                viewDoc = viewVm(elementContainer, $pageAssign).DOM;
                element.appendChild(viewDoc);
            }

        }

        //手动销毁对象
        confData = template = viewDoc = $scope = $pageAssign = expressionInstance = $tools = isModelInterface = elementContainer = directiveRegisterApi = viewDoc = tools = element = instance = directiveName = innerElement = attrInfo = directiveAll = elementInfo = null;
    }

    /**
     * 指令注册接口(提供给指令注册内部方法使用)
     */
    function directiveRegisterInterface(element, instance, directiveName, innerElement, attrInfo, $pageAssign) {

        var modifiers = {},
            //修饰符字符串
            modifierStr,
            //指令类型
            directiveType = '',
            //修饰符分解
            decorate = attrInfo ? attrInfo.decorateName.match(/^([^\.]+)(?:\.([\s\S]+))?/) : null,
            //指令实例数据配置
            confData = instance.confData;

        //修饰字符解析成功,则继续分解成修饰码与指令类型
        if (decorate) {
            directiveType = decorate[1];
            modifierStr = decorate[2];
            //指令修饰码
            modifierStr && modifierStr.split('.').forEach(function(val) {
                typeof val === 'string' && !val || (modifiers[val.trim()] = true);
            });
        }

        //移除元素中的指令属性
        attrInfo && innerElement.removeAttribute(attrInfo.attrName);

        //页面数据分配
        this.$pageAssign = $pageAssign;

        //指令作用域
        this.$scope = $pageAssign.$pageModel;

        //指令属性信息
        this.attrInfo = attrInfo;

        //指令值表达式
        this.$expression = attrInfo && attrInfo.expression;

        //指令修饰
        this.modifiers = modifiers;

        //指令类型(参数)
        this.type = directiveType;

        //指令元素集
        this.elements = [element];

        //指令元素
        this.$element = element;

        //元素副本
        this.elementCopy = innerElement.cloneNode(true);

        //内部元素
        this.innerHtmlContainer = innerElement;

        //元素html
        this.elementHTML = innerElement.outerHTML;

        //内部私有的标识
        this.__private__ = {
            isWatch: false,
            attrWatch: {}
        }

        //对象销毁
        element = instance = directiveName = innerElement = attrInfo = $pageAssign = modifiers = modifierStr = directiveType = decorate = confData = null;

    }

    /**
     * 语法表达处理
     */
    directiveRegisterInterface.prototype.syntax = function(expressionString) {
        return $expression(this.$pageAssign || {
            $pageModel: $FRAME.$pageAssign,
            $pageFilter: $FRAME.$pageFilter
        }, expressionString || '');
    };

    /**
     * 指令视图数据渲染
     */
    directiveRegisterInterface.prototype.viewVM = function(elementContainer, newPageAssign, newPageFilter) {
        var pageModel = {},
            pageFilter = {},
            isVM = directiveRegisterInterface.prototype.isVM,
            $pageAssign = this.$pageAssign || {},
            $pageFilter = $pageAssign.$pageFilter || $FRAME.$pageFilter || {},
            $pageModel = $pageAssign.$pageModel || $FRAME.$pageAssign || {};

        Object.keys($pageFilter).forEach(function(val) {
            pageFilter[val] = $pageFilter[val];
        });

        Object.keys($pageModel).forEach(function(val) {
            pageModel[val] = $pageModel[val];
        });

        //拼装传递来的数据
        typeof newPageFilter === 'object' && Object.keys(newPageFilter).forEach(function(key) {
            pageFilter[key] = newPageFilter[key];
        }.bind(this));

        //拼装传递来的数据
        typeof newPageAssign === 'object' && Object.keys(newPageAssign).forEach(function(key) {
            pageModel[key] = newPageAssign[key];
        }.bind(this));

        var vm = viewVm(elementContainer, {
            $pageFilter: pageFilter,
            $pageModel: pageModel
        }).DOM;

        //改变传递过来的assign数据 (为进行数据双向传递)
        typeof newPageAssign === 'object' && Object.keys(pageModel).forEach(function(key) {
            //监听
            Object.defineProperty(newPageAssign, key, {
                enumerable: true,
                configurable: true,
                set: function(newVal) {
                    if (isVM(pageModel[key])) {
                        pageModel[key].$model = newVal;
                    } else {
                        pageModel[key] = newVal;
                    }
                }.bind(this),
                get: function() {
                    return isVM(pageModel[key]) ? pageModel[key].$model : pageModel[key];
                }
            });

        }.bind(this));

        this.elements && this.elements.push(vm.childNodes[0]);

        //对象销毁
        pageFilter = $pageAssign = $pageFilter = $pageModel = elementContainer = newPageAssign = newPageFilter = null;

        return vm;
    };

    /**
     * 检查是否数据模型
     * @param srcVm
     * @returns {boolean}
     */
    directiveRegisterInterface.prototype.isVM = directiveRegisterInterface.prototype.isModel = function(srcVm) {
        return srcVm instanceof $modelInterface
    };

    /**
     * 数据模型
     */
    directiveRegisterInterface.prototype.model = directiveRegisterInterface.prototype.$MODEL = $MODEL;


    /**
     * 指令相关数据监听
     */
    directiveRegisterInterface.prototype.watch = function(Fn) {
        var expressionInstance = this.__private__.expressionInstance;
        //检查是否被挂载解析监听
        if (!this.__private__.isWatch) {
            this.__private__.isWatch = true;
            expressionInstance = this.__private__.expressionInstance = this.syntax(this.$expression);
            //监听语法结果
            expressionInstance.watch(Fn);
            //语法实例执行处理
            expressionInstance.state === "fail" || expressionInstance.exec();
        } else {
            //监听语法结果
            expressionInstance.watch(Fn);
        }
        return expressionInstance = null;
    };

    /**
     * 监听属性上的表达式数据
     */
    directiveRegisterInterface.prototype.watchAttrData = function(attrName, Fn) {

        var expressionInstance = this.__private__.attrWatch[attrName];
        //检查是否被挂载解析监听
        if (!expressionInstance) {
            //解析属性中的语法
            expressionInstance = this.__private__.attrWatch[attrName] = this.syntax(this.attrs[attrName] || '');
            //监听语法结果
            expressionInstance.watch(Fn);
            //语法实例执行处理
            expressionInstance.state === "fail" || expressionInstance.exec();
        } else {
            //监听语法结果
            expressionInstance.watch(Fn);
        }
        return expressionInstance = null;
    };


    /**
     * 监听自定义的表达式数据
     */
    directiveRegisterInterface.prototype.watchSyntaxData = function(syntax, Fn) {
        //解析属性中的语法
        var expressionInstance = this.syntax(syntax || '');
        //监听语法结果
        expressionInstance.watch(Fn);
        //语法实例执行处理
        expressionInstance.state === "fail" || expressionInstance.exec();
        return expressionInstance = null;
    };


    /**
     * 转换表达式为数据模型
     */
    directiveRegisterInterface.prototype.expressionToVM = function(expression) {
        //防止空表达式
        var expReg = (expression || (Date.now() + '_null')).match(/^\s*([^\.\[\(]+)([\s\S]*)$/),
            modelName = expReg[1],
            watchKey = expReg[2],
            $VM = this.$scope[modelName] = (this.$scope[modelName] || this.$MODEL());

        //检查是否Model数据(转换常规数据为model类型)
        if (!this.isVM($VM)) {
            //创建一个空的绑定型数据(model)
            $VM = this.$MODEL();
            //往数据model中写入相关数据
            $VM.write(watchKey, this.$scope[modelName]);
            //改变环境变量中的数据
            this.$scope[modelName] = $VM;
        }

        //对象销毁
        expReg = null;
        return {
            //数据读取
            readData: function(fn) {
                $VM.readData(function() {
                    fn($VM.get(watchKey));
                });
                return $VM;
            },
            //往表达式数据中写入数据
            write: function(key, data) {
                arguments.length == 1 && (data = key, key = watchKey);
                return $VM.write(key, data);
            },
            //获取表达式中的数据
            get: function(key) {
                return $VM.get(watchKey + (key ? '.' + key : ''));
            },
            //监听表达式的数据
            watch: function(fn) {
                typeof this.get() !== 'undefined' && this.readData(fn);
                return $VM.watch(watchKey, fn);
            },
            //移除表达式数据监听
            removeWatch: function() {
                return $VM.removeWatch(watchKey, fn);
            },
            //停止表达式数据监听
            stopWatch: function(fn) {
                return $VM.stopWatch(watchKey, fn);
            },
            //启动表达式数据监听
            startWatch: function(fn) {
                return $VM.stopWatch(watchKey, fn);
            },
            //数据模型
            $VM: $VM,
            //表达式中model名称
            modelName: modelName,
            //表达式key
            watchKey: watchKey

        };
    };

    /**
     * 属性为数据模型
     */
    directiveRegisterInterface.prototype.attrToVM = function(attrName) {
        return this.expressionToVM(this.attrs[attrName]);
    };

    function directiveRendering(directiveRecords, $pageAssign) {


        directiveRecords.forEach(function(directiveRecord) {


            var j, n, v, len,
                directive,
                attrInfo,
                instance,
                directiveName;



            var key = ~0,

                parentNode = directiveRecord.parentNode,

                directiveAll = directiveRecord.directiveAll,

                directives = directiveRecord.directives,

                innerElement = directiveRecord.innerElement,

                element = directiveRecord.element,

                attrs = directiveRecord.attrs,

                priorityData = Object.keys(directives);


            priorityData = priorityData.sort(function(a, b) {
                return b - a;
            });


            len = priorityData.length;


            terminal:


                while (++key < len) {

                    v = directives[priorityData[key]];
                    j = ~0;
                    n = v.length;

                    while (++j < n) {

                        directive = v[j];

                        instance = directive.instance;

                        directiveName = directive.directiveName;

                        attrInfo = directive.attrInfo;


                        if (!handle.bind({
                                $pageAssign: $pageAssign
                            })(element, instance, directiveName, innerElement, attrInfo, directiveAll, {
                                attrs: attrs
                            })) break terminal;

                    }
                }


            directiveRecord = j = n = v = len = directive = attrInfo = instance = directiveName = key = parentNode = directiveAll = directives = innerElement = element = attrs = priorityData = null;
        });

        directiveRecords = $pageAssign = null;
    }


    /**
     * Created by xiyuan on 16-7-6.
     */

    /**
     * 文本解析
     * @param textNode
     * @param $pageAssign
     * @returns {DocumentFragment}
     */
    function textParser(textNode, $pageAssign) {
        //文本字符串
        var srcStr = textNode.nodeValue,
            //文本分段
            stringTextMap = [''],
            //当前文本块
            nowTextBlock = '',
            //当前层级
            nowLevel = 0,
            //文本语法行为树
            textTree = new behaviorTree($pageAssign),
            //目标字符串长度
            slen = srcStr.length,
            i = ~0,
            str,
            nextStr;

        while (++i < slen) {
            str = srcStr.charAt(i);
            nextStr = srcStr.charAt(i + 1);

            //检查上次状态是否成功,成功则重新创建语法节点
            if (textTree.resState === 'success') {
                textTree = new behaviorTree($pageAssign);
                nowTextBlock = '';
                nowLevel++;
                stringTextMap[nowLevel] = '';
            }

            //语法解析 ,并检查当前的状态
            switch (textTree.handle(str, nextStr)) {
                case 'fail':
                    stringTextMap[nowLevel] += nowTextBlock + str;
                    nowTextBlock = '';
                    break;
                case 'success':
                    //检查是否第一层第一个字符匹配成功
                    stringTextMap[stringTextMap[nowLevel] ? ++nowLevel : nowLevel] = textTree;
                    break;
                case 'handle':
                    nowTextBlock += str;
                    break;
            }
        }

        return textVm(stringTextMap);
    }


    ;


    /**
     * 文本节点视图与数据的绑定处理
     * @param textNode
     * @param stringTextMap
     * @returns {DocumentFragment}
     */
    function textVm(stringTextMap) {
        //文档片段
        var container = document.createDocumentFragment();

        //遍历并解析字符串中的语法节点与字符节点
        stringTextMap.forEach(function(textMapVal) {
            var textNode = document.createTextNode('');

            switch (typeof textMapVal) {
                case 'string':
                    //文本节点
                    textNode.nodeValue = textMapVal;
                    break;
                case 'object':
                    //语法节点,并进行数据绑定
                    textMapVal.watch(function(res) {
                        textNode.nodeValue = res;
                    });
                    textMapVal.exec();
                    break;

            }
            //节点写入
            container.appendChild(textNode);
        });

        return container;
    };


    /**
     * Created by xiyuan on 16-7-14.
     */

    //用于字符匹配
    var lowerCase = 'abcdefghijklmnopqrstuvwxyz',
        upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        allLetter = lowerCase + upperCase,
        operator = '+-*/%<=>?:;|()',
        numberString = '1234567890',
        variableString = lowerCase + upperCase + numberString + '_$';

    /**
     * 数组语法树
     * @param behaviorTree
     * @returns {arrayAnalytic}
     */
    function arrayTree(behaviorTree) {
        return new arrayAnalytic(behaviorTree.$pageAssign, function() {
            this.assignVar = behaviorTree.assignVar;
            this.filterVar = behaviorTree.filterVar;
        });
    }

    /**
     * 括号代码块语法树
     * @param behaviorTree
     * @returns {arrayAnalytic}
     */
    function blockTree(behaviorTree) {
        return new arrayAnalytic(behaviorTree.$pageAssign, function() {
            this.assignVar = behaviorTree.assignVar;
            this.filterVar = behaviorTree.filterVar;

            //规则重写
            this.rule.start = [{
                v: ['('],
                type: 'start'
            }];

            this.rule.end = [{
                v: [')'],
                type: 'end'
            }];
        });
    }

    /**
     * 语法行为树
     * @param str
     * @constructor
     */
    function behaviorTree($pageAssign, rule, order, starName, endName) {
        //参数方法
        var configFn = typeof rule === "function" && rule;

        this.$pageAssign = $pageAssign;

        //起始规则名称
        this.starName = starName || 'start';

        //结束规则名称
        this.endName = endName || 'end';

        //重置当前语法状态
        this.reset();

        //当前语法节点是否结束 [success || handle | fail  ]
        this.resState = 'fail';

        //语法树
        this.syntaxTree = new syntaxTree();

        //当前语法类型节点
        this.syntaxNode = null;

        //定义的变量上下文字符(用于生成最终可以运算的表达式)
        this.assignVar = '$pageModel';

        //过滤器上下文字符(用于生成最终可以运算的表达式)
        this.filterVar = '$pageFilter';

        //等待匹配的行为
        this.handleBehaviors = [];

        //数据监听回调
        this.watchCallBacks = [];

        //行为顺序
        this.order = order || {
            //进入语法解析状态
            start: [
                'selfAssignment',
                'decorate',
                'variable',
                'end'
            ],
            //自赋值/自运算
            selfAssignment: [
                'variable',
                'arithmetic',
                'deviation',
                'end'
            ],
            //修饰符号
            decorate: [
                'variable',
                'selfAssignment',
                'decorate'
            ],
            //变量 数据
            variable: [
                'end',
                'selfAssignment',
                'arithmetic',
                'deviation',
                'end'
            ],
            //运算 (常规 加减乘除 与或非 ~ 三元运算 以及 数据过滤)
            arithmetic: [
                'decorate',
                'variable'
            ],
            //变异的运算
            deviation: [
                'deviation',
                'arithmetic',
                'end'
            ],
            end: [
                'start'
            ]
        };

        //行为规则
        this.rule = configFn !== rule && rule || {
            //进入语法解析状态
            start: [{
                v: ['{', '{'],
                type: 'start'
            }],
            //赋值运算
            assignment: [{
                v: ['='],
                type: '='
            }],
            //自赋值运算(如 前后加加 与前后减减 )
            selfAssignment: [{
                v: function(str, syntxNode, nextStr) {
                    //检查字符串是否符合要求
                    if (str !== '-') return false;
                    //检查语法节点初次是通过
                    if (syntxNode.handleInfo) {
                        var prevNode = syntxNode.prev();
                        syntxNode.end = true;

                        /*检查是否前置还是后置*/

                        //判断上一个语法节点是否是变量
                        if (prevNode.state === "variable" && prevNode.type === "object") {
                            if (prevNode.isSourceVal) return false;
                            //后置
                            syntxNode.handleInfo.loaction = 'next';

                            //检查下一个字符是否属于运算符号 或 结束符号 否则语法错误
                            if ((operator + '}').indexOf(nextStr) === -1) {
                                //对象销毁
                                prevNode = null;
                                return false;
                            }
                        }
                        //检查下一个字符来判断是否为变量
                        else if ((allLetter + '$_').indexOf(nextStr) !== -1) {
                            //前置
                            syntxNode.handleInfo.loaction = 'prev';
                        } else {
                            //对象销毁
                            prevNode = null;
                            return false;
                        }

                    } else {
                        //符合要求初次进入并初始化
                        syntxNode.handleInfo = {}
                    }

                    //对象销毁
                    prevNode = null;
                    return true;
                },
                type: '--'
            }, {
                v: function(str, syntxNode, nextStr) {
                    //检查字符串是否符合要求
                    if (str !== '+') return false;
                    //检查语法节点初次是通过
                    if (syntxNode.handleInfo) {
                        var prevNode = syntxNode.prev();
                        syntxNode.end = true;

                        /*检查是否前置还是后置*/

                        //判断上一个语法节点是否是变量
                        if (prevNode.state === "variable" && prevNode.type === "object") {
                            if (prevNode.isSourceVal) return false;
                            //后置
                            syntxNode.handleInfo.loaction = 'next';

                            //检查下一个字符是否属于运算符号 或 结束符号 否则语法错误
                            if ((operator + '}').indexOf(nextStr) === -1) {

                                //对象销毁
                                prevNode = null;
                                return false;
                            }
                        }
                        //检查下一个字符来判断是否为变量
                        else if ((allLetter + '$_').indexOf(nextStr) !== -1) {
                            //前置
                            syntxNode.handleInfo.loaction = 'prev';
                        } else {

                            //对象销毁
                            prevNode = null;
                            return false;
                        }
                        //对象销毁
                        prevNode = null;

                    } else {
                        //符合要求初次进入并初始化
                        syntxNode.handleInfo = {}
                    }

                    return true;
                },
                type: '++'
            }],
            //修饰符号
            decorate: [{
                v: ['!'],
                type: '!'
            }, {
                v: ['~'],
                type: '~'
            }, {
                v: ['-'],
                type: '-'
            }, {
                v: ['+'],
                type: '+'
            }],
            //变量 数据
            variable: [{
                //字符串
                v: function(str, syntxNode) {
                    var pass = true,
                        handleInfo = syntxNode.handleInfo;
                    //检查当前状态
                    if (handleInfo && typeof handleInfo.firstLetter !== "undefined") {
                        //检查是否符合字符串闭合  并设置当前值为源值
                        handleInfo.firstLetter === str && (syntxNode.isSourceVal = syntxNode.end = true);
                    }
                    //检查是否是字符串
                    else if ('"\''.indexOf(str) !== -1) {
                        syntxNode.handleInfo = {
                            firstLetter: str
                        };
                    } else {
                        pass = false
                    }
                    //对象销毁
                    handleInfo = null;
                    return pass;
                },
                type: 'string'
            }, {
                //数字 Number 类型
                v: function(str, syntxNode, nextStr) {
                    var pass = true;
                    //检查当前状态
                    if (numberString.indexOf(str) !== -1) {
                        //设置当前语法节点为源值
                        numberString.indexOf(nextStr) === -1 && (syntxNode.isSourceVal = syntxNode.end = true);
                    } else {
                        pass = false
                    }

                    return pass;
                },
                type: 'number'
            }, {
                //变量及多层级对象及function执行
                v: function(str, syntxNode, nextStr) {
                    var pass = true,
                        handleInfo = syntxNode.handleInfo,
                        level = handleInfo && handleInfo.level,
                        nowLevel = level && handleInfo.nowLevel;
                    if (level) {

                        //变量表达式
                        handleInfo.expression = handleInfo.expression + str;

                        //判断当前解析模式
                        if (handleInfo.mode === 'block') {

                            //检查子语法返回的语法状态
                            switch (level[nowLevel].handle(str, nextStr)) {
                                case 'success':
                                    //检查接下来的字符是否符合此次语法节点结束
                                    if (('.[').indexOf(nextStr) === -1) {
                                        syntxNode.end = true;
                                    } else {
                                        //进入下一级
                                        //如发现有子级则进入子级状态
                                        nowLevel = ++handleInfo.nowLevel;
                                        handleInfo.mode = 'key';
                                        handleInfo.level[nowLevel] = '';
                                        //检查是否进入下级代码块
                                        if (nextStr === '[') {
                                            //进入数组解析
                                            handleInfo.level[nowLevel] = arrayTree(this);
                                            handleInfo.level[nowLevel].mode = handleInfo.mode = 'block';
                                        } else if (nextStr === '(') {
                                            //进入方法运算
                                            handleInfo.level[nowLevel] = blockTree(this);
                                            handleInfo.level[nowLevel].mode = handleInfo.mode = 'blockFn';
                                        };
                                    }

                                    break;
                                case 'fail':

                                    //对象销毁
                                    handleInfo = level = nowLevel = null;
                                    return false;
                                    break;
                                default:

                            }

                            //对象销毁
                            handleInfo = level = nowLevel = null;
                            return true;
                        } else if (handleInfo.mode === 'blockVal' || handleInfo.mode === 'blockFn') {
                            //检查子语法返回的语法状态
                            switch (level[nowLevel].handle(str, nextStr)) {
                                case 'success':
                                    //检查接下来的字符是否符合此次语法节点结束
                                    if (('.[(').indexOf(nextStr) === -1) {
                                        syntxNode.end = true;
                                    } else {
                                        //进入下一级
                                        //如发现有子级则进入子级状态
                                        nowLevel = ++handleInfo.nowLevel;
                                        handleInfo.mode = 'key';
                                        handleInfo.level[nowLevel] = '';
                                        //检查是否进入下级代码块
                                        if (nextStr === '[') {
                                            //进入数组解析
                                            handleInfo.level[nowLevel] = arrayTree(this);
                                            handleInfo.level[nowLevel].mode = handleInfo.mode = 'block';
                                        } else if (nextStr === '(') {
                                            //进入方法运算
                                            handleInfo.level[nowLevel] = blockTree(this);
                                            handleInfo.level[nowLevel].mode = handleInfo.mode = 'blockFn';
                                        };
                                    }

                                    break;
                                case 'fail':

                                    //对象销毁
                                    handleInfo = level = nowLevel = null;
                                    return false;
                                    break;
                                default:
                            }

                            //对象销毁
                            handleInfo = level = nowLevel = null;
                            return true;
                        }

                        //判断当前是否进入对象子级
                        if (str === '.') {
                            //检查下一个字符串来判断当前语法是否正确 (检测接下来的字符是否符合下级变量名)
                            if ((lowerCase + upperCase + '_$[(').indexOf(nextStr) === -1) return false;
                        } else {
                            //组合属性名称
                            level[nowLevel] += str;
                        }

                        //检查下一步是否进入子级状态
                        if ('.[('.indexOf(nextStr) !== -1) {

                            //如发现有子级则进入子级状态
                            nowLevel = ++handleInfo.nowLevel;
                            handleInfo.mode = 'key';
                            handleInfo.level[nowLevel] = '';
                            //检查是否进入下级代码块
                            if (nextStr === '[') {
                                //进入数组解析
                                handleInfo.level[nowLevel] = arrayTree(this);
                                handleInfo.level[nowLevel].mode = handleInfo.mode = 'block';
                            } else if (nextStr === '(') {
                                //进入方法运算
                                handleInfo.level[nowLevel] = blockTree(this);
                                handleInfo.level[nowLevel].mode = handleInfo.mode = 'blockFn';
                            };

                            //对象销毁
                            handleInfo = level = nowLevel = null;
                            return true;
                        }
                        //检查接下来的字符是否符合此次语法节点结束
                        if ((variableString + '[].').indexOf(nextStr) === -1) {
                            //如其他字符则直接结束 并且检查其中 [ ] 括号是否关闭
                            if (handleInfo.arrayTaskCount) {
                                //对象销毁
                                handleInfo = level = nowLevel = null;
                                return false
                            }
                            syntxNode.end = true;
                        }
                        //检查下一个字符串是否 ]
                        else if (!handleInfo.arrayTaskCount && nextStr === ']') {
                            syntxNode.end = true;
                        }

                    }
                    //检查是合法变量开头
                    else if ((lowerCase + upperCase + '_$(').indexOf(str) !== -1) {
                        handleInfo = syntxNode.handleInfo = {
                            //语法表达式
                            expression: str,
                            //数组个数记录
                            arrayTaskCount: 0,
                            //子级模式 [ key | block | blockVal | null]
                            mode: null,
                            //当前层级
                            nowLevel: 0,
                            //用于存储对象层级数据
                            level: []
                        };

                        //记录顶层数据
                        handleInfo.level[0] = str;

                        //检查是否代码块
                        if (str === '(') {
                            //进入代码块解析
                            handleInfo.level[0] = blockTree(this);
                            handleInfo.level[0].handle(str, nextStr);
                            handleInfo.level[0].mode = handleInfo.mode = 'blockVal';

                            //检查下个字符串是否在有效字符串内
                        } else if ((variableString + '[.(').indexOf(nextStr) === -1) {
                            //如其他字符则直接结束
                            syntxNode.end = true
                        } else if ('.[('.indexOf(nextStr) !== -1) {
                            //如发现有子级则进入子级状态
                            handleInfo.nowLevel = 1;
                            handleInfo.mode = 'key';
                            handleInfo.level[nowLevel] = '';
                            //检查是否进入下级代码块
                            if (nextStr === '[') {
                                //进入数组解析
                                handleInfo.level[1] = arrayTree(this);
                                handleInfo.level[1].mode = handleInfo.mode = 'block';
                            } else if (nextStr === '(') {
                                //进入方法运算
                                handleInfo.level[1] = blockTree(this);
                                handleInfo.level[1].mode = handleInfo.mode = 'blockFn';
                            };
                        }

                    } else {
                        pass = false;
                    }

                    //对象销毁
                    handleInfo = level = nowLevel = null;
                    return pass;
                },
                type: 'object'
            }],
            //运算 (常规 加减乘除 与或非 ~ 三元运算  ,比较运算符)
            arithmetic: [
                //加
                {
                    v: ['+'],
                    type: 'add'
                },
                //减
                {
                    v: ['-'],
                    type: 'minus'
                },
                //乘
                {
                    v: ['*'],
                    type: 'multiply'
                },
                //除
                {
                    v: ['/'],
                    type: 'division'
                },
                // % 取模
                {
                    v: ['%'],
                    type: 'modulo'
                },
                //与
                {
                    v: ['&', '&'],
                    type: 'and'
                },
                //或
                {
                    v: ['|', '|'],
                    type: 'or'
                },
                //三元运算
                {
                    v: [function() {

                    }],
                    type: 'ternary'
                },
                /*位运算*/
                {
                    v: ['<<'], //位左移
                    type: 'leftShift'
                }, {
                    v: ['>>'], //位右移
                    type: 'rightShift'
                },
                //比较运算
                {
                    v: ['<'],
                    type: '<'
                }, {
                    v: ['>'],
                    type: '>'
                }, {
                    v: ['=', '='],
                    type: '=='
                }, {
                    v: ['=', '=', '='],
                    type: '==='
                }, {
                    v: ['>', '='],
                    type: '>='
                }, {
                    v: ['<', '='],
                    type: '<='
                }, {
                    v: ['!', '='],
                    type: '!='
                }, {
                    v: ['!', '=', '='],
                    type: '!=='
                }
            ],
            //变异的运算 (如数据过滤解析)
            deviation: [
                //数据过滤解析
                {
                    v: function(str, syntxNode, nextStr) {
                        var pass = true,
                            handleInfo = syntxNode.handleInfo;

                        //检查当前状态
                        if (handleInfo && typeof handleInfo.name !== "undefined") {
                            var arrayResolve = handleInfo.arrayAnalytic;
                            //检查是否有数组参数
                            if (arrayResolve) {

                                switch (arrayResolve.handle(str, nextStr)) {
                                    case 'success':
                                        //此次语法节点结束
                                        syntxNode.end = true;
                                        break;
                                    case 'fail':

                                        break;
                                    default:

                                }

                            }

                            //检查过滤器名称
                            else if (variableString.indexOf(str) !== -1) {
                                //检查变量名称第一个字符串不能为数字
                                if (handleInfo.name.length === 0 && numberString.indexOf(str) !== -1) {
                                    return false;
                                }

                                //组合名称
                                handleInfo.name = handleInfo.name + str;
                                //检查是否当前过滤是否结束(根据判断下一个字符)
                                if ((variableString + ':').indexOf(nextStr) === -1) {
                                    syntxNode.end = true
                                }

                                //检查是否带用参数
                            } else if (handleInfo.name.length > 0 && str === ':') {
                                //进入数组解析
                                handleInfo.arrayAnalytic = arrayTree(this);
                                //添加区别标识
                                handleInfo.arrayAnalytic.distinction = 'filterArg';
                            } else {
                                pass = false
                            }

                        } else if (str === '|') {
                            //检查是否是字符串
                            syntxNode.handleInfo = {
                                name: ''
                            };
                        } else {
                            //不匹配
                            pass = false
                        }
                        //对像销毁
                        handleInfo = null;
                        return pass;
                    },
                    type: 'filter'
                }
            ],
            //语句完整结束
            end: [{
                v: ['}', '}'],
                type: 'end'
            }]
        };

        //回调配置
        configFn && configFn.bind(this)(this);
    }

    /**
     * 状态ID生成
     * @returns {sid}
     */

    behaviorTree.prototype.makeId = function() {
        return this.sid = (this.sid || 0) + 1;
    };

    /**
     * 行为处理
     */
    behaviorTree.prototype.handle = function(str, nextStr) {

        var state = this.state,
            rule = this.rule;

        //行为状态检测
        state in rule ? handleSpeed.bind(this)(rule, str, nextStr) : handleEntry.bind(this)(rule, str, nextStr);

        //返回语法树状态
        return this.resState;
    };

    /**
     * 检测是否符合进入语法解析
     * @param rule
     * @param str
     * @param nextStr
     * @returns {boolean}
     */
    function handleEntry(rule, str, nextStr) {
        //过滤掉空字符串
        if (str == ' ' && this.resState === 'handle') {
            return true
        }

        //检查状态列队中是否存在状态
        if (!this.handleStates.length) {
            return this.reset();
        }

        //获取下一个
        var state = this.state = this.handleStates.shift(),
            //状态下的行为规则
            behaviors = this.handleBehaviors = this.rule[state].concat([]),
            //创建节点
            syntaxNode = this.syntaxNode = this.syntaxTree.add(state),
            behavior,
            index = ~0;

        //遍历当前状态下的行为规则
        while (behavior = behaviors.shift()) {
            index++;
            if (this.match(str, typeof behavior.v === "function" ? behavior.v : behavior.v[0], nextStr)) {
                this.state = state;
                this.action = index;
                this.speed = 1;

                //内容添加到当前语法节点内容中
                syntaxNode.type = behavior.type;
                syntaxNode.action = this.speed;

                //检查当前语法节点是否匹配完毕(标识节点匹配结束)
                typeof behavior.v !== "function" && this.speed === behavior.v.length && (this.syntaxNode.end = true);

                //检查最后状态是否结束状态,并标识语法匹配结束
                if (this.syntaxNode.end && this.endName === state) {
                    this.resState = 'success';
                    this.success();
                }

                return true;
            }
        }

        //如果以上没有匹配成功则移除之前创建的语法节点
        this.syntaxTree.pop();

        //继续往下匹配  (待处理的状态)
        if (this.handleStates.length && handleEntry.apply(this, arguments)) {
            return true;
        } else {
            return this.reset();
        }
    }

    /**
     * 行为步骤处理
     * @param rule
     * @param str
     * @param nextStr
     * @returns {*}
     */
    function handleSpeed(rule, str, nextStr) {
        //操作值
        var i = ~0,
            state = this.state,
            speed = this.speed,
            action = this.action,
            order = this.order[state],
            actionValue = rule[state][action].v,
            l = typeof actionValue === "function" ? actionValue : null,
            actionLength = l || actionValue.length;

        //检查当前节点数据匹配是否结束
        if (this.syntaxNode.end) {
            this.handleStates = order.concat([]);

            //匹对顺序的下一步
            if (handleEntry.apply(this, arguments)) return true;
            //不符合进入语法解析,重置状态
            return this.reset();
        }

        //检查是否函数处理
        if (l) {
            //匹对失败,重新进入下一个状态匹配
            this.match(str, l, nextStr) || againHandle.apply(this, arguments);
        }

        /*检测当前状态是否已完成*/
        //继续匹对
        else if (actionLength > speed) {
            //检测是否匹配
            if (this.match(str, actionValue[speed], nextStr)) {
                //内容添加到当前语法节点内容中
                this.speed = speed + 1;
                //检查当前语法节点是否匹配完毕(标识节点匹配结束)
                this.speed === actionLength && (this.syntaxNode.end = true) && this.endName === state && (this.resState = 'success') && this.success();
            } else {
                againHandle.apply(this, arguments)
            }

        }
    }

    /**
     * 重新匹配当前状态下的语法(用于匹配失败再次匹配)
     * @param rule
     * @param str
     * @param nextStr
     * @returns {boolean|*}
     */
    function againHandle(rule, str, nextStr) {
        //需要重新检测的字符
        var nowStr = this.syntaxNode.content + str + nextStr,
            //表达式字符长度
            slen = nowStr.length - 1,
            i = 0;

        //如果以上没有匹配成功则移除之前创建的语法节点
        this.syntaxTree.pop();

        //重新进入语法匹配
        handleEntry.apply(this, [rule, nowStr.charAt(0), nowStr.charAt(1)]);

        //数据重新匹配
        while (++i < slen) {
            str = nowStr.charAt(i);
            nextStr = nowStr.charAt(i + 1);
            //语法解析 ,并检查当前的状态
            if (this.handle(str, nextStr) === 'fail') return this.reset();
        }
    }

    /**
     * 重置状态 (让解析器重新解析后续代码)
     * @returns {boolean}
     */
    behaviorTree.prototype.reset = function() {
        //行为状态
        this.state = null;

        //操作类型
        this.action = 0;

        //状态进度
        this.speed = 0;

        this.resState = 'fail';

        //等待匹配的状态
        this.handleStates = [this.starName];

        return false;
    };

    /**
     * 匹配失败错误抛出
     * @param msg
     * @param str
     * @returns {Error}
     */
    behaviorTree.prototype.throw = function(msg, str) {
        this.reset();
        return new Error(msg);
    };

    /**
     * 规则匹对
     * @param src
     * @param expression
     * @returns {boolean}
     */
    behaviorTree.prototype.match = function(src, expression, nextStr) {

        var passed = false,
            content = this.syntaxNode.content;

        //内容添加到当前语法节点内容中
        this.syntaxNode.content = content + src;
        switch (typeof expression) {
            case 'string':
                passed = src === expression;
                break;
            case 'function':
                passed = expression.bind(this)(src, this.syntaxNode, nextStr);
                break;
        }
        //匹配不通过则恢复原来的内容
        return passed && (this.resState = 'handle') || (this.syntaxNode.content = content, false);
    };

    /**
     * 成功解析完毕
     */
    behaviorTree.prototype.success = function() {
        treeConvert(this);
    };


    behaviorTree.prototype.watch = function(callback) {
        typeof callback === 'function' && this.watchCallBacks.push(callback);
    };

    behaviorTree.prototype.exec = function(toggle) {
        // this.isTreeConvert||(treeConvert(this,$pageAssign),this.isTreeConvert=true);
        watchSyntaxData(this, toggle);
    };


    /**
     * Created by xiyuan on 16-8-1.
     */
    /**
     *
     * @param behaviorTree
     * @param watchFn
     * @param watchData
     */
    function watchSyntaxData(behaviorTree, toggle) {

        //用来开启是否监控立即执行
        toggle = typeof toggle === "undefined" ? true : !!toggle;

        //对象存储器
        var objectInfoStroage = behaviorTree.objectInfoStroage = behaviorTree.objectInfoStroage || {
                watchFns: behaviorTree.watchCallBacks,
                //当前文本节点下监听集合 {model:$model,key:watchKey}
                $rootListens: [],
                //监听开关
                toggle: true,
                //主任务监听开关
                $toggle: toggle,
                //需要替代的model
                replaceModel: {},
                //语法树
                behaviorTree: behaviorTree,
                //监控的数据
                watchData: behaviorTree.$pageAssign
            },
            //语法节点,并进行数据绑定
            listenDatas = behaviorTree.listenDatas;

        if (listenDatas.length && typeof behaviorTree.$value === 'undefined') {
            //动态监听
            dynamicListen(listenDatas, objectInfoStroage, behaviorTree.evalSyntx);
        } else {
            typeof behaviorTree.$value !== 'undefined' && (objectInfoStroage.toggle = false);
            computations(objectInfoStroage, behaviorTree.evalSyntx);
        }
        //手动销毁数据对象
        objectInfoStroage = listenDatas = null;
    }

    /**
     * 文本节点值的运算
     * @param textNode
     * @param evalSyntx
     * @param listenLen
     * @param parentListen
     */
    function computations(objectInfoStroage, evalSyntx, listenLen, parentListen) {
        //监听未完成则停止运算
        if (listenLen) return;

        var $pageModel = objectInfoStroage.watchData.$pageModel,
            $pageFilter = objectInfoStroage.watchData.$pageFilter;

        //检查是否有上级(用于动态监听)
        if (parentListen && typeof objectInfoStroage.behaviorTree.$value === 'undefined') {
            var modelName,
                modelData,
                isWatch,
                watchRecord = parentListen.watchRecord = parentListen.watchRecord || {},
                watchSyntx = parentListen.watchSyntx,

                //数据提取与计算(主要用于监控)
                watchKey = watchSyntx.replace(/\[([^\/]+)\]/g, function(all, evalStr) {
                    //创建数据副本
                    var $pageModel = {};

                    //数据克隆
                    Object.keys(objectInfoStroage.watchData.$pageModel).forEach(function(modelKey) {
                        var mapVal = objectInfoStroage.watchData.$pageModel[modelKey];
                        $pageModel[modelKey] = {};
                        $pageModel[modelKey].$model = mapVal ? $object.clone(mapVal.$model) : mapVal;
                    });

                    return "['" + eval(evalStr) + "']";
                });

            watchKey = watchKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                modelName = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });

            //从页面总数据模型中获取对应的模型数据
            modelData = $pageModel[modelName];

            //转换常规数据为双向监听(把视图中所有数据转换成双向 与 treeConvert.js中 line 84 相对应)
            if (!(modelData instanceof $modelInterface)) {
                modelData = $MODEL();
                //数据写入
                modelData.write('', $pageModel[modelName]);
                //重新赋值
                $pageModel[modelName] = modelData;
            }

            if (modelData instanceof $modelInterface) {

                //监控回调
                function watchFn() {
                    //判断监听状态
                    objectInfoStroage.toggle && parentListen.computations();
                }

                //移除数据中的'.$model'语法标识
                watchKey = watchKey.replace(/\.\$model\.?/, '');

                //移除之前的动态监听
                //modelData.removeWatch(watchKey, watchFn);

                watchRecord[watchKey] ? isWatch = true : watchRecord[watchKey] = true;

                //当监控的数据模型数据加载完毕后的监控启动.
                modelData.readData(function() {
                    //进行父级运算
                    parentListen.computations();

                    //检查是否已经有监听
                    if (!isWatch) {
                        //数据监听,并触发文本值的计算
                        modelData.watch(watchKey, watchFn);
                    }
                    //手动销毁数据对象
                    watchKey = modelData = watchFn = null;
                })

            } else {
                //未受监控的数据则直接运算
                parentListen.computations();
            }

            //手动销毁数据对象
            $pageModel = $pageFilter = modelName = isWatch = watchRecord = watchSyntx = null;

        } else {
            var value;
            objectInfoStroage.behaviorTree.isValue = true;

            //主任务执行开关
            if (!objectInfoStroage.$toggle) {
                objectInfoStroage.$toggle = true;
                return;
            }
            //在数据解析前关闭当前文本节点下的所有语法监听
            objectInfoStroage.toggle = false;


            (function(pageModel) {
                var $pageModel = {},
                    //获取语法过程中需要替换的数据与监听的Key
                    replaceModelKey = Object.keys(objectInfoStroage.replaceModel);

                pageModel.forEach(function(val, key) {
                    $pageModel[key] = val;
                });

                //检查需要替换的watchKey(主要是避免model数据中有数据,但是监控中的数据确未填充)
                if (replaceModelKey.length) {
                    var sortKey = [],
                        _watchKey,
                        replaceIndex = 0,
                        replaceKey = '__replaceWatchKey__' + Date.now() + '_MODEL_';

                    replaceModelKey.forEach(function(nowWatchKey) {
                        sortKey.push({
                            len: nowWatchKey.length,
                            index: sortKey.length,
                            watchKey: nowWatchKey,
                            val: objectInfoStroage.replaceModel[nowWatchKey]
                        })
                    });

                    //进行数据排序
                    sortKey = sortKey.sort(function(a, b) {
                        return b.len - a.len;
                    });

                    //遍历需要替换的数据
                    sortKey.forEach(function(data) {
                        _watchKey = replaceKey + (replaceIndex++);
                        $pageModel[_watchKey] = data.val;
                        //开始替换语法中的语法字符
                        evalSyntx = evalSyntx.replace(data.watchKey, '$pageModel.' + _watchKey)
                    });
                }

                //运行
                try {
                    value = eval(evalSyntx);
                } catch (e) {
                    value = undefined;
                    // console.log('语法解析错误:' ,e,'---------------')
                }

                objectInfoStroage.behaviorTree.$value = value;

                //赋值给文本节点
                objectInfoStroage.watchFns.forEach(function(fn) {
                    fn(value /*,'yes'*/ );
                });

                //语法解析完毕后开启当前文本节点语法监听
                objectInfoStroage.toggle = true;

                //销毁闭包中的数据对象
                $pageModel = pageModel = value = replaceModelKey = sortKey = _watchKey = replaceIndex = replaceKey = null;

            })($pageModel);

            //销毁数据对象
            $pageModel = $pageFilter = null;
        }
    }

    /**
     * 动态监听
     * @param listenDatas
     */
    function dynamicListen(listenDatas, objectInfoStroage, evalSyntx, parentListen, parentListenLen) {
        var listenLen = listenDatas.length,
            $pageModel = objectInfoStroage.watchData.$pageModel;

        listenDatas.forEach(function(listenData) {
            var watchKey,
                modelName,
                modelData,
                listenEvalSyntx = listenData;

            if (typeof listenData === 'object') {

                //注入触发事件
                listenData.computations = function() {
                    listenLen && listenLen--;
                    computations(objectInfoStroage, evalSyntx, listenLen, parentListen, parentListenLen);

                };

                //回调处理子级监控依赖
                dynamicListen(listenData.dep, objectInfoStroage, evalSyntx, listenData, listenLen);
                return
            } else {
                listenLen--;
            }

            watchKey = listenData.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                modelName = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });

            //从页面总数据模型中获取对应的模型数据
            modelData = $pageModel[modelName];

            //防止获取到不存在的数据（创建一个数据监听）
            if (typeof modelData === 'undefined') {
                modelData = $MODEL();

                //转换常规数据为双向监听(把视图中所有数据转换成双向 与 treeConvert.js中 line 84 相对应)
            } else if (!(modelData instanceof $modelInterface)) {
                modelData = $MODEL();
                //数据写入
                modelData.write('', $pageModel[modelName]);
            }

            //重新赋值
            $pageModel[modelName] === modelData || ($pageModel[modelName] = modelData);

            if (modelData instanceof $modelInterface) {

                //监听记录
                listenLen++;

                //移除数据中的'.$model'语法标识
                watchKey = watchKey.replace(/\.\$model\.?/, '');

                //利用闭包来储存相关数据
                (function(modelData, watchKey) {

                    //防止 model read 与watch同时执行
                    var nowWatchKey = '$pageModel.' + listenEvalSyntx;

                    //当监控的数据模型数据加载完毕后的监控启动.
                    modelData.readData(function($model) {
                        listenLen--;
                        //语法试运行(主要检查数据是否全部填充)
                        try {
                            eval(nowWatchKey);
                        } catch (e) {
                            //记录需要替换的key
                            objectInfoStroage.replaceModel[nowWatchKey] = undefined;
                        }

                        //执行语法运算(检查是否顶层数据)
                        computations(objectInfoStroage, evalSyntx, listenLen, parentListen, parentListenLen);

                        //数据监听,并触发文本值的计算
                        modelData.watch(watchKey, function(val) {

                            //语法试运行(主要检查数据是否全部填充)
                            try {
                                eval(nowWatchKey);
                                delete objectInfoStroage.replaceModel[nowWatchKey];
                            } catch (e) {
                                //记录需要替换的key
                                objectInfoStroage.replaceModel[nowWatchKey] = undefined;
                            }
                            //判断监听状态
                            objectInfoStroage.toggle && computations(objectInfoStroage, evalSyntx, listenLen, parentListen, parentListenLen);
                        });

                    });

                })(modelData, watchKey)

            } else {
                computations(objectInfoStroage, evalSyntx, listenLen, parentListen, parentListenLen);
            }


        });

    }

    /**
     * 设置多层级数据
     * @param model
     * @param modelKey
     * @param writeKey
     * @param data
     */
    function setLevelData(model, modelKey, writeKey, data) {
        if (!writeKey) {
            model[modelKey] = data;
            return;
        }

        var property;
        //提取key字符中对象所属的第一个属性
        writeKey = writeKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
            //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
            property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
            return '';
        });
        //检查对象
        if (typeof model[modelKey] !== 'object' || model[modelKey] === null) {
            model[modelKey] = {};
        }
        setLevelData(model[modelKey], property, writeKey, data);
        property = null;
    };


    /**
     * Created by xiyuan on 16-7-14.
     */

    /*数组解析*/
    function arrayAnalytic($pageAssign, fn) {
        var arrayTree = new behaviorTree($pageAssign, function() {

            //规则重写
            this.rule.start = [{
                v: ['['],
                type: 'start'
            }];

            this.rule.end = [{
                v: [']'],
                type: 'end'
            }];

            //参数分割
            this.rule.split = [{
                v: [','],
                type: 'split'
            }];

            //行为顺序
            this.order = {
                //进入语法解析状态
                start: [
                    'selfAssignment',
                    'decorate',
                    'variable',
                    'end'
                ],
                //自赋值/自运算
                selfAssignment: [
                    'variable',
                    'arithmetic',
                    'deviation',
                    'end'
                ],
                //修饰符号
                decorate: [
                    'variable',
                    'selfAssignment',
                    'decorate'
                ],
                //变量 数据
                variable: [
                    'end',
                    'selfAssignment',
                    'arithmetic',
                    'split',
                    'deviation',
                    'end'
                ],
                //运算 (常规 加减乘除 与或非 ~ 三元运算 以及 数据过滤)
                arithmetic: [
                    'decorate',
                    'variable'
                ],
                //变异的运算
                deviation: [
                    'deviation',
                    'arithmetic',
                    'end'
                ],
                split: [
                    'decorate',
                    'variable',
                    'start',
                    'end'
                ],
                end: [
                    'start'
                ]
            };

        });

        //注入对象修改 (用于修改原有的对象属性或方法)
        typeof fn === 'function' && fn.bind(arrayTree)(arrayTree);

        return arrayTree;
    };


    /**
     * Created by xiyuan on 16-7-8.
     */

    /**
     * 语法树
     * @param parentNode
     * @param location
     */
    function syntaxTree(parentNode, location) {
        //父节点
        this.parentNode = parentNode;
        //父节点中的位置
        this.location = location;
        //语法节点队列
        this.queue = [];
        //语法状态
        this.state = 0;
        //语法类型
        this.type = null;
        //语法动作
        this.action = null;
        //当前语法类型节点
        this.syntaxNode = null;
        //当前节点内容
        this.content = '';
        //判断当前语法节点是否结束
        this.end = null;
        //节点处理信息(通常提供给函数处理)
        this.handleInfo = null;
        //标记是否是源值 如运算后的值与字符串
        this.isSourceVal = false;
    };

    //语法处理
    syntaxTree.prototype.handle = function() {

    };

    //语法处理进度
    syntaxTree.prototype.speed = function(str) {

    };

    //添加语法节点
    syntaxTree.prototype.add = function(state, type, action) {
        var syntaxNode = new syntaxTree(this, this.queue.length);
        this.queue.push(syntaxNode);
        //赋值
        state && (syntaxNode.state = state) && (syntaxNode.type = type) && (syntaxNode.action = action);
        return syntaxNode;
    };

    //获取上一个语法节点
    syntaxTree.prototype.prev = function() {
        return this.parentNode.queue[this.location - 1];
    };

    //删除最后一个语法节点
    syntaxTree.prototype.pop = function() {
        return this.queue.pop();
    };


    /**
     * Created by xiyuan on 16-7-18.
     */

    /**
     * 语法树转换
     * @param behaviorTree
     * @returns {*}
     */
    function treeConvert(behaviorTree) {
        //转化正则字符
        function convertRegExp(str) {
            return str.replace(/[-.*+?^${}()|[\]\/\\]/g, '\\$&');
        }

        //数据监听容器
        var listenDatas = [],
            $pageAssign = behaviorTree.$pageAssign,
            $pageModel = $pageAssign.$pageModel,
            //语法树
            syntaxTree = behaviorTree.syntaxTree,
            //语法队列
            queue = syntaxTree.queue,
            //语法的大分类
            state,
            //语法小类型
            type,
            //语法内容
            content,
            //处理的信息
            handleInfo,
            //语法节点
            syntxNode,
            //队列索引
            qi = ~0,
            //队列长度
            ql = queue.length,
            //上一步变量语法
            lastVarSyntx = '',
            //转化后的语法解析 (备用动态运算)
            evalSyntx = '',
            //定义的变量上下文字符
            $assignVar = behaviorTree.assignVar || '$pageModel',
            //过滤器上下文字符
            $filterVar = behaviorTree.filterVar || '$pageFilter';

        while (++qi < ql) {
            syntxNode = queue[qi];
            type = syntxNode.type;
            content = syntxNode.content;
            handleInfo = syntxNode.handleInfo;

            switch (syntxNode.state) {
                //修饰符
                case 'decorate':
                    lastVarSyntx += content;
                    break;
                    //自运算
                case 'selfAssignment':
                    if (handleInfo.loaction === "prev") {
                        //前置
                        lastVarSyntx += content;
                    } else {
                        //后置
                        evalSyntx += content;
                        lastVarSyntx = '';
                    }

                    break;
                    //变量
                case 'variable':
                    switch (type) {
                        case "object":
                            var i = 0,
                                element,
                                _decorate = lastVarSyntx,
                                isContainObject = false,
                                level = handleInfo.level,
                                nowLevel = handleInfo.nowLevel;

                            switch (typeof(element = level[i])) {
                                case 'string':
                                    //检查并拼装语法(全部转换为双向数据 与 watchSyntaxData.js line 187  相对应 )
                                    // lastVarSyntx += $assignVar + '.' + element + ($pageModel[element] instanceof $modelInterface || typeof $pageModel[element] === 'undefined' ? '.$model' : '');
                                    lastVarSyntx += $assignVar + '.' + element + ($pageModel[element] instanceof $modelInterface || typeof $pageModel[element] === 'undefined' ? '.$model' : '.$model');
                                    break;
                                case 'object':
                                    //检查子级节点中是否有需要监听的数据
                                    element.listenDatas.length && (isContainObject = true);
                                    //添加到监听数据中
                                    listenDatas = listenDatas.concat(element.listenDatas);


                                    //添加子级语法字符
                                    switch (element.mode) {
                                        case 'block':
                                            lastVarSyntx += '[' + element.evalSyntx + ']';
                                            break;
                                        case 'blockVal':
                                        case 'blockFn':
                                            lastVarSyntx += '(' + element.evalSyntx + ')';
                                            break;
                                    }
                                    break;
                            }

                            //变量组合内部
                            while (++i <= nowLevel) {
                                switch (typeof(element = level[i])) {
                                    case 'string':
                                        lastVarSyntx += '.' + element;
                                        break;
                                    case 'object':
                                        //检查子级节点中是否有需要监听的数据
                                        element.listenDatas.length && (isContainObject = true);
                                        //添加到监听数据中
                                        listenDatas = listenDatas.concat(element.listenDatas);
                                        //添加子级语法字符
                                        switch (element.mode) {
                                            case 'block':
                                                lastVarSyntx += '[' + element.evalSyntx + ']';
                                                break;
                                            case 'blockVal':
                                            case 'blockFn':
                                                lastVarSyntx += '(' + element.evalSyntx + ')';
                                                break;
                                        }
                                        break;
                                }
                            }

                            //检查当期语法树是否过滤器的参数与是否$,如果是则忽略不加入监控  并且不能是代码块
                            if (!(nowLevel === 0 && behaviorTree.distinction === 'filterArg' && level[0] === '$') /*&& !(handleInfo.mode === 'blockVal' || handleInfo.mode === 'blockFn')*/ ) {

                                //移除监控变量字符串中的修饰符与顶级对象名称前缀(主要用来获取model)
                                var listenData = (_decorate ? lastVarSyntx.replace(_decorate, '') : lastVarSyntx).match(new RegExp('^' + convertRegExp($assignVar + '.') + '([^\(]+)'));
                                if (listenData && (listenData = listenData[1])) {

                                    //检查是否包含子级监控
                                    if (isContainObject) {
                                        //拼装成复杂的多重动态监听
                                        listenDatas = [{
                                            watchSyntx: listenData,
                                            dep: listenDatas
                                        }]
                                    } else {

                                        //移除语法上的修饰符,并添加到监听数据中
                                        listenDatas.push(listenData);
                                    }
                                }
                            }
                            break;
                        case 'string':
                        case 'number':
                            lastVarSyntx += content;
                            break;
                    }
                    //语法拼接
                    evalSyntx += lastVarSyntx;

                    break;
                    //运算符号
                case 'arithmetic':
                    evalSyntx += content;
                    lastVarSyntx = '';
                    break;
                    //数据过滤
                case 'deviation':
                    switch (type) {
                        case 'filter':
                            //语法复位
                            evalSyntx = evalSyntx.replace(new RegExp(convertRegExp(lastVarSyntx) + '$'), '');

                            //过滤器语法调整
                            lastVarSyntx = $filterVar + '["' + handleInfo.name + '"](' + function() {
                                if (handleInfo.arrayAnalytic) {
                                    //替换过滤器中的$变量占位符
                                    lastVarSyntx = handleInfo.arrayAnalytic.evalSyntx.replace(new RegExp(convertRegExp($assignVar + '.$.$model') /*+ '(,|$)'*/ ), lastVarSyntx);
                                }
                                return lastVarSyntx;
                            }() + ')';

                            //语法组合
                            evalSyntx += lastVarSyntx;
                            //添加到监听数据中
                            handleInfo.arrayAnalytic && handleInfo.arrayAnalytic.listenDatas.forEach(function(value) {
                                value !== '$' && listenDatas.push(value);
                            });

                            break;
                    }
                    break;
                    //分割节点 ，
                case 'split':
                    switch (type) {
                        case 'split':
                            evalSyntx += content;
                            lastVarSyntx = '';
                            break;
                    }
                    break;
            }
        }

        //组合好后语法字符写入语法树
        behaviorTree.evalSyntx = evalSyntx;

        //监听的数据
        behaviorTree.listenDatas = listenDatas;

        //对象销毁
        convertRegExp = listenDatas = $pageAssign = $pageModel = syntaxTree = queue = state = type = content = handleInfo = syntxNode = qi = ql = lastVarSyntx = evalSyntx = $assignVar = $filterVar = null;

        return behaviorTree
    };


    /**
     * Created by xiyuan on 16-7-26.
     */
    /**
     * 语法解析对外提供的方法
     * @param expressionString
     * @param dataObject
     * @returns {expressionInterface}
     */
    function $expression($pageAssign, expressionString) {
        return new expressionInterface($pageAssign, expressionString);
    };

    /**
     * 语法解析接口
     */
    function expressionInterface($pageAssign, expressionString) {

        this.isValue = false;

        expressionString = '{{' + expressionString + '}}';
        //表达式行为树 / 表达式解析
        var expressionTree = this.expressionTree = new behaviorTree($pageAssign, function() {
                /*this.assignVar = '$directiveData';
                 this.filterVar = '$directiveFilter';*/
            }),
            //表达式字符长度
            slen = expressionString.length,
            i = ~0,
            str,
            nextStr;

        expression:
            while (++i < slen) {
                str = expressionString.charAt(i);
                nextStr = expressionString.charAt(i + 1);

                //语法解析 ,并检查当前的状态
                switch (expressionTree.handle(str, nextStr)) {
                    case 'fail':
                        this.state = 'fail';
                        return false;
                    case 'success':
                        //状态
                        this.state = expressionTree.resState;
                        //检查是匹配成功
                        break expression;
                    case 'handle':
                        //正常匹配中
                        break;
                }
            }

        //对象销毁
        expressionTree = slen = i = str = nextStr = null;
    }

    /**
     * 表达式执行,并在回调方法中返回运行后的值
     * @param fn
     */
    expressionInterface.prototype.watch = function(fn) {
        this.expressionTree.watch(function(data) {
            if (typeof data === 'undefined' && !this.isValue && (this.isValue = true)) return;
            fn.apply(this, arguments);
        }.bind(this))

    };

    expressionInterface.prototype.exec = function(toggle) {
        this.expressionTree.exec(toggle)
    };


    /**
     * Created by xiyuan on 16-5-18.
     */
    /**
     * Created by xiyuan on 16-5-18.
     */
    function modelImage(info) {

        //隐藏定义存储数据
        def(this, '__storage__');
        var storage = this.__storage__ = {
            readData: [],
            methods: {},
            watchDep: new watchDep(),
            $model: null,
            watchOn: true,
            __info__: info
        };
        this.$model = null;

        //监听
        Object.defineProperty(this, '$model', {
            enumerable: false,
            configurable: true,
            set: function(newVal) {

                //数据依赖源继承(检查是否数据中是否存在继承源,如该有则沿用之前的)
                if (newVal && newVal.__dep__) {
                    storage.watchDep = newVal.__dep__;
                    storage.watchOn = false;
                } else {
                    storage.watchDep.$data = newVal;
                    //依赖数据关联
                    storage.watchDep.update({
                        parentData: this,
                        key: '$model'
                    });
                }

                if (storage.watchOn) {
                    storage.watchOn = false;
                    //数据读取初始化
                    readDataInit.bind(this)(storage, newVal);
                }

            }.bind(this),
            get: function() {
                return storage.watchDep.$data;
            }
        });

        /**
         * 数据读取初始化
         * @param storage
         */
        function readDataInit(storage, modelData) {
            var loadDatas = storage.readData;
            //执行$model加载完后的回调
            loadDatas.forEach(function(fn) {
                fn(modelData);
            });
        }
    }

    /**
     * 获取另一个model
     * @param modelPath
     * @returns {$modelInterface}
     */
    modelImage.prototype.model = function(modelPath) {
        var modelObj = new modelImage(this);
        return controllerImage.prototype.model.call(modelObj, modelPath);
    };

    /**
     * $model数据加载后回调
     * @param fn
     */
    modelImage.prototype.readData = function(fn) {
        this.__storage__.readData.push(fn);
        //检查$model数据是否加载
        if (!this.__storage__.watchOn) {
            fn.bind(this)(this.$model);
        }
        return this;
    };

    /**
     * 数据监控
     * @param watchKey
     * @param fn
     */
    modelImage.prototype.watch = function(watchKey, fn, isRead) {
        this.__storage__.watchDep.add(watchKey, fn, this, isRead);
        return this;
    };

    /**
     * 移除数据监控
     * @param watchKey
     * @param fn
     */
    modelImage.prototype.removeWatch = function(watchKey, fn) {
        this.__storage__.watchDep.remove(watchKey, fn);
        return this;
    };

    /**
     * 启动数据监听
     * @param watchKey
     */
    modelImage.prototype.startWatch = function(watchKey) {
        this.__storage__.watchDep.start(watchKey);
    };

    /**
     * 临时关闭数据监听
     * @param watchKey
     */
    modelImage.prototype.stopWatch = function(watchKey) {
        this.__storage__.watchDep.stop(watchKey);
    };

    /**
     * 自定义提供方法
     * @param methodName
     * @param fn
     */
    modelImage.prototype.method = function(methodName, fn) {
        this.__storage__.methods[methodName] = fn;
    };

    /**
     * model数据写入
     * @param key
     * @param data
     */
    modelImage.prototype.write = function(key, data) {
        switch (arguments.length) {
            case 0:
                return;
            case 1:
                data = key;
                key = '';
                break;
        }

        (function getLevel(model, modelKey, writeKey) {
            if (!writeKey) {
                model[modelKey] = data;
                return;
            }

            var property;
            //提取key字符中对象所属的第一个属性
            writeKey = writeKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });
            //检查对象
            if (typeof model[modelKey] !== 'object' || model[modelKey] === null) {
                model[modelKey] = {};
                //数据更新
                model.inspect();
            }
            getLevel(model[modelKey], property, writeKey);

        })(this, '$model', key)

    };

    /**
     * model数据获取
     * @param key
     * @param data
     */
    modelImage.prototype.get = function(key) {

        return function getLevel(model, modelKey, writeKey) {
            if (!writeKey) {
                return model[modelKey];
            }

            var property;
            //提取key字符中对象所属的第一个属性
            writeKey = writeKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });


            //检查对象
            if (typeof model[modelKey] !== 'object' || model[modelKey] === null) {
                return model[modelKey];
            }

            return getLevel(model[modelKey], property, writeKey);
        }(this, '$model', key);

    };

    /**
     * 服务请求
     */
    modelImage.prototype.server = $FRAME.server = serverVm;

    /**
     * 数据库
     * @type {$DB}
     */
    modelImage.prototype.db = function(dbName, version, description, dbSize) {
        return new $DB(dbName, version, description, dbSize)
    };

    modelImage.prototype.table = function(tableName) {
        if (!$configStroage.defaultDB) {
            $configStroage.defaultDBName = 'defaultDB';
            $configStroage.defaultDB = new $DB('defaultDB');
        }
        return $configStroage.defaultDB.table(tableName);
    };

    modelImage.prototype.createTable = function(tableName, struct) {
        if (!$configStroage.defaultDB) {
            $configStroage.defaultDBName = 'defaultDB';
            $configStroage.defaultDB = new $DB('defaultDB');
        }
        return $configStroage.defaultDB.create(tableName, struct);
    };


    /**
     * indexedDB数据库
     * @type {$DB}
     */
    modelImage.prototype.noSql = function(dbName, version) {
        return new noSql(dbName, version)
    };

    modelImage.prototype.noSqlTable = function(tableName) {
        return new noSql($configStroage.defaultNoSqlName || 'defaultDB').table(tableName);
    };

    modelImage.prototype.createNoSqlTable = function(tableName, struct) {
        return new noSql($configStroage.defaultNoSqlName || 'defaultDB').create(tableName, struct);
    };


    /**
     * 监控依赖
     */
    function watchDep() {
        //监控挂载
        this.watchs = [];
        //监控执行计数
        this.watchExecCount = 0;
        //下级监控
        this.child = {};
        //挂载的数据
        this.$data = null;
        //数据备份
        this.$oldData = null;
        //以前的源数据
        this.sourceData = null;
        //父级依赖
        this.$rootDep = null;
        //监控开关 (关闭后不会触发挂载的回调)
        this.watchToggle = true;
        //变化信息
        this.changeInfo = null;
        //隐藏$rootDep数据
        def(this, '$rootDep');
    }

    /**
     * 添加当前数据的监控
     * @param watchKey
     * @param fn
     * @returns {watchDep}
     */
    watchDep.prototype.add = function(watchKey, fn, scope, isRead) {
        if (!watchKey) {
            this.watchs.push({
                fn: fn,
                scope: scope
            });

            //检查监听计数
            isRead && this.watchExecCount && ++this.watchExecCount && fn(this.$data, this.changeInfo);

            return this;
        }

        var watchChild = this.child,
            $data = this.$data,
            tmpData,
            property,
            watchData,
            //提取key字符中对象所属的第一个属性
            watchKey = watchKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });

        //把key存入下级监控中
        if (!(watchData = watchChild[property])) {
            //创建新的子级监控节点
            watchData = watchChild[property] = new watchDep();

            //记录父级依赖
            watchData.$rootDep = this;
        }

        //赋值
        watchData.update({
            parentData: typeof $data === 'object' && $data !== null ? $data : (tmpData = {}, tmpData[property] = null, tmpData),
            key: property
        });

        //继续挂载子级监控
        watchData.add(watchKey, fn, scope, isRead);

    };

    /**
     * 移除当前数据监控点
     * @param watchKey
     * @param fn
     */
    watchDep.prototype.remove = function(watchKey, fn) {
        if (!watchKey) {
            if (fn) {
                //匹配删除
                this.watchs.forEach(function(value, index) {
                    if (fn.toString() == value.toString()) {
                        this.watchs.splice(index, 1);
                        return this;
                    }
                }.bind(this));
            } else {
                //删除所有
                this.watchs = [];
            }

            return this;
        }

        var watchChild = this.child,
            property,
            watchData,
            //提取key字符中对象所属的第一个属性
            watchKey = watchKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                //把key存入下级监控中
                watchData = watchChild[property];
                return '';
            });

        //继续挂载子级监控
        watchData && watchData.remove(watchKey, fn);
    };


    /**
     * 数据监听开关
     * @param watchKey
     * @param toggle
     * @returns {watchToggle}
     */
    function watchToggle(watchKey, toggle) {
        toggle = !!toggle;
        if (!watchKey) {
            this.watchToggle = toggle;
            return this;
        }

        var watchChild = this.child,
            property,
            watchData,
            //提取key字符中对象所属的第一个属性
            watchKey = watchKey.replace(/^\[([^.\]]+)\]|^\.?([^.\[\]]+)/, function(str, arrKey, objKey) {
                //匹配提取[key]或.key 这两种形式的key 并去除key外部的单引号或双引号
                property = (arrKey || objKey).match(/^(['"]?)([\s\S]+)\1$/).pop();
                return '';
            });


        //把key存入下级监控中
        if (!(watchData = watchChild[property])) {
            //创建新的子级监控节点
            watchData = watchChild[property] = new watchDep();
            //记录父级依赖
            watchData.$rootDep = this;
        }

        //继续挂载子级监控 (开/关)
        watchData[toggle ? 'start' : 'stop'](watchKey);
    };

    /**
     * 开启数据监听
     * @param watchKey
     * @returns {watchDep}
     */
    watchDep.prototype.start = function(watchKey) {
        return watchToggle.bind(this)(watchKey, true)
    };

    /**
     * 关闭数据监听
     * @param watchKey
     */
    watchDep.prototype.stop = function(watchKey) {
        return watchToggle.bind(this)(watchKey, false);
    };

    /**
     * 更新当前挂载的数据
     * @param bindData
     */
    watchDep.prototype.update = function(bindData) {
        try {

            //检查是否常规属性
            if (!bindData.parentData.hasOwnProperty(bindData.key)) {
                // bindData.parentData[bindData.key] = undefined;
            }

            //改变数据实际值
            this.$data = bindData.parentData[bindData.key];

            //数据监测
            Object.defineProperty(bindData.parentData, bindData.key, {
                enumerable: true,
                configurable: true,
                set: function(newData) {
                    var tmpData,
                        isChange,
                        childs = this.child,
                        sourceData = this.sourceData;

                    //赋值
                    this.$data = newData;

                    //触发监控,数据比对(定位到数据差异位置,并避免同样数据重新渲染)
                    isChange = !this.diff(newData, this.$oldData);

                    //检查数据是否同源,否则解除之前数据的绑定
                    if (this.sourceData !== newData && this.sourceData && this.sourceData.__dep__) {
                        var oldDep = this.sourceData.__dep__;

                        //解除旧数据的绑定
                        Object.keys(oldDep.child).forEach(function(watchKey) {

                            //解除数据绑定监听
                            Object.defineProperty(this.sourceData, watchKey, {
                                writable: true,
                                enumerable: true,
                                configurable: true,
                                value: this.sourceData[watchKey]
                            });

                        }.bind(this));

                        delete this.sourceData.__dep__;
                    }

                    //广播更新下级挂载的数据
                    Object.keys(childs).forEach(function(key) {
                        childs[key].update({
                            parentData: typeof newData === 'object' && newData !== null ? newData : (tmpData = {}, tmpData[key] = null, tmpData),
                            key: key
                        });
                    });

                    //数据改变则通知绑定更新
                    isChange && this.trigger();

                    //源数据
                    this.sourceData = newData;

                    //记录绑定的数据
                    this.bindData = bindData;

                }.bind(this),
                get: function() {
                    return this.$data;
                }.bind(this)
            });

            // console.log(this.$data)

            //获取更新方法
            this.getOwnPropertyDescriptorSet = Object.getOwnPropertyDescriptor(bindData.parentData, bindData.key).set.bind(this);

            //触发子级更新
            this.getOwnPropertyDescriptorSet(bindData.parentData[bindData.key]);
        } catch (e) {}

    };

    /**
     * 数据对比
     * @param newData
     * @param oldData
     * @returns {boolean}
     */
    watchDep.prototype.diff = function(newData, oldData) {

        var $oldData,
            isPass = false,
            newType = getType(newData),
            oldType = getType(oldData),
            emptyType = 'Undefined,Null',

            //用来记录需要新增的新数据与需要删除的旧数据
            addDatas = [],
            changeDatas = [],
            removeDatas = [];

        //检查类型是否一致
        if (newType === oldType) {

            switch (newType) {
                case 'Object':
                    var newKeys = Object.keys(newData),
                        oldKeys = Object.keys(oldData),
                        _oldKeys = [].concat(oldKeys);

                    //检查数据键值是否一致

                    if (!(isPass = String(newKeys.sort()) === String(oldKeys.sort()))) {

                        //数据遍历检查
                        newKeys.forEach(function(key, index) {

                            //检查是否是新增的数据
                            if (!(key in oldData)) {
                                //新增的属性
                                addDatas.push({
                                    index: index,
                                    data: newData[key]
                                })
                            }

                            //排除已存在的数据
                            var oldIndex = oldKeys.in(key);
                            if (oldIndex !== -1) {
                                oldKeys.splice(oldIndex, 1);
                            }

                        });

                        //遍历过时的数据
                        oldKeys.forEach(function(key) {
                            removeDatas.push({
                                index: _oldKeys.in(key),
                                data: oldData[key]
                            })
                        })

                    }

                    break;
                case 'Array':
                    var index,
                        newLen = newData.length,
                        oldLen = oldData.length,
                        size = newLen - oldLen;

                    //检查数据源是否一致
                    if (this.sourceData === newData) {
                        var tmpIndex,
                            existKeys = {},
                            changeFlg = false;

                        //对数据进行分类
                        newData.forEach(function(val, index) {
                            if ((tmpIndex = oldData.in(val)) === -1) {
                                addDatas.push({
                                    index: index,
                                    data: val
                                })
                            } else {
                                changeDatas.push({
                                    index: index,
                                    oldIndex: tmpIndex,
                                    data: val
                                });

                                index !== tmpIndex && (changeFlg = true);

                                existKeys[tmpIndex] = true;
                            }

                        });

                        //提取需要移除的旧数据
                        oldData.forEach(function(val, index) {
                            existKeys[index] || removeDatas.push({
                                index: index,
                                data: val
                            })
                        });

                        isPass = newLen === oldLen && !changeFlg && addDatas.length === 0 && removeDatas.length === 0

                    } else {

                        switch (true) {
                            case size > 0:
                                index = oldLen - 1;
                                while (++index < newLen) {
                                    addDatas.push({
                                        index: index,
                                        data: newData[index]
                                    })
                                }

                                break;
                            case size < 0:
                                index = oldLen + size - 1;

                                while (++index < oldLen) {
                                    removeDatas.push({
                                        index: index,
                                        data: oldData[index]
                                    })
                                }
                                break
                        }

                    }

                    break;
                default:
                    if (newData === oldData) {
                        isPass = true;
                    }

            }

            //检查两个数据是否都是空
        } else if (emptyType.indexOf(newType) > -1 && emptyType.indexOf(oldType) > -1 && newType === oldType) {
            isPass = true;
        }

        //数据备份
        switch (newType) {
            case 'Object':

                $oldData = {};
                Object.keys(newData).forEach(function(key) {
                    $oldData[key] = newData[key];
                });

                def(newData, '__dep__', this);
                // def(newData, '__dep__', typeof oldData === "undefined" && newData && this.$rootDep ?this.$rootDep.child[this.bindData.key]:this);

                __inspect__keys.forEach(function(key) {
                    def(newData.__proto__, key, __inspect__[key]);
                });

                break;
            case 'Array':

                $oldData = [].concat(newData);

                def(newData, '__dep__', this);
                // def(newData, '__dep__', typeof oldData === "undefined" && newData && this.$rootDep ?this.$rootDep.child[this.bindData.key]:this);

                arrayMethodKeys.forEach(function(key) {
                    def(newData.__proto__, key, arrayMethods[key]);
                });

                break;
        }

        //数据备份
        this.$oldData = $oldData || newData;

        //数据更改信息
        isPass || (this.changeInfo = {
            //数据类型
            oldType: oldType,
            newType: newType,
            //数据
            oldData: oldData,
            newData: newData,
            //源数据
            sourceData: this.sourceData,
            //数据新增与删除
            addDatas: addDatas,
            changeDatas: changeDatas,
            removeDatas: removeDatas

        });

        return isPass;

    };

    /**
     * 触发当前挂载监听
     */
    watchDep.prototype.trigger = function() {
        //检查是否关闭监控
        if (!this.watchToggle) return false;
        //计数
        this.watchExecCount++;
        //遍历触发挂载的回调
        this.watchs.forEach(function(watch) {
            watch.fn.bind(watch)(this.$data, this.changeInfo);
        }.bind(this));
        return true;
    };

    /**
     * 销毁监听数据
     */
    watchDep.prototype.destroy = function() {


        Object.defineProperty('', '', {
            configurable: true,
            enumerable: true,
            value: undefined,
            writable: true
        })

        //数据监测
        Object.defineProperty(bindData.parentData, bindData.key, {
            enumerable: true,
            configurable: true,
            set: function(newData) {
                var tmpData,
                    isChange,
                    childs = this.child,
                    sourceData = this.sourceData;

                //赋值
                this.$data = newData;

                //触发监控,数据比对(定位到数据差异位置,并避免同样数据重新渲染)
                isChange = !this.diff(newData, this.$oldData);

                //检查数据是否同源,否则解除之前数据的绑定
                if (this.sourceData !== newData && this.sourceData && this.sourceData.__dep__) {
                    var oldDep = this.sourceData.__dep__;

                    //解除旧数据的绑定
                    Object.keys(oldDep.child).forEach(function(watchKey) {

                        //解除数据绑定监听
                        Object.defineProperty(this.sourceData, watchKey, {
                            writable: true,
                            enumerable: true,
                            configurable: true,
                            value: this.sourceData[watchKey]
                        });

                    }.bind(this));

                    delete this.sourceData.__dep__;
                }

                //广播更新下级挂载的数据
                Object.keys(childs).forEach(function(key) {
                    childs[key].update({
                        parentData: typeof newData === 'object' && newData !== null ? newData : (tmpData = {}, tmpData[key] = null, tmpData),
                        key: key
                    });
                });

                //数据改变则通知绑定更新
                isChange && this.trigger();

                //源数据
                this.sourceData = newData;

                //记录绑定的数据
                this.bindData = bindData;

            }.bind(this),
            get: function() {
                return this.$data;
            }.bind(this)
        });


        return true;
    };

    /**
     * 数据属性设置
     * @param obj
     * @param key
     */
    function def(obj, key, val, enumerable) {

        var conf = {
            writable: true,
            configurable: true,
            enumerable: !!enumerable
        };

        typeof val !== 'undefined' && (conf['value'] = val);

        Object.defineProperty(obj, key, conf);
    }

    /**
     * 获取数据类型
     * @param data
     * @returns {*}
     */
    function getType(data) {
        return {}.toString.call(data).match(/object\s+(\w*)/)[1]
    }


    /**
     * 用来监听数组的操作
     * @type {any}
     */
    var arrayProto = Array.prototype,
        arrayMethods = {},
        arrayMethodKeys = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse', 'inspect'];

    arrayMethodKeys.forEach(function(method) {

        //记录原始原型
        var original = arrayProto[method];

        def(arrayMethods, method, function() {

            var dep = this.__dep__ || {},
                bindData = dep.bindData,
                args = [].slice.call(arguments),
                result = original && original.apply(this, args);

            //通知更新
            if (bindData) {
                bindData.parentData[bindData.key] = this;
                // dep.update(bindData);
            }

            return original ? result : this;
        });
    });

    var __inspect__ = Object.create({}),
        __inspect__keys = ['inspect', 'addItem', 'removeItem'];

    __inspect__keys.forEach(function(method) {
        def(__inspect__, method, function() {

            var arg1 = arguments[0],
                arg2 = arguments[1];
            switch (method) {
                case 'addItem':
                    typeof arg1 === "undefined" || (this[arg1] = arg2);
                    break;
                case 'removeItem':
                    typeof arg1 === "undefined" || (delete this[arg1]);
                    break;
            }

            var dep = this.__dep__ || {},
                bindData = dep.bindData;

            //通知更新
            if (bindData) {
                bindData.parentData[bindData.key] = this;
                // dep.update(bindData);
            }

            return this;
        });
    });


    /**
     * Created by xiyuan on 16-5-18.
     */
    function modelVm(modelPath, $referer) {
        // console.log(modelPath, $referer)
        //实例化回调
        var modelObj,
            callbackFn,
            initCallbackFn,
            modelCode,
            This = {
                realPath: '',
                pathSlice: ''
            },
            includeModel = [],
            modelSource,
            $modulePath = $referer ? $referer.__storage__.__info__.modulePath : '';

        //路径转换(比对配置中的路径)
        function pathToUrl(path) {
            var $src = $configStroage.pathList.src,
                paths = $src.paths,
                sort = $configStroage.pathList.maps.sort,
                sortList = $configStroage.pathList.maps.list,
                key, value, i, l, $i, $l, $value, tmpValue, rflag;

            //检查是否匹配到path路径
            key = paths[path] || path;
            i = ~0;
            l = sort.length;

            //路径替换
            maps:
                while (++i < l) {
                    value = sortList[sort[i]];
                    $i = ~0;
                    $l = value.length;
                    while (++$i < $l) {
                        $value = value[$i];
                        //进行map匹对
                        if (key.match($value.regexp) && ((tmpValue = key.replace($value.regexp, '')) === '' || tmpValue.indexOf('/') === 0)) {
                            key = $value.value + tmpValue;
                            rflag = true;
                            break maps;
                        }
                    }

                }

            return key;

        }

        //执行Model处理(处理依赖的model与工具包)
        function handleExec(modelCode, modelObj, includeModel, callback) {
            var i = ~0,
                l = includeModel.length,
                modelName,
                packages = [],
                packagePath,
                packagesFlag = [];

            callback = typeof callback === "function" ? callback : function() {};

            while (++i < l) {
                modelName = includeModel[i];
                packagePath = modelName.replace(/^\$:/, '');
                //判断是否js模块
                if (packagePath !== modelName) {
                    packagesFlag.push(i);
                    packagePath = packagePath.indexOf('@') ? packagePath : pathToUrl($modulePath) + '/' + packagePath.slice(1);
                    packages.push(packagePath);
                } else {
                    includeModel[i] = controllerImage.prototype.model.call(modelObj, modelName);
                }
            }
            //数据模型执行
            if (packages.length) {

                //添加包依赖的接收函数
                packages.push(function() {
                    var arg = arguments;
                    packagesFlag.forEach(function(key, index) {
                        includeModel[key] = arg[index];
                    });

                    modelCode.apply(modelObj, includeModel);
                    callback(modelCode)
                });

                //执行包依赖加载
                $packages.apply(this, packages);
            } else {
                modelCode.apply(modelObj, includeModel);
                callback(modelCode)
            }
        }


        //检查(内建/数据/外部)模型
        if (typeof modelPath === "object") {
            //实例化model
            callbackFn = modelObj = new modelImage($referer ? $referer.__storage__.__info__ : null);

            //内建model
            if (modelCode = modelPath.modelCode) {
                includeModel = modelPath.includeModel;

                handleExec(modelCode, modelObj, includeModel);

                //纯数据模型
            } else {
                callbackFn.$model = modelPath.data;
            }

            //引入外部数据模型
        } else {
            $sourceManage.getModelSource(modelPath, function(source, sourceType) {
                This = this;
                $modulePath = this.modulePath;
                modelObj = new modelImage(this);

                //提取数据模型执行码
                if (source && (modelSource = source[this.pathSlice] || $log.warning('[数据模型] ' + this.realPath + '中' + this.pathSlice + '模型不存在!') && false)) {
                    i = 0;
                    l = modelSource.length;

                    initCallbackFn ? initCallbackFn(modelObj, This) : initCallbackFn = modelObj;

                    modelSourceEnd:
                        while (++i < l) {
                            switch ($type.getType(modelSource[i])) {
                                case 'function':
                                    modelCode = modelSource[i];
                                    break modelSourceEnd;
                                case 'string':
                                    includeModel.push(modelSource[i]);
                                    break;
                                case 'array':
                                    includeModel = includeModel.concat(modelSource[i]);
                                    break;
                            }
                        }

                    //实例化引入的model
                    handleExec(modelCode, modelObj, includeModel, function() {
                        //兼容同步与异步回调(返回数据model)
                        callbackFn ? callbackFn(modelObj, This) : (callbackFn = modelObj);
                    });

                } else {

                    initCallbackFn ? initCallbackFn(modelObj, This) : initCallbackFn = modelObj;
                    //兼容同步与异步回调
                    callbackFn ? callbackFn(modelObj, this) : (callbackFn = modelObj);
                }

            });
        }

        //对外提供数据模型实例化
        return {
            init: function(callback) {
                initCallbackFn ? callback(initCallbackFn, This) : initCallbackFn = callback;
            },
            load: function(callback) {
                //兼容同步与异步回调
                callbackFn ? callback(callbackFn, This) : callbackFn = callback;
            }
        }
    };


    /**
     * Created by xiyuan on 16-5-19.
     */
    /**
     * Created by xiyuan on 16-8-16.
     */

    //服务管理
    var serverManage = function($serverStroage) {
        this.$serverStroage = $serverStroage || {};
    };

    //获取注册的服务
    serverManage.prototype.get = function(serverName) {
        return this.$serverStroage[serverName];
    };

    //服务注册
    serverManage.prototype.register = function(serverName, conf) {
        this.$serverStroage[serverName] = conf;
    };

    //服务注册
    serverManage.prototype.extend = function(serverName, conf) {
        var serverConf = {},
            targetServer = this.$serverStroage[serverName];

        Object.keys(targetServer).forEach(function(key) {
            serverConf[key] = targetServer[key];
        });

        serverConf.extend = conf;

        return serverConf;
    };

    //实例化服务管理器
    var $serverManage = new serverManage();


    /**
     * Created by xiyuan on 16-8-15.
     */

    function serverVm() {
        var i = ~0,
            __stroage__ = [],
            argLen = arguments.length,
            args = [].slice.call(arguments);

        while (++i < argLen) {
            __stroage__.push(new serverInterface(args[i], __stroage__));
        }

        if (__stroage__.length === 1) {
            return __stroage__[0];
        }

        //接口数据处理
        function handle(active, arg) {
            __stroage__.forEach(function(instance) {
                instance[active].apply(instance, arg);
            });
        }

        var interface = {
            get: function(index) {
                    return __stroage__[index];
                },
                setConf: function() {
                    handle('setConf', arguments);
                    return interface;
                },
                send: function() {
                    handle('send', arguments);
                },
                cache: function() {
                    handle('cache', arguments);
                    return interface;
                },
                responseType: function() {
                    handle('responseType', arguments);
                    return interface;
                },
                receive: function() {
                    [].slice.call(arguments).forEach(function(val, index) {
                        __stroage__[index].receive(val);
                    });
                    return interface;
                },
                success: function() {
                    [].slice.call(arguments).forEach(function(val, index) {
                        __stroage__[index].success(val);
                    });
                    return interface;
                },
                fail: function() {
                    [].slice.call(arguments).forEach(function(val, index) {
                        __stroage__[index].fail(val);
                    });
                    return interface;
                },
                allReceive: function(fn) {
                    if (typeof fn === "function") {
                        var count = __stroage__.length,
                            res = [];

                        __stroage__.forEach(function(instance, index) {
                            instance['receive'].call(instance, function(data, xhr) {
                                res[index] = {
                                    data: data,
                                    req: xhr
                                };
                                if (!--count) {
                                    fn.apply(this, res);
                                }
                            });
                        });
                    }

                    return interface;
                }
        };

        //对外提供的接口
        return interface;
    };


    /**
     * Created by xiyuan on 16-8-15.
     */

    function serverImage(conf, serverInterface) {
        conf = typeof conf === 'object' ? conf : {
            url: conf
        };
        this.conf = conf;
        this.confArray = [];
        this.tmpConf = {};
        this.serverInterface = serverInterface;
        var instanceConf = this.instanceConf = {};

        var defulteServerType = 'http',
            serverType = defulteServerType;
        serverType = (typeof conf === 'object' && conf.serverType) || serverType;

        //获取服务库中的实例
        if (!(this.instance = $serverManage.get(serverType))) {
            $log.warning('[数据服务] ' + serverType + '服务器未注册!')
        }

        //获取服务类型
        if (typeof conf === 'object') {
            Object.keys(conf).forEach(function(val) {
                instanceConf[val] = conf[val];
            })
        }
        //服务初始化
        typeof this.instance.init === 'function' && this.instance.init(instanceConf);

    }

    //设置配置
    serverImage.prototype.setConf = function(confName, conf) {

        this.confArray.push({
            key: confName,
            data: conf
        });
    };

    //服务器动
    serverImage.prototype.startUp = function() {

        var conf = this.conf,
            tmpConf = this.tmpConf,
            instance = this.instance,
            instanceConf = this.instanceConf,
            extendServer = instance.extend || {};

        //获取服务类型
        if (typeof conf === 'object') {
            Object.keys(conf).forEach(function(val) {
                instanceConf[val] = conf[val];
            })
        }

        //处理继承中的配置
        switch (typeof extendServer.config) {
            case 'object':
                Object.keys(extendServer.config).forEach(function(key) {
                    switch (key) {
                        case 'header':
                            instanceConf[key] = instanceConf[key] ? $object.concat(instanceConf[key], extendServer.config[key]) : extendServer.config[key];
                            break;
                        default:
                            instanceConf[key] = extendServer.config[key];
                    }
                });
                break;
            case 'function':
                extendServer.config(instanceConf);

        }

        var $receive = [],
            $success = [],
            $fail = [],
            deleteIndex = [];

        //合并临时配置
        this.confArray.forEach(function(confData, index) {
            var key = confData.key,
                conf = confData.data;
            tmpConf[key] = conf;

            switch (key) {
                case 'data':
                    instanceConf.data = $object.concat(instanceConf.data || {}, conf);
                    break;
                case 'setConf':
                    switch (typeof conf) {
                        case 'object':
                            Object.keys(conf).forEach(function(key) {
                                instanceConf[key] = conf[key];
                            });
                            break;
                        case 'function':
                            conf(instanceConf);
                    }
                    break;
                case 'receive':
                    $receive.push(conf);
                    break;
                case 'success':
                    $success.push(conf);
                    break;
                case 'fail':
                    $fail.push(conf);
                    break;
                case 'onceReceive':
                    $receive.push(conf);
                    deleteIndex.push(index);
                    break;
                case 'onceSuccess':
                    $success.push(conf);
                    deleteIndex.push(index);
                    break;
                case 'onceFail':
                    $fail.push(conf);
                    deleteIndex.push(index);
                    break;
                default:
                    instanceConf[key] = conf;
            }
        });

        //删除配置中的 once
        deleteIndex.reverse().forEach(function(i) {
            this.confArray.splice(i, 1);
        }.bind(this));

        (function() {
            'use strict';
            //实现继承中的拦截器
            var filters = extendServer.filter || {};

            //响应处理
            function response(type, $task) {
                instanceConf[type] && $task.unshift(instanceConf[type]);

                //检查是否有处理任务
                if (!$task.length) return;

                //此函数是提供给服务处理请求专用
                instanceConf[type] = function() {
                    var res,
                        isCallback = false,
                        args = [].slice.call(arguments);

                    //回调处理
                    function callback() {
                        args = [].slice.call(arguments);
                        isCallback = true;

                        $task.forEach(function(callback) {
                            callback.apply(this, args)
                        }.bind(this))
                    }

                    //检查是否有过滤器
                    if (typeof filters[type] === "function") {
                        res = filters[type].apply(this, args.push(callback.bind(this)) && args);
                        isCallback || callback.apply(this, res instanceof Array ? res : [res])
                    } else {
                        callback.apply(this, args)
                    }
                };
            }

            //值接收
            response('receive', $receive);

            //成功
            response('success', $success);

            //失败
            response('fail', $fail);

            //检查是否有结果处理器
            if (typeof filters.processor === "function") {

                //备份相关数据结果回调
                var receiveBackups = instanceConf['receive'],
                    successBackups = instanceConf['success'],
                    failBackups = instanceConf['fail'],
                    receiveRes = {},
                    successRes = {},
                    failRes = {},
                    handleFns = {
                        receive: function() {
                            receiveRes.isRun = true;
                            typeof receiveBackups === "function" && receiveBackups.apply(this, arguments);
                        },
                        success: function() {
                            successRes.isRun = true;
                            typeof successBackups === "function" && successBackups.apply(this, arguments);
                        },
                        fail: function() {
                            failRes.isRun = true;
                            typeof failBackups === "function" && failBackups.apply(this, arguments);
                        }
                    };

                instanceConf['success'] = function() {
                    successRes.args = arguments;
                };
                instanceConf['fail'] = function() {
                    failRes.args = arguments;
                };

                instanceConf['receive'] = function(res) {
                    receiveRes.args = arguments;
                    filters.processor(res, handleFns, this);

                    if (!failRes.isRun && !successRes.isRun) {
                        successRes.args && typeof successBackups === "function" && successBackups.apply(this, successRes.args);
                        failRes.args && typeof failBackups === "function" && failBackups.apply(this, failRes.args);
                    }
                    receiveRes.isRun || (typeof receiveBackups === "function" && receiveBackups.apply(this, receiveRes.args));
                };
            }

        })();

        //实例初始化
        typeof instance.requestInit === "function" && instance.requestInit(instanceConf);

        //实现继承中的初始化
        typeof extendServer.requestInit === "function" && extendServer.requestInit(instanceConf);

        //实例处理
        typeof instance.handle === "function" && instance.handle(instanceConf, function() {
            //配置复位
            this.tmpConf = {};
            this.confArray = [];
            this.instanceConf = {};
        }.bind(this));

        //实例请求
        function request() {
            instance.request(instanceConf, (extendServer.filter || {}).request);
        }

        //实现请求重写
        if (typeof extendServer.request === "function") {
            extendServer.request(instanceConf, request);
        } else {
            request();
        }


    };

    //服务接口
    serverImage.prototype.interface = function() {
        var extendInterface,
            extendServer = this.instance.extend || {},
            interface = this.instance.interface ? this.instance.interface.call(this, this.tmpConf, this.instanceConf, this.serverInterface) : {};

        //实现继承中的接口挂载
        if (extendServer.interface) {
            extendInterface = extendServer.interface.call(this.instance, this.tmpConf);
            Object.keys(extendInterface).forEach(function(key) {
                interface[key] = extendInterface[key];
            });
        }
        return interface;
    };


    /**
     * Created by xiyuan on 16-8-15.
     */

    /**
     * 服务接口
     * @param serverInstance
     * @param servers
     */

    function serverInterface(conf, servers) {

        var interface,
            instance = new serverImage(conf, this);

        //检查服务是否注册
        if (!instance) {
            return false;
        }

        //合并服务中的接口
        interface = instance.interface();

        Object.defineProperty(this, '__stroage__', {
            writable: true,
            enumerable: false,
            configurable: true
        });

        this.__stroage__ = {
            conf: conf,
            servers: servers,
            instance: instance
        };

        Object.keys(interface).forEach(function(key) {
            this[key] = interface[key];
        }.bind(this))

    }

    //服务接口
    serverInterface.prototype.url = function(apiUrl) {
        this.__stroage__.instance.setConf('url', apiUrl);
        return this;
    };

    //服务数据发送
    serverInterface.prototype.send = function(data) {
        this.__stroage__.instance.setConf('data', data || {});
        this.__stroage__.instance.startUp();
        // return this;
    };

    //设置超时时间
    serverInterface.prototype.timeout = function(time) {
        this.__stroage__.instance.setConf('timeout', Number(time));
        return this;
    };

    //缓存开启
    serverInterface.prototype.cache = function(toggle) {
        this.__stroage__.instance.setConf('cache', !!toggle);
        return this;
    };

    //选项会在请求中设置 XMLHttpRequestResponseType 属性
    serverInterface.prototype.responseType = function(responseType) {
        this.__stroage__.instance.setConf('responseType', responseType);
        return this;
    };

    //请求数据接收
    serverInterface.prototype.receive = serverInterface.prototype.allReceive = function(receiveFn) {
        this.__stroage__.instance.setConf('receive', receiveFn);
        return this;
    };

    //请求数据成功
    serverInterface.prototype.success = function(successFn) {
        this.__stroage__.instance.setConf('success', successFn);
        return this;
    };

    //请求数据失败
    serverInterface.prototype.fail = function(failFn) {
        this.__stroage__.instance.setConf('fail', failFn);
        return this;
    };



    //请求数据接收
    serverInterface.prototype.onceReceive = function(receiveFn) {
        this.__stroage__.instance.setConf('onceReceive', receiveFn);
        return this;
    };

    //请求数据成功
    serverInterface.prototype.onceSuccess = function(successFn) {
        this.__stroage__.instance.setConf('onceSuccess', successFn);
        return this;
    };

    //请求数据失败
    serverInterface.prototype.onceFail = function(failFn) {
        this.__stroage__.instance.setConf('onceFail', failFn);
        return this;
    };

    //设置请求配置
    serverInterface.prototype.setConf = function(confFn) {
        this.__stroage__.instance.setConf('setConf', confFn);
        return this;
    };


    $serverManage.register('http', {
        //服务
        requestInit: function(stroage, interceptors) {
            stroage.xhr = new XMLHttpRequest();
            stroage.async = stroage.async || true;
            stroage.header = stroage.header || {};
            stroage.sendData = stroage.data || {};
            stroage.responseType = stroage.responseType || 'json';
        },
        handle: function(stroage, callbackFn, interceptors) {

            var res,
                xhr = stroage.xhr;

            xhr.onreadystatechange = function() {
                //读取状态
                if (xhr.readyState === 4) {
                    //请求状态
                    if (xhr.status > 199 && xhr.status < 300) {
                        switch (stroage.responseType) {
                            case 'html':
                                res = xhr.responseText;
                                break;
                            case 'xml':
                                res = xhr.responseXML;
                                break;
                            case 'json':
                                res = $json.toObject(xhr.responseText);
                                break;
                            default:
                                res = xhr.response || xhr.responseText;
                        }
                        typeof stroage.success === "function" && stroage.success.call(xhr, res, stroage);
                    } else {
                        typeof stroage.fail === "function" && stroage.fail.call(xhr, res, stroage);
                    }
                    typeof stroage.receive === "function" && stroage.receive.call(xhr, res, stroage);

                    typeof callbackFn === "function" && callbackFn();
                }

            };
        },
        //服务请求
        request: function(stroage, requestFilters) {
            var isRequest = false;

            //超时设置
            stroage.timeout && (stroage.xhr.timeout = stroage.timeout);

            //处理请求类型
            stroage.method = (new RegExp(stroage.method, 'ig').exec('GET,DELETE,POST,PUT,HEAD').toString() || 'GET');

            var sendData = stroage.sendData ? $url.objectToUrl(stroage.sendData) : '';

            //检查请求类型
            switch (stroage.method) {
                case 'POST':

                    break;
                case 'GET':
                    stroage.url = stroage.url + (sendData && (stroage.url.indexOf('?') === -1 ? '?' : '&') + sendData);
                    break;
                case 'DELETE':

                    break;
                case 'PUT':

                    break;
                case 'HEAD':

                    break;
            }

            //打开请求资源
            stroage.xhr.open(stroage.method, stroage.url, stroage.async);

            //请求类型检查
            switch (stroage.method) {
                case 'POST':
                    stroage.header['Content-type'] = 'application/x-www-form-urlencoded;charset=utf-8';
                    break;
                case 'GET':
                    //判断请求是否需要设置content-type(主要处理zip压缩)
                    //(typeof option.preset === "function" && option.preset.type) || xhr.setRequestHeader('Content-type','application/text/html;charset=utf-8');
                    break;
                case 'DELETE':

                    break;
                case 'PUT':

                    break;
                case 'HEAD':

                    break;
            }

            function request(sendData) {
                isRequest = true;

                //ajax请求缓存
                typeof stroage.cache !== "undefined" && !stroage.cache && (stroage.header["Cache-Control"] = "no-cache") && (stroage.header["If-Modified-Since"] = "0");

                //设置请求头
                Object.keys(stroage.header).forEach(function(key) {
                    stroage.xhr.setRequestHeader(key, stroage.header[key]);
                });
                stroage.xhr.send(sendData);
            }

            //请求过滤
            typeof requestFilters === "function" && requestFilters(stroage, request);

            //发送数据
            isRequest || request(sendData);
        },
        //额外的接口
        interface: function(stroage) {

            return {
                //请求类型设置
                method: function(methodType) {
                    stroage.method = methodType;
                },
                async: function(asyncToggle) {
                    stroage.async = !!asyncToggle;
                },
                header: function(headers) {
                    stroage.header = stroage.header || {};
                    switch (typeof headers) {
                        case 'function':
                            headers(stroage.header);
                            break;
                        case 'object':
                            Object.keys(headers).forEach(function(key) {
                                stroage.header[key] = headers[key];
                            });
                            break;
                    }
                }
            }
        }
    });


    $serverManage.register('socket', {
        //服务初始化
        init: function(stroage) {
            stroage.WS = $net.socket({
                url: stroage.url,
                data: stroage.sendData
            });

        },
        //请求初始化
        requestInit: function(stroage, interceptors) {

        },
        handle: function(stroage, callbackFn, interceptors) {

            stroage.WS.error(function(event) {
                typeof stroage.fail === "function" && stroage.fail.call(stroage.WS, event, stroage);
            }).close(function(event) {
                typeof stroage.fail === "function" && stroage.fail.call(stroage.WS, event, stroage);
            }).message(function(event) {
                typeof stroage.receive === "function" && stroage.receive.call(stroage.WS, event, stroage);
            }).open(function(event) {
                typeof stroage.receive === "function" && stroage.receive.call(stroage.WS, event, stroage);
            })


        },
        //服务请求
        request: function(stroage, interceptors) {
            if (!stroage.isRequest) {
                stroage.WS.request();
                stroage.isRequest = true;
            }
        },
        //额外的接口
        interface: function(stroage, instanceConf, serverInterface) {
            return {
                error: function(fn) {
                    instanceConf.WS.error(fn);
                    return serverInterface;
                },
                close: function(fn) {
                    instanceConf.WS.close(fn);
                    return serverInterface;
                },
                message: function(fn) {
                    instanceConf.WS.message(fn);
                    return serverInterface;
                },
                open: function(fn) {
                    instanceConf.WS.open(fn);
                    return serverInterface;
                }
            }
        }
    });


    $serverManage.register('jsonp', {
        //服务请求
        request: function(stroage, interceptors) {
            $jsonp({
                url: stroage.url,
                type: 'js',
                element: false,
                callbackName: 'callback',
                jsonpParameter: false,
                jsonpCallback: stroage.method,
                complete: function() {
                    if (arguments.length) {
                        typeof stroage.success === 'function' && stroage.success.apply(this, arguments)
                    } else {
                        typeof stroage.error === 'function' && stroage.error.apply(this, arguments)
                    }
                    typeof stroage.receive === 'function' && stroage.receive.apply(this, arguments)
                }

            })
        }
    });


    /**
     * Created by xiyuan on 16-8-16.
     */
    //解析配置文件中注册的服务
    (function(serverRegisterConfHandle) {
        //检查配置是否加载完毕
        typeof $configManage.reload === "function" ? $configManage.reload(serverRegisterConfHandle) : serverRegisterConfHandle();
    })(function() {
        'use strict';

        var serverRegisterStroage = $configStroage.serverRegisterStroage;

        Object.keys(serverRegisterStroage).forEach(function(key) {
            var serverName = key,
                serverConf = serverRegisterStroage[key];

            //检查是否注册还是继承
            switch (typeof serverConf) {
                case 'function':
                    $serverManage.register(serverName, serverConf($serverManage));
                    break;
                case 'object':
                    $serverManage.register(serverName, serverConf);
                    break;
            }
        });

    });


    /**
     * Created by xiyuan on 15-11-30.
     */
    /*初始化配置*/
    //触发配置初始化
    $eventManage.$apply('config:init', this);

    //配置加载完毕后的回调(应用开始启动)
    $configManage.configInit(function() {

        //设置设备平台属性
        document.querySelector('HTML').setAttribute('device-platform', $platform.os.family);

        //加载有效自定义配置
        $configManage.reloadCoustomConfig();

        //路由监控
        $routeManage.routeWatch();

        //页面切换器初始化
        $configStroage.pageToggle = $configStroage.pageToggleRegister[$configStroage.selectPageToggle] || $configStroage.pageToggleRegister['default'];
        window.document.body.innerHTML = $configStroage.pageToggle.layout;

        //页面切换初始化
        typeof $configStroage.pageToggle.init === "function" && $configStroage.pageToggle.init();

        //配置加载执行的回调
        $configManage.__reload__.forEach(function(fn) {
            fn();
        });
        delete $configManage.__reload__;
        delete $configManage.reload;

        //应用引导启动
        (function(bootstraps) {
            var i = ~0,
                l = bootstraps.length;
            while (++i < l) {
                bootstraps[i]();
            }
        })($configStroage.bootstrapFns);

        //
        // console.log($configStroage,'--init 文件---');


        //系统初始化页面跳转定位 [已有的路径与默认的路由路径]
        if ($configStroage.routeModel === 'html5' || !window.location.hash.match(/^#!\/[^\s]+/)) {
            var href = $routeManage.assign($configStroage.defaultRoute).path;

            if ($configStroage.routeModel === 'html5') {
                var pageUrl = $path.resolve(href, $routeManage.rootProjectPath);
                //添加新的历史记录
                window.history.pushState({
                    "target": href
                }, null, pageUrl);

            } else {
                //通知hash监听器当前跳转不需要做处理
                $routeManage.hashListener = false;
                $url.hash('!/' + href);
            }
        } else {
            $routeManage.assign(getPathNormalize($configStroage.routeModel));
        }

        //消除物理点击和移动浏览器上的点击事件的触发之间的300ms延迟
        new $extend.FastClick(document.body);
    });


    /**
     * Created by xiyuan on 16-7-27.
     */
    var $extend = {};


    ;
    (function($extend) {
        'use strict';

        /**
         * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
         *
         * @codingstandard ftlabs-jsv2
         * @copyright The Financial Times Limited [All Rights Reserved]
         * @license MIT License (see LICENSE.txt)
         */

        /*jslint browser:true, node:true*/
        /*global define, Event, Node*/


        /**
         * Instantiate fast-clicking listeners on the specified layer.
         *
         * @constructor
         * @param {Element} layer The layer to listen on
         * @param {Object} [options={}] The options to override the defaults
         */
        function FastClick(layer, options) {
            var oldOnClick;

            options = options || {};

            /**
             * Whether a click is currently being tracked.
             *
             * @type boolean
             */
            this.trackingClick = false;


            /**
             * Timestamp for when click tracking started.
             *
             * @type number
             */
            this.trackingClickStart = 0;


            /**
             * The element being tracked for a click.
             *
             * @type EventTarget
             */
            this.targetElement = null;


            /**
             * X-coordinate of touch start event.
             *
             * @type number
             */
            this.touchStartX = 0;


            /**
             * Y-coordinate of touch start event.
             *
             * @type number
             */
            this.touchStartY = 0;


            /**
             * ID of the last touch, retrieved from Touch.identifier.
             *
             * @type number
             */
            this.lastTouchIdentifier = 0;


            /**
             * Touchmove boundary, beyond which a click will be cancelled.
             *
             * @type number
             */
            this.touchBoundary = options.touchBoundary || 10;


            /**
             * The FastClick layer.
             *
             * @type Element
             */
            this.layer = layer;

            /**
             * The minimum time between tap(touchstart and touchend) events
             *
             * @type number
             */
            this.tapDelay = options.tapDelay || 200;

            /**
             * The maximum time for a tap
             *
             * @type number
             */
            this.tapTimeout = options.tapTimeout || 700;

            if (FastClick.notNeeded(layer)) {
                return;
            }

            // Some old versions of Android don't have Function.prototype.bind
            function bind(method, context) {
                return function() {
                    return method.apply(context, arguments);
                };
            }


            var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
            var context = this;
            for (var i = 0, l = methods.length; i < l; i++) {
                context[methods[i]] = bind(context[methods[i]], context);
            }

            // Set up event handlers as required
            if (deviceIsAndroid) {
                layer.addEventListener('mouseover', this.onMouse, true);
                layer.addEventListener('mousedown', this.onMouse, true);
                layer.addEventListener('mouseup', this.onMouse, true);
            }

            layer.addEventListener('click', this.onClick, true);
            layer.addEventListener('touchstart', this.onTouchStart, false);
            layer.addEventListener('touchmove', this.onTouchMove, false);
            layer.addEventListener('touchend', this.onTouchEnd, false);
            layer.addEventListener('touchcancel', this.onTouchCancel, false);

            // Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
            // which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
            // layer when they are cancelled.
            if (!Event.prototype.stopImmediatePropagation) {
                layer.removeEventListener = function(type, callback, capture) {
                    var rmv = Node.prototype.removeEventListener;
                    if (type === 'click') {
                        rmv.call(layer, type, callback.hijacked || callback, capture);
                    } else {
                        rmv.call(layer, type, callback, capture);
                    }
                };

                layer.addEventListener = function(type, callback, capture) {
                    var adv = Node.prototype.addEventListener;
                    if (type === 'click') {
                        adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                            if (!event.propagationStopped) {
                                callback(event);
                            }
                        }), capture);
                    } else {
                        adv.call(layer, type, callback, capture);
                    }
                };
            }

            // If a handler is already declared in the element's onclick attribute, it will be fired before
            // FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
            // adding it as listener.
            if (typeof layer.onclick === 'function') {

                // Android browser on at least 3.2 requires a new reference to the function in layer.onclick
                // - the old one won't work if passed to addEventListener directly.
                oldOnClick = layer.onclick;
                layer.addEventListener('click', function(event) {
                    oldOnClick(event);
                }, false);
                layer.onclick = null;
            }
        }

        /**
         * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
         *
         * @type boolean
         */
        var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

        /**
         * Android requires exceptions.
         *
         * @type boolean
         */
        var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


        /**
         * iOS requires exceptions.
         *
         * @type boolean
         */
        var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


        /**
         * iOS 4 requires an exception for select elements.
         *
         * @type boolean
         */
        var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


        /**
         * iOS 6.0-7.* requires the target element to be manually derived
         *
         * @type boolean
         */
        var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

        /**
         * BlackBerry requires exceptions.
         *
         * @type boolean
         */
        var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

        /**
         * Determine whether a given element requires a native click.
         *
         * @param {EventTarget|Element} target Target DOM element
         * @returns {boolean} Returns true if the element needs a native click
         */
        FastClick.prototype.needsClick = function(target) {
            switch (target.nodeName.toLowerCase()) {

                // Don't send a synthetic click to disabled inputs (issue #62)
                case 'button':
                case 'select':
                case 'textarea':
                    if (target.disabled) {
                        return true;
                    }

                    break;
                case 'input':

                    // File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
                    if ((deviceIsIOS && target.type === 'file') || target.disabled) {
                        return true;
                    }

                    break;
                case 'label':
                case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
                case 'video':
                    return true;
            }

            return (/\bneedsclick\b/).test(target.className);
        };


        /**
         * Determine whether a given element requires a call to focus to simulate click into element.
         *
         * @param {EventTarget|Element} target Target DOM element
         * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
         */
        FastClick.prototype.needsFocus = function(target) {
            switch (target.nodeName.toLowerCase()) {
                case 'textarea':
                    return true;
                case 'select':
                    return !deviceIsAndroid;
                case 'input':
                    switch (target.type) {
                        case 'button':
                        case 'checkbox':
                        case 'file':
                        case 'image':
                        case 'radio':
                        case 'submit':
                            return false;
                    }

                    // No point in attempting to focus disabled inputs
                    return !target.disabled && !target.readOnly;
                default:
                    return (/\bneedsfocus\b/).test(target.className);
            }
        };


        /**
         * Send a click event to the specified element.
         *
         * @param {EventTarget|Element} targetElement
         * @param {Event} event
         */
        FastClick.prototype.sendClick = function(targetElement, event) {
            var clickEvent, touch;

            // On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
            if (document.activeElement && document.activeElement !== targetElement) {
                document.activeElement.blur();
            }

            touch = event.changedTouches[0];

            // Synthesise a click event, with an extra attribute so it can be tracked
            clickEvent = document.createEvent('MouseEvents');
            clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
            clickEvent.forwardedTouchEvent = true;
            targetElement.dispatchEvent(clickEvent);
        };

        FastClick.prototype.determineEventType = function(targetElement) {

            //Issue #159: Android Chrome Select Box does not open with a synthetic click event
            if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
                return 'mousedown';
            }

            return 'click';
        };


        /**
         * @param {EventTarget|Element} targetElement
         */
        FastClick.prototype.focus = function(targetElement) {
            var length;

            // Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
            if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
                length = targetElement.value.length;
                targetElement.setSelectionRange(length, length);
            } else {
                targetElement.focus();
            }
        };


        /**
         * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
         *
         * @param {EventTarget|Element} targetElement
         */
        FastClick.prototype.updateScrollParent = function(targetElement) {
            var scrollParent, parentElement;

            scrollParent = targetElement.fastClickScrollParent;

            // Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
            // target element was moved to another parent.
            if (!scrollParent || !scrollParent.contains(targetElement)) {
                parentElement = targetElement;
                do {
                    if (parentElement.scrollHeight > parentElement.offsetHeight) {
                        scrollParent = parentElement;
                        targetElement.fastClickScrollParent = parentElement;
                        break;
                    }

                    parentElement = parentElement.parentElement;
                } while (parentElement);
            }

            // Always update the scroll top tracker if possible.
            if (scrollParent) {
                scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
            }
        };


        /**
         * @param {EventTarget} targetElement
         * @returns {Element|EventTarget}
         */
        FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

            // On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
            if (eventTarget.nodeType === Node.TEXT_NODE) {
                return eventTarget.parentNode;
            }

            return eventTarget;
        };


        /**
         * On touch start, record the position and scroll offset.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.onTouchStart = function(event) {
            var targetElement, touch, selection;

            // Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
            if (event.targetTouches.length > 1) {
                return true;
            }

            targetElement = this.getTargetElementFromEventTarget(event.target);
            touch = event.targetTouches[0];

            if (deviceIsIOS) {

                // Only trusted events will deselect text on iOS (issue #49)
                selection = window.getSelection();
                if (selection.rangeCount && !selection.isCollapsed) {
                    return true;
                }

                if (!deviceIsIOS4) {

                    // Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
                    // when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
                    // with the same identifier as the touch event that previously triggered the click that triggered the alert.
                    // Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
                    // immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
                    // Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
                    // which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
                    // random integers, it's safe to to continue if the identifier is 0 here.
                    if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                        event.preventDefault();
                        return false;
                    }

                    this.lastTouchIdentifier = touch.identifier;

                    // If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
                    // 1) the user does a fling scroll on the scrollable layer
                    // 2) the user stops the fling scroll with another tap
                    // then the event.target of the last 'touchend' event will be the element that was under the user's finger
                    // when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
                    // is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
                    this.updateScrollParent(targetElement);
                }
            }

            this.trackingClick = true;
            this.trackingClickStart = event.timeStamp;
            this.targetElement = targetElement;

            this.touchStartX = touch.pageX;
            this.touchStartY = touch.pageY;

            // Prevent phantom clicks on fast double-tap (issue #36)
            if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
                event.preventDefault();
            }

            return true;
        };


        /**
         * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.touchHasMoved = function(event) {
            var touch = event.changedTouches[0],
                boundary = this.touchBoundary;

            if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
                return true;
            }

            return false;
        };


        /**
         * Update the last position.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.onTouchMove = function(event) {
            if (!this.trackingClick) {
                return true;
            }

            // If the touch has moved, cancel the click tracking
            if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
                this.trackingClick = false;
                this.targetElement = null;
            }

            return true;
        };


        /**
         * Attempt to find the labelled control for the given label element.
         *
         * @param {EventTarget|HTMLLabelElement} labelElement
         * @returns {Element|null}
         */
        FastClick.prototype.findControl = function(labelElement) {

            // Fast path for newer browsers supporting the HTML5 control attribute
            if (labelElement.control !== undefined) {
                return labelElement.control;
            }

            // All browsers under test that support touch events also support the HTML5 htmlFor attribute
            if (labelElement.htmlFor) {
                return document.getElementById(labelElement.htmlFor);
            }

            // If no for attribute exists, attempt to retrieve the first labellable descendant element
            // the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
            return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
        };


        /**
         * On touch end, determine whether to send a click event at once.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.onTouchEnd = function(event) {
            var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

            if (!this.trackingClick) {
                return true;
            }

            // Prevent phantom clicks on fast double-tap (issue #36)
            if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
                this.cancelNextClick = true;
                return true;
            }

            if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
                return true;
            }

            // Reset to prevent wrong click cancel on input (issue #156).
            this.cancelNextClick = false;

            this.lastClickTime = event.timeStamp;

            trackingClickStart = this.trackingClickStart;
            this.trackingClick = false;
            this.trackingClickStart = 0;

            // On some iOS devices, the targetElement supplied with the event is invalid if the layer
            // is performing a transition or scroll, and has to be re-detected manually. Note that
            // for this to function correctly, it must be called *after* the event target is checked!
            // See issue #57; also filed as rdar://13048589 .
            if (deviceIsIOSWithBadTarget) {
                touch = event.changedTouches[0];

                // In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
                targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
                targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
            }

            targetTagName = targetElement.tagName.toLowerCase();
            if (targetTagName === 'label') {
                forElement = this.findControl(targetElement);
                if (forElement) {
                    this.focus(targetElement);
                    if (deviceIsAndroid) {
                        return false;
                    }

                    targetElement = forElement;
                }
            } else if (this.needsFocus(targetElement)) {

                // Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
                // Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
                if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
                    this.targetElement = null;
                    return false;
                }

                this.focus(targetElement);
                this.sendClick(targetElement, event);

                // Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
                // Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
                if (!deviceIsIOS || targetTagName !== 'select') {
                    this.targetElement = null;
                    event.preventDefault();
                }

                return false;
            }

            if (deviceIsIOS && !deviceIsIOS4) {

                // Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
                // and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
                scrollParent = targetElement.fastClickScrollParent;
                if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
                    return true;
                }
            }

            // Prevent the actual click from going though - unless the target node is marked as requiring
            // real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
            if (!this.needsClick(targetElement)) {
                event.preventDefault();
                this.sendClick(targetElement, event);
            }

            return false;
        };


        /**
         * On touch cancel, stop tracking the click.
         *
         * @returns {void}
         */
        FastClick.prototype.onTouchCancel = function() {
            this.trackingClick = false;
            this.targetElement = null;
        };


        /**
         * Determine mouse events which should be permitted.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.onMouse = function(event) {

            // If a target element was never set (because a touch event was never fired) allow the event
            if (!this.targetElement) {
                return true;
            }

            if (event.forwardedTouchEvent) {
                return true;
            }

            // Programmatically generated events targeting a specific element should be permitted
            if (!event.cancelable) {
                return true;
            }

            // Derive and check the target element to see whether the mouse event needs to be permitted;
            // unless explicitly enabled, prevent non-touch click events from triggering actions,
            // to prevent ghost/doubleclicks.
            if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

                // Prevent any user-added listeners declared on FastClick element from being fired.
                if (event.stopImmediatePropagation) {
                    event.stopImmediatePropagation();
                } else {

                    // Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
                    event.propagationStopped = true;
                }

                // Cancel the event
                event.stopPropagation();
                event.preventDefault();

                return false;
            }

            // If the mouse event is permitted, return true for the action to go through.
            return true;
        };


        /**
         * On actual clicks, determine whether this is a touch-generated click, a click action occurring
         * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
         * an actual click which should be permitted.
         *
         * @param {Event} event
         * @returns {boolean}
         */
        FastClick.prototype.onClick = function(event) {
            var permitted;

            // It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
            if (this.trackingClick) {
                this.targetElement = null;
                this.trackingClick = false;
                return true;
            }

            // Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
            if (event.target.type === 'submit' && event.detail === 0) {
                return true;
            }

            permitted = this.onMouse(event);

            // Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
            if (!permitted) {
                this.targetElement = null;
            }

            // If clicks are permitted, return true for the action to go through.
            return permitted;
        };


        /**
         * Remove all FastClick's event listeners.
         *
         * @returns {void}
         */
        FastClick.prototype.destroy = function() {
            var layer = this.layer;

            if (deviceIsAndroid) {
                layer.removeEventListener('mouseover', this.onMouse, true);
                layer.removeEventListener('mousedown', this.onMouse, true);
                layer.removeEventListener('mouseup', this.onMouse, true);
            }

            layer.removeEventListener('click', this.onClick, true);
            layer.removeEventListener('touchstart', this.onTouchStart, false);
            layer.removeEventListener('touchmove', this.onTouchMove, false);
            layer.removeEventListener('touchend', this.onTouchEnd, false);
            layer.removeEventListener('touchcancel', this.onTouchCancel, false);
        };


        /**
         * Check whether FastClick is needed.
         *
         * @param {Element} layer The layer to listen on
         */
        FastClick.notNeeded = function(layer) {
            var metaViewport;
            var chromeVersion;
            var blackberryVersion;
            var firefoxVersion;

            // Devices that don't support touch don't need FastClick
            if (typeof window.ontouchstart === 'undefined') {
                return true;
            }

            // Chrome version - zero for other browsers
            chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

            if (chromeVersion) {

                if (deviceIsAndroid) {
                    metaViewport = document.querySelector('meta[name=viewport]');

                    if (metaViewport) {
                        // Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
                        if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                            return true;
                        }
                        // Chrome 32 and above with width=device-width or less don't need FastClick
                        if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                            return true;
                        }
                    }

                    // Chrome desktop doesn't need FastClick (issue #15)
                } else {
                    return true;
                }
            }

            if (deviceIsBlackBerry10) {
                blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

                // BlackBerry 10.3+ does not require Fastclick library.
                // https://github.com/ftlabs/fastclick/issues/251
                if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
                    metaViewport = document.querySelector('meta[name=viewport]');

                    if (metaViewport) {
                        // user-scalable=no eliminates click delay.
                        if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                            return true;
                        }
                        // width=device-width (or less than device-width) eliminates click delay.
                        if (document.documentElement.scrollWidth <= window.outerWidth) {
                            return true;
                        }
                    }
                }
            }

            // IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
            if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
                return true;
            }

            // Firefox version - zero for other browsers
            firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

            if (firefoxVersion >= 27) {
                // Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

                metaViewport = document.querySelector('meta[name=viewport]');
                if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
                    return true;
                }
            }

            // IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
            // http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
            if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
                return true;
            }

            return false;
        };


        /**
         * Factory method for creating a FastClick object
         *
         * @param {Element} layer The layer to listen on
         * @param {Object} [options={}] The options to override the defaults
         */
        FastClick.attach = function(layer, options) {
            return new FastClick(layer, options);
        };


        if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

            // AMD. Register as an anonymous module.
            define(function() {
                return FastClick;
            });
        } else if (typeof module !== 'undefined' && module.exports) {
            module.exports = FastClick.attach;
            module.exports.FastClick = FastClick;
        } else {
            $extend.FastClick = FastClick;
        }

    }($extend || window));


}(

    window.$FRAME = {}
);